(in-package :sdl3.render.test)

(sdl3:def-app-init 10-init (argc argv)
  (declare (ignore argc argv))
  (sdl3:set-app-metadata "Example Renderer Geometry" "1.0" "com.example.renderer-geometry")
  (unless (sdl3:init :video)
    (format t "~a~%" (sdl3:get-error))
    (return-from 10-init :failure))
  (multiple-value-bind (rst window renderer)
      (sdl3:create-window-and-renderer "examples/renderer/geometry" +window-width+ +window-height+ :resizable)
    (unless rst
      (format t "~a~%" (sdl3:get-error))
      (return-from 10-init :failure))
    (setf *window-handle* window
	  *renderer-handler* renderer)
    (let ((surface (sdl3:load-bmp (%u:load-texture "sample.bmp"))))
      (when (cffi:null-pointer-p surface)
	(format t "~a~%" (sdl3:get-error))
	(return-from 10-init :failure))
      ;; translate surface
      (with-slots ((texture-width sdl3:%w)
		   (texture-height sdl3:%h))
	  (cffi:mem-ref surface '(:struct sdl3:surface))
	(format t "texture width: ~a~%" texture-width)
	(format t "texture height: ~a~%" texture-height)
	(setf *texture-height* (%u:to-single-float texture-height)
	      *texture-width* (%u:to-single-float texture-width)))
      (let ((texture (sdl3:create-texture-from-surface *renderer-handler* surface)))
	(when (cffi:null-pointer-p texture)
	  (format t "~a~%" (sdl3:get-error))
	  (return-from 10-init :failure))
	(setf *texture-handler* texture))
      (sdl3:destroy-surface surface)))
  :continue)

(sdl3:def-app-iterate 10-iterate ()
  (let* ((now (sdl3:get-ticks))
	 (direction (if (>= (mod now 2000) 1000) 1.0 -1.0))
	 (scale (%u:to-single-float (* (/ (- (mod now 1000) 500) 500.0) direction)))
	 (size (+ 200.0 (* 200.0 scale)))
	 (triangle-verteices (list (make-instance 'sdl3:vertex :%tex-coord (make-instance 'sdl3:fpoint :%x 0.0 :%y 0.0)
							       :%color (make-instance 'sdl3:fcolor :%r 1.0 :%g 0.0 :%b 0.0 :%a 1.0)
							       :%position (make-instance 'sdl3:fpoint :%x (/ +window-width+ 2.0)
												      :%y (/ (- +window-height+ size) 2.0)))
				   (make-instance 'sdl3:vertex :%tex-coord (make-instance 'sdl3:fpoint :%x 0.0 :%y 0.0)
							       :%color (make-instance 'sdl3:fcolor :%r 0.0 :%g 1.0 :%b 0.0 :%a 1.0)
							       :%position (make-instance 'sdl3:fpoint :%x (/ (+ +window-width+ size) 2.0)
												      :%y (/ (+ +window-height+ size) 2.0)))
				   (make-instance 'sdl3:vertex :%tex-coord (make-instance 'sdl3:fpoint :%x 0.0 :%y 0.0)
							       :%color (make-instance 'sdl3:fcolor :%r 0.0 :%g 0.0 :%b 1.0 :%a 1.0)
							       :%position (make-instance 'sdl3:fpoint :%x (/ (- +window-width+ size) 2.0)
												      :%y (/ (+ +window-height+ size) 2.0)))))
	 (texture-verteices (list (make-instance 'sdl3:vertex :%tex-coord (make-instance 'sdl3:fpoint :%x 0.0 :%y 0.0)
							      :%color (make-instance 'sdl3:fcolor :%r 1.0 :%g 1.0 :%b 1.0 :%a 1.0)
							      :%position (make-instance 'sdl3:fpoint :%x 10.0 :%y 10.0))
				  (make-instance 'sdl3:vertex :%tex-coord (make-instance 'sdl3:fpoint :%x 1.0 :%y 0.0)
							      :%color (make-instance 'sdl3:fcolor :%r 1.0 :%g 1.0 :%b 1.0 :%a 1.0)
							      :%position (make-instance 'sdl3:fpoint :%x 150.0 :%y 10.0))
				  (make-instance 'sdl3:vertex :%tex-coord (make-instance 'sdl3:fpoint :%x 0.0 :%y 1.0)
							      :%color (make-instance 'sdl3:fcolor :%r 1.0 :%g 1.0 :%b 1.0 :%a 1.0)
							      :%position (make-instance 'sdl3:fpoint :%x 10.0 :%y 150.0)))))
    (sdl3:set-render-draw-color *renderer-handler* 0 0 0 255)
    (sdl3:render-clear *renderer-handler*)
    (sdl3:render-geometry *renderer-handler* (cffi:null-pointer) triangle-verteices nil)
    (sdl3:render-geometry *renderer-handler* *texture-handler* texture-verteices nil)
    
    (dotimes (i (length texture-verteices))
      (setf (sdl3:%x (sdl3:%position (nth i texture-verteices)))
	    (+ (sdl3:%x (sdl3:%position (nth i texture-verteices)))
	       450.0)))
    (nconc texture-verteices
	   (list (make-instance 'sdl3:vertex :%tex-coord (make-instance 'sdl3:fpoint :%x 1.0 :%y 1.0)
					     :%color (make-instance 'sdl3:fcolor :%r 1.0 :%g 1.0 :%b 1.0 :%a 1.0)
					     :%position (make-instance 'sdl3:fpoint :%x 600.0 :%y 150.0))))

    (sdl3:render-geometry *renderer-handler* *texture-handler* texture-verteices '(0 1 2 1 2 3))
    (sdl3:render-present *renderer-handler*))
  :continue)

(sdl3:def-app-event 10-event (event-type pevent)
  (when (eql event-type :quit)
    (return-from 10-event :success))
  :continue)

(sdl3:def-app-quit 10-quit (result)
  (declare (ignore result))
  (sdl3:destroy-texture *texture-handler*))

(defun do-geometry-demo ()
  (renderer-init)
  (sdl3:enter-app-main-callbacks '10-init '10-iterate '10-event '10-quit))


