(:FUNCTION "SDL_TriggerBreakpoint"
 "Attempt to tell an attached debugger to pause.

This allows an app to programmatically halt (\"break\") the debugger as if it
had hit a breakpoint, allowing the developer to examine program state, etc.

This is a macro--not a function--so that the debugger breaks on the source
code line that used SDL_TriggerBreakpoint and not in some random guts of
SDL. SDL_assert uses this macro for the same reason.

If the program is not running under a debugger, SDL_TriggerBreakpoint will
likely terminate the app, possibly without warning. If the current platform
isn't supported, this macro is left undefined.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_disabled_assert" "The macro used when an assertion is disabled.

This isn't for direct use by apps, but this is the code that is inserted
when an SDL_assert is disabled (perhaps in a release build).

The code does nothing, but wraps `condition` in a sizeof operator, which
generates no code and has no side effects, but avoid compiler warnings
about unused variables.

\\param condition the condition to assert (but not actually run here).

\\since This macro is available since SDL 3.2.0.
")
(:ENUM "SDL_AssertState" "Possible outcomes from a triggered assertion.

When an enabled assertion triggers, it may call the assertion handler
(possibly one provided by the app via SDL_SetAssertionHandler), which will
return one of these values, possibly after asking the user.

Then SDL will respond based on this outcome (loop around to retry the
condition, try to break in a debugger, kill the program, or ignore the
problem).

\\since This enum is available since SDL 3.2.0.
")
(:STRUCT "SDL_AssertData" "Information about an assertion failure.

This structure is filled in with information about a triggered assertion,
used by the assertion handler, then added to the assertion report. This is
returned as a linked list from SDL_GetAssertionReport().

\\since This struct is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ReportAssertion" "Never call this directly.

Use the SDL_assert macros instead.

\\param data assert data structure.
\\param func function name.
\\param file file name.
\\param line line number.
\\returns assert state.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_AssertBreakpoint"
 "The macro used when an assertion triggers a breakpoint.

This isn't for direct use by apps; use SDL_assert or SDL_TriggerBreakpoint
instead.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_enabled_assert" "The macro used when an assertion is enabled.

This isn't for direct use by apps, but this is the code that is inserted
when an SDL_assert is enabled.

The `do {} while(0)` avoids dangling else problems:

```c
if (x) SDL_assert(y); else blah();
```

... without the do/while, the \"else\" could attach to this macro's \"if\". We
try to handle just the minimum we need here in a macro...the loop, the
static vars, and break points. The heavy lifting is handled in
SDL_ReportAssertion().

\\param condition the condition to assert.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_assert"
 "An assertion test that is normally performed only in debug builds.

This macro is enabled when the SDL_ASSERT_LEVEL is >= 2, otherwise it is
disabled. This is meant to only do these tests in debug builds, so they can
tend to be more expensive, and they are meant to bring everything to a halt
when they fail, with the programmer there to assess the problem.

In short: you can sprinkle these around liberally and assume they will
evaporate out of the build when building for end-users.

When assertions are disabled, this wraps `condition` in a `sizeof`
operator, which means any function calls and side effects will not run, but
the compiler will not complain about any otherwise-unused variables that
are only referenced in the assertion.

One can set the environment variable \"SDL_ASSERT\" to one of several strings
(\"abort\", \"break\", \"retry\", \"ignore\", \"always_ignore\") to force a default
behavior, which may be desirable for automation purposes. If your platform
requires GUI interfaces to happen on the main thread but you're debugging
an assertion in a background thread, it might be desirable to set this to
\"break\" so that your debugger takes control as soon as assert is triggered,
instead of risking a bad UI interaction (deadlock, etc) in the application.

\\param condition boolean value to test.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_assert_release"
 "An assertion test that is performed even in release builds.

This macro is enabled when the SDL_ASSERT_LEVEL is >= 1, otherwise it is
disabled. This is meant to be for tests that are cheap to make and
extremely unlikely to fail; generally it is frowned upon to have an
assertion failure in a release build, so these assertions generally need to
be of more than life-and-death importance if there's a chance they might
trigger. You should almost always consider handling these cases more
gracefully than an assert allows.

When assertions are disabled, this wraps `condition` in a `sizeof`
operator, which means any function calls and side effects will not run, but
the compiler will not complain about any otherwise-unused variables that
are only referenced in the assertion.

One can set the environment variable \"SDL_ASSERT\" to one of several strings
(\"abort\", \"break\", \"retry\", \"ignore\", \"always_ignore\") to force a default
behavior, which may be desirable for automation purposes. If your platform
requires GUI interfaces to happen on the main thread but you're debugging
an assertion in a background thread, it might be desirable to set this to
\"break\" so that your debugger takes control as soon as assert is triggered,
instead of risking a bad UI interaction (deadlock, etc) in the application.
*

\\param condition boolean value to test.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_assert_paranoid"
 "An assertion test that is performed only when built with paranoid settings.

This macro is enabled when the SDL_ASSERT_LEVEL is >= 3, otherwise it is
disabled. This is a higher level than both release and debug, so these
tests are meant to be expensive and only run when specifically looking for
extremely unexpected failure cases in a special build.

When assertions are disabled, this wraps `condition` in a `sizeof`
operator, which means any function calls and side effects will not run, but
the compiler will not complain about any otherwise-unused variables that
are only referenced in the assertion.

One can set the environment variable \"SDL_ASSERT\" to one of several strings
(\"abort\", \"break\", \"retry\", \"ignore\", \"always_ignore\") to force a default
behavior, which may be desirable for automation purposes. If your platform
requires GUI interfaces to happen on the main thread but you're debugging
an assertion in a background thread, it might be desirable to set this to
\"break\" so that your debugger takes control as soon as assert is triggered,
instead of risking a bad UI interaction (deadlock, etc) in the application.

\\param condition boolean value to test.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_assert_always" "An assertion test that is always performed.

This macro is always enabled no matter what SDL_ASSERT_LEVEL is set to. You
almost never want to use this, as it could trigger on an end-user's system,
crashing your program.

One can set the environment variable \"SDL_ASSERT\" to one of several strings
(\"abort\", \"break\", \"retry\", \"ignore\", \"always_ignore\") to force a default
behavior, which may be desirable for automation purposes. If your platform
requires GUI interfaces to happen on the main thread but you're debugging
an assertion in a background thread, it might be desirable to set this to
\"break\" so that your debugger takes control as soon as assert is triggered,
instead of risking a bad UI interaction (deadlock, etc) in the application.

\\param condition boolean value to test.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SetAssertionHandler"
 "Set an application-defined assertion handler.

This function allows an application to show its own assertion UI and/or
force the response to an assertion failure. If the application doesn't
provide this, SDL will try to do the right thing, popping up a
system-specific GUI dialog, and probably minimizing any fullscreen windows.

This callback may fire from any thread, but it runs wrapped in a mutex, so
it will only fire from one thread at a time.

This callback is NOT reset to SDL's internal handler upon SDL_Quit()!

\\param handler the SDL_AssertionHandler function to call when an assertion
               fails or NULL for the default handler.
\\param userdata a pointer that is passed to `handler`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetAssertionHandler
")
(:FUNCTION "SDL_GetDefaultAssertionHandler" "Get the default assertion handler.

This returns the function pointer that is called by default when an
assertion is triggered. This is an internal function provided by SDL, that
is used for assertions when SDL_SetAssertionHandler() hasn't been used to
provide a different function.

\\returns the default SDL_AssertionHandler that is called when an assert
         triggers.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetAssertionHandler
")
(:FUNCTION "SDL_GetAssertionHandler" "Get the current assertion handler.

This returns the function pointer that is called when an assertion is
triggered. This is either the value last passed to
SDL_SetAssertionHandler(), or if no application-specified function is set,
is equivalent to calling SDL_GetDefaultAssertionHandler().

The parameter `puserdata` is a pointer to a void*, which will store the
\"userdata\" pointer that was passed to SDL_SetAssertionHandler(). This value
will always be NULL for the default handler. If you don't care about this
data, it is safe to pass a NULL pointer to this function to ignore it.

\\param puserdata pointer which is filled with the \"userdata\" pointer that
                 was passed to SDL_SetAssertionHandler().
\\returns the SDL_AssertionHandler that is called when an assert triggers.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetAssertionHandler
")
(:FUNCTION "SDL_GetAssertionReport" "Get a list of all assertion failures.

This function gets all assertions triggered since the last call to
SDL_ResetAssertionReport(), or the start of the program.

The proper way to examine this data looks something like this:

```c
const SDL_AssertData *item = SDL_GetAssertionReport();
while (item) {
   printf(\"'%s', %s (%s:%d), triggered %u times, always ignore: %s.\\\\n\",
          item->condition, item->function, item->filename,
          item->linenum, item->trigger_count,
          item->always_ignore ? \"yes\" : \"no\");
   item = item->next;
}
```

\\returns a list of all failed assertions or NULL if the list is empty. This
         memory should not be modified or freed by the application. This
         pointer remains valid until the next call to SDL_Quit() or
         SDL_ResetAssertionReport().

\\threadsafety This function is not thread safe. Other threads calling
              SDL_ResetAssertionReport() simultaneously, may render the
              returned pointer invalid.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ResetAssertionReport
")
(:FUNCTION "SDL_ResetAssertionReport" "Clear the list of all assertion failures.

This function will clear the list of all assertions triggered up to that
point. Immediately following this call, SDL_GetAssertionReport will return
no items. In addition, any previously-triggered assertions will be reset to
a trigger_count of zero, and their always_ignore state will be false.

\\threadsafety This function is not thread safe. Other threads triggering an
              assertion, or simultaneously calling this function may cause
              memory leaks or crashes.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetAssertionReport
")
(:STRUCT "SDL_AsyncIO" "The asynchronous I/O operation structure.

This operates as an opaque handle. One can then request read or write
operations on it.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_AsyncIOFromFile
")
(:ENUM "SDL_AsyncIOTaskType" "Types of asynchronous I/O tasks.

\\since This enum is available since SDL 3.2.0.
")
(:ENUM "SDL_AsyncIOResult" "Possible outcomes of an asynchronous I/O task.

\\since This enum is available since SDL 3.2.0.
")
(:STRUCT "SDL_AsyncIOOutcome"
 "Information about a completed asynchronous I/O request.

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_AsyncIOQueue" "A queue of completed asynchronous I/O tasks.

When starting an asynchronous operation, you specify a queue for the new
task. A queue can be asked later if any tasks in it have completed,
allowing an app to manage multiple pending tasks in one place, in whatever
order they complete.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_CreateAsyncIOQueue
\\sa SDL_ReadAsyncIO
\\sa SDL_WriteAsyncIO
\\sa SDL_GetAsyncIOResult
\\sa SDL_WaitAsyncIOResult
")
(:FUNCTION "SDL_AsyncIOFromFile"
 "Use this function to create a new SDL_AsyncIO object for reading from
and/or writing to a named file.

The `mode` string understands the following values:

- \"r\": Open a file for reading only. It must exist.
- \"w\": Open a file for writing only. It will create missing files or
  truncate existing ones.
- \"r+\": Open a file for update both reading and writing. The file must
  exist.
- \"w+\": Create an empty file for both reading and writing. If a file with
  the same name already exists its content is erased and the file is
  treated as a new empty file.

There is no \"b\" mode, as there is only \"binary\" style I/O, and no \"a\" mode
for appending, since you specify the position when starting a task.

This function supports Unicode filenames, but they must be encoded in UTF-8
format, regardless of the underlying operating system.

This call is _not_ asynchronous; it will open the file before returning,
under the assumption that doing so is generally a fast operation. Future
reads and writes to the opened file will be async, however.

\\param file a UTF-8 string representing the filename to open.
\\param mode an ASCII string representing the mode to be used for opening
            the file.
\\returns a pointer to the SDL_AsyncIO structure that is created or NULL on
         failure; call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CloseAsyncIO
\\sa SDL_ReadAsyncIO
\\sa SDL_WriteAsyncIO
")
(:FUNCTION "SDL_GetAsyncIOSize"
 "Use this function to get the size of the data stream in an SDL_AsyncIO.

This call is _not_ asynchronous; it assumes that obtaining this info is a
non-blocking operation in most reasonable cases.

\\param asyncio the SDL_AsyncIO to get the size of the data stream from.
\\returns the size of the data stream in the SDL_IOStream on success or a
         negative error code on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ReadAsyncIO" "Start an async read.

This function reads up to `size` bytes from `offset` position in the data
source to the area pointed at by `ptr`. This function may read less bytes
than requested.

This function returns as quickly as possible; it does not wait for the read
to complete. On a successful return, this work will continue in the
background. If the work begins, even failure is asynchronous: a failing
return value from this function only means the work couldn't start at all.

`ptr` must remain available until the work is done, and may be accessed by
the system at any time until then. Do not allocate it on the stack, as this
might take longer than the life of the calling function to complete!

An SDL_AsyncIOQueue must be specified. The newly-created task will be added
to it when it completes its work.

\\param asyncio a pointer to an SDL_AsyncIO structure.
\\param ptr a pointer to a buffer to read data into.
\\param offset the position to start reading in the data source.
\\param size the number of bytes to read from the data source.
\\param queue a queue to add the new SDL_AsyncIO to.
\\param userdata an app-defined pointer that will be provided with the task
                results.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_WriteAsyncIO
\\sa SDL_CreateAsyncIOQueue
")
(:FUNCTION "SDL_WriteAsyncIO" "Start an async write.

This function writes `size` bytes from `offset` position in the data source
to the area pointed at by `ptr`.

This function returns as quickly as possible; it does not wait for the
write to complete. On a successful return, this work will continue in the
background. If the work begins, even failure is asynchronous: a failing
return value from this function only means the work couldn't start at all.

`ptr` must remain available until the work is done, and may be accessed by
the system at any time until then. Do not allocate it on the stack, as this
might take longer than the life of the calling function to complete!

An SDL_AsyncIOQueue must be specified. The newly-created task will be added
to it when it completes its work.

\\param asyncio a pointer to an SDL_AsyncIO structure.
\\param ptr a pointer to a buffer to write data from.
\\param offset the position to start writing to the data source.
\\param size the number of bytes to write to the data source.
\\param queue a queue to add the new SDL_AsyncIO to.
\\param userdata an app-defined pointer that will be provided with the task
                results.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ReadAsyncIO
\\sa SDL_CreateAsyncIOQueue
")
(:FUNCTION "SDL_CloseAsyncIO"
 "Close and free any allocated resources for an async I/O object.

Closing a file is _also_ an asynchronous task! If a write failure were to
happen during the closing process, for example, the task results will
report it as usual.

Closing a file that has been written to does not guarantee the data has
made it to physical media; it may remain in the operating system's file
cache, for later writing to disk. This means that a successfully-closed
file can be lost if the system crashes or loses power in this small window.
To prevent this, call this function with the `flush` parameter set to true.
This will make the operation take longer, and perhaps increase system load
in general, but a successful result guarantees that the data has made it to
physical storage. Don't use this for temporary files, caches, and
unimportant data, and definitely use it for crucial irreplaceable files,
like game saves.

This function guarantees that the close will happen after any other pending
tasks to `asyncio`, so it's safe to open a file, start several operations,
close the file immediately, then check for all results later. This function
will not block until the tasks have completed.

Once this function returns true, `asyncio` is no longer valid, regardless
of any future outcomes. Any completed tasks might still contain this
pointer in their SDL_AsyncIOOutcome data, in case the app was using this
value to track information, but it should not be used again.

If this function returns false, the close wasn't started at all, and it's
safe to attempt to close again later.

An SDL_AsyncIOQueue must be specified. The newly-created task will be added
to it when it completes its work.

\\param asyncio a pointer to an SDL_AsyncIO structure to close.
\\param flush true if data should sync to disk before the task completes.
\\param queue a queue to add the new SDL_AsyncIO to.
\\param userdata an app-defined pointer that will be provided with the task
                results.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread, but two
              threads should not attempt to close the same object.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_CreateAsyncIOQueue"
 "Create a task queue for tracking multiple I/O operations.

Async I/O operations are assigned to a queue when started. The queue can be
checked for completed tasks thereafter.

\\returns a new task queue object or NULL if there was an error; call
         SDL_GetError() for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_DestroyAsyncIOQueue
\\sa SDL_GetAsyncIOResult
\\sa SDL_WaitAsyncIOResult
")
(:FUNCTION "SDL_DestroyAsyncIOQueue"
 "Destroy a previously-created async I/O task queue.

If there are still tasks pending for this queue, this call will block until
those tasks are finished. All those tasks will be deallocated. Their
results will be lost to the app.

Any pending reads from SDL_LoadFileAsync() that are still in this queue
will have their buffers deallocated by this function, to prevent a memory
leak.

Once this function is called, the queue is no longer valid and should not
be used, including by other threads that might access it while destruction
is blocking on pending tasks.

Do not destroy a queue that still has threads waiting on it through
SDL_WaitAsyncIOResult(). You can call SDL_SignalAsyncIOQueue() first to
unblock those threads, and take measures (such as SDL_WaitThread()) to make
sure they have finished their wait and won't wait on the queue again.

\\param queue the task queue to destroy.

\\threadsafety It is safe to call this function from any thread, so long as
              no other thread is waiting on the queue with
              SDL_WaitAsyncIOResult.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetAsyncIOResult"
 "Query an async I/O task queue for completed tasks.

If a task assigned to this queue has finished, this will return true and
fill in `outcome` with the details of the task. If no task in the queue has
finished, this function will return false. This function does not block.

If a task has completed, this function will free its resources and the task
pointer will no longer be valid. The task will be removed from the queue.

It is safe for multiple threads to call this function on the same queue at
once; a completed task will only go to one of the threads.

\\param queue the async I/O task queue to query.
\\param outcome details of a finished task will be written here. May not be
               NULL.
\\returns true if a task has completed, false otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_WaitAsyncIOResult
")
(:FUNCTION "SDL_WaitAsyncIOResult"
 "Block until an async I/O task queue has a completed task.

This function puts the calling thread to sleep until there a task assigned
to the queue that has finished.

If a task assigned to the queue has finished, this will return true and
fill in `outcome` with the details of the task. If no task in the queue has
finished, this function will return false.

If a task has completed, this function will free its resources and the task
pointer will no longer be valid. The task will be removed from the queue.

It is safe for multiple threads to call this function on the same queue at
once; a completed task will only go to one of the threads.

Note that by the nature of various platforms, more than one waiting thread
may wake to handle a single task, but only one will obtain it, so
`timeoutMS` is a _maximum_ wait time, and this function may return false
sooner.

This function may return false if there was a system error, the OS
inadvertently awoke multiple threads, or if SDL_SignalAsyncIOQueue() was
called to wake up all waiting threads without a finished task.

A timeout can be used to specify a maximum wait time, but rather than
polling, it is possible to have a timeout of -1 to wait forever, and use
SDL_SignalAsyncIOQueue() to wake up the waiting threads later.

\\param queue the async I/O task queue to wait on.
\\param outcome details of a finished task will be written here. May not be
               NULL.
\\param timeoutMS the maximum time to wait, in milliseconds, or -1 to wait
                 indefinitely.
\\returns true if task has completed, false otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SignalAsyncIOQueue
")
(:FUNCTION "SDL_SignalAsyncIOQueue"
 "Wake up any threads that are blocking in SDL_WaitAsyncIOResult().

This will unblock any threads that are sleeping in a call to
SDL_WaitAsyncIOResult for the specified queue, and cause them to return
from that function.

This can be useful when destroying a queue to make sure nothing is touching
it indefinitely. In this case, once this call completes, the caller should
take measures to make sure any previously-blocked threads have returned
from their wait and will not touch the queue again (perhaps by setting a
flag to tell the threads to terminate and then using SDL_WaitThread() to
make sure they've done so).

\\param queue the async I/O task queue to signal.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_WaitAsyncIOResult
")
(:FUNCTION "SDL_LoadFileAsync"
 "Load all the data from a file path, asynchronously.

This function returns as quickly as possible; it does not wait for the read
to complete. On a successful return, this work will continue in the
background. If the work begins, even failure is asynchronous: a failing
return value from this function only means the work couldn't start at all.

The data is allocated with a zero byte at the end (null terminated) for
convenience. This extra byte is not included in SDL_AsyncIOOutcome's
bytes_transferred value.

This function will allocate the buffer to contain the file. It must be
deallocated by calling SDL_free() on SDL_AsyncIOOutcome's buffer field
after completion.

An SDL_AsyncIOQueue must be specified. The newly-created task will be added
to it when it completes its work.

\\param file the path to read all available data from.
\\param queue a queue to add the new SDL_AsyncIO to.
\\param userdata an app-defined pointer that will be provided with the task
                results.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_LoadFile_IO
")
(:TYPEDEF "SDL_SpinLock" "An atomic spinlock.

The atomic locks are efficient spinlocks using CPU instructions, but are
vulnerable to starvation and can spin forever if a thread holding a lock
has been terminated. For this reason you should minimize the code executed
inside an atomic lock and never do expensive things like API or system
calls while holding them.

They are also vulnerable to starvation if the thread holding the lock is
lower priority than other threads and doesn't get scheduled. In general you
should use mutexes instead, since they have better performance and
contention behavior.

The atomic locks are not safe to lock recursively.

Porting Note: The spin lock functions and type are required and can not be
emulated because they are used in the atomic emulation code.
")
(:FUNCTION "SDL_TryLockSpinlock"
 "Try to lock a spin lock by setting it to a non-zero value.

***Please note that spinlocks are dangerous if you don't know what you're
doing. Please be careful using any sort of spinlock!***

\\param lock a pointer to a lock variable.
\\returns true if the lock succeeded, false if the lock is already held.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_LockSpinlock
\\sa SDL_UnlockSpinlock
")
(:FUNCTION "SDL_LockSpinlock"
 "Lock a spin lock by setting it to a non-zero value.

***Please note that spinlocks are dangerous if you don't know what you're
doing. Please be careful using any sort of spinlock!***

\\param lock a pointer to a lock variable.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_TryLockSpinlock
\\sa SDL_UnlockSpinlock
")
(:FUNCTION "SDL_UnlockSpinlock" "Unlock a spin lock by setting it to 0.

Always returns immediately.

***Please note that spinlocks are dangerous if you don't know what you're
doing. Please be careful using any sort of spinlock!***

\\param lock a pointer to a lock variable.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_LockSpinlock
\\sa SDL_TryLockSpinlock
")
(:FUNCTION "SDL_CompilerBarrier" "Mark a compiler barrier.

A compiler barrier prevents the compiler from reordering reads and writes
to globally visible variables across the call.

This macro only prevents the compiler from reordering reads and writes, it
does not prevent the CPU from reordering reads and writes. However, all of
the atomic operations that modify memory are full memory barriers.

\\threadsafety Obviously this macro is safe to use from any thread at any
              time, but if you find yourself needing this, you are probably
              dealing with some very sensitive code; be careful!

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_MemoryBarrierReleaseFunction"
 "Insert a memory release barrier (function version).

Please refer to SDL_MemoryBarrierRelease for details. This is a function
version, which might be useful if you need to use this functionality from a
scripting language, etc. Also, some of the macro versions call this
function behind the scenes, where more heavy lifting can happen inside of
SDL. Generally, though, an app written in C/C++/etc should use the macro
version, as it will be more efficient.

\\threadsafety Obviously this function is safe to use from any thread at any
              time, but if you find yourself needing this, you are probably
              dealing with some very sensitive code; be careful!

\\since This function is available since SDL 3.2.0.

\\sa SDL_MemoryBarrierRelease
")
(:FUNCTION "SDL_MemoryBarrierAcquireFunction"
 "Insert a memory acquire barrier (function version).

Please refer to SDL_MemoryBarrierRelease for details. This is a function
version, which might be useful if you need to use this functionality from a
scripting language, etc. Also, some of the macro versions call this
function behind the scenes, where more heavy lifting can happen inside of
SDL. Generally, though, an app written in C/C++/etc should use the macro
version, as it will be more efficient.

\\threadsafety Obviously this function is safe to use from any thread at any
              time, but if you find yourself needing this, you are probably
              dealing with some very sensitive code; be careful!

\\since This function is available since SDL 3.2.0.

\\sa SDL_MemoryBarrierAcquire
")
(:FUNCTION "SDL_MemoryBarrierRelease"
 "Insert a memory release barrier (macro version).

Memory barriers are designed to prevent reads and writes from being
reordered by the compiler and being seen out of order on multi-core CPUs.

A typical pattern would be for thread A to write some data and a flag, and
for thread B to read the flag and get the data. In this case you would
insert a release barrier between writing the data and the flag,
guaranteeing that the data write completes no later than the flag is
written, and you would insert an acquire barrier between reading the flag
and reading the data, to ensure that all the reads associated with the flag
have completed.

In this pattern you should always see a release barrier paired with an
acquire barrier and you should gate the data reads/writes with a single
flag variable.

For more information on these semantics, take a look at the blog post:
http://preshing.com/20120913/acquire-and-release-semantics

This is the macro version of this functionality; if possible, SDL will use
compiler intrinsics or inline assembly, but some platforms might need to
call the function version of this, SDL_MemoryBarrierReleaseFunction to do
the heavy lifting. Apps that can use the macro should favor it over the
function.

\\threadsafety Obviously this macro is safe to use from any thread at any
              time, but if you find yourself needing this, you are probably
              dealing with some very sensitive code; be careful!

\\since This macro is available since SDL 3.2.0.

\\sa SDL_MemoryBarrierAcquire
\\sa SDL_MemoryBarrierReleaseFunction
")
(:FUNCTION "SDL_MemoryBarrierAcquire"
 "Insert a memory acquire barrier (macro version).

Please see SDL_MemoryBarrierRelease for the details on what memory barriers
are and when to use them.

This is the macro version of this functionality; if possible, SDL will use
compiler intrinsics or inline assembly, but some platforms might need to
call the function version of this, SDL_MemoryBarrierAcquireFunction, to do
the heavy lifting. Apps that can use the macro should favor it over the
function.

\\threadsafety Obviously this macro is safe to use from any thread at any
              time, but if you find yourself needing this, you are probably
              dealing with some very sensitive code; be careful!

\\since This macro is available since SDL 3.2.0.

\\sa SDL_MemoryBarrierRelease
\\sa SDL_MemoryBarrierAcquireFunction
")
(:FUNCTION "SDL_CPUPauseInstruction"
 "A macro to insert a CPU-specific \"pause\" instruction into the program.

This can be useful in busy-wait loops, as it serves as a hint to the CPU as
to the program's intent; some CPUs can use this to do more efficient
processing. On some platforms, this doesn't do anything, so using this
macro might just be a harmless no-op.

Note that if you are busy-waiting, there are often more-efficient
approaches with other synchronization primitives: mutexes, semaphores,
condition variables, etc.

\\threadsafety This macro is safe to use from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:STRUCT "SDL_AtomicInt" "A type representing an atomic integer value.

This can be used to manage a value that is synchronized across multiple
CPUs without a race condition; when an app sets a value with
SDL_SetAtomicInt all other threads, regardless of the CPU it is running on,
will see that value when retrieved with SDL_GetAtomicInt, regardless of CPU
caches, etc.

This is also useful for atomic compare-and-swap operations: a thread can
change the value as long as its current value matches expectations. When
done in a loop, one can guarantee data consistency across threads without a
lock (but the usual warnings apply: if you don't know what you're doing, or
you don't do it carefully, you can confidently cause any number of
disasters with this, so in most cases, you _should_ use a mutex instead of
this!).

This is a struct so people don't accidentally use numeric operations on it
directly. You have to use SDL atomic functions.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_CompareAndSwapAtomicInt
\\sa SDL_GetAtomicInt
\\sa SDL_SetAtomicInt
\\sa SDL_AddAtomicInt
")
(:FUNCTION "SDL_CompareAndSwapAtomicInt"
 "Set an atomic variable to a new value if it is currently an old value.

***Note: If you don't know what this function is for, you shouldn't use
it!***

\\param a a pointer to an SDL_AtomicInt variable to be modified.
\\param oldval the old value.
\\param newval the new value.
\\returns true if the atomic variable was set, false otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetAtomicInt
\\sa SDL_SetAtomicInt
")
(:FUNCTION "SDL_SetAtomicInt" "Set an atomic variable to a value.

This function also acts as a full memory barrier.

***Note: If you don't know what this function is for, you shouldn't use
it!***

\\param a a pointer to an SDL_AtomicInt variable to be modified.
\\param v the desired value.
\\returns the previous value of the atomic variable.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetAtomicInt
")
(:FUNCTION "SDL_GetAtomicInt" "Get the value of an atomic variable.

***Note: If you don't know what this function is for, you shouldn't use
it!***

\\param a a pointer to an SDL_AtomicInt variable.
\\returns the current value of an atomic variable.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetAtomicInt
")
(:FUNCTION "SDL_AddAtomicInt" "Add to an atomic variable.

This function also acts as a full memory barrier.

***Note: If you don't know what this function is for, you shouldn't use
it!***

\\param a a pointer to an SDL_AtomicInt variable to be modified.
\\param v the desired value to add.
\\returns the previous value of the atomic variable.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_AtomicDecRef
\\sa SDL_AtomicIncRef
")
(:FUNCTION "SDL_AtomicIncRef"
 "Increment an atomic variable used as a reference count.

***Note: If you don't know what this macro is for, you shouldn't use it!***

\\param a a pointer to an SDL_AtomicInt to increment.
\\returns the previous value of the atomic variable.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.

\\sa SDL_AtomicDecRef
")
(:FUNCTION "SDL_AtomicDecRef"
 "Decrement an atomic variable used as a reference count.

***Note: If you don't know what this macro is for, you shouldn't use it!***

\\param a a pointer to an SDL_AtomicInt to decrement.
\\returns true if the variable reached zero after decrementing, false
         otherwise.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.

\\sa SDL_AtomicIncRef
")
(:STRUCT "SDL_AtomicU32" "A type representing an atomic unsigned 32-bit value.

This can be used to manage a value that is synchronized across multiple
CPUs without a race condition; when an app sets a value with
SDL_SetAtomicU32 all other threads, regardless of the CPU it is running on,
will see that value when retrieved with SDL_GetAtomicU32, regardless of CPU
caches, etc.

This is also useful for atomic compare-and-swap operations: a thread can
change the value as long as its current value matches expectations. When
done in a loop, one can guarantee data consistency across threads without a
lock (but the usual warnings apply: if you don't know what you're doing, or
you don't do it carefully, you can confidently cause any number of
disasters with this, so in most cases, you _should_ use a mutex instead of
this!).

This is a struct so people don't accidentally use numeric operations on it
directly. You have to use SDL atomic functions.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_CompareAndSwapAtomicU32
\\sa SDL_GetAtomicU32
\\sa SDL_SetAtomicU32
")
(:FUNCTION "SDL_CompareAndSwapAtomicU32"
 "Set an atomic variable to a new value if it is currently an old value.

***Note: If you don't know what this function is for, you shouldn't use
it!***

\\param a a pointer to an SDL_AtomicU32 variable to be modified.
\\param oldval the old value.
\\param newval the new value.
\\returns true if the atomic variable was set, false otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetAtomicU32
\\sa SDL_SetAtomicU32
")
(:FUNCTION "SDL_SetAtomicU32" "Set an atomic variable to a value.

This function also acts as a full memory barrier.

***Note: If you don't know what this function is for, you shouldn't use
it!***

\\param a a pointer to an SDL_AtomicU32 variable to be modified.
\\param v the desired value.
\\returns the previous value of the atomic variable.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetAtomicU32
")
(:FUNCTION "SDL_GetAtomicU32" "Get the value of an atomic variable.

***Note: If you don't know what this function is for, you shouldn't use
it!***

\\param a a pointer to an SDL_AtomicU32 variable.
\\returns the current value of an atomic variable.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetAtomicU32
")
(:FUNCTION "SDL_CompareAndSwapAtomicPointer"
 "Set a pointer to a new value if it is currently an old value.

***Note: If you don't know what this function is for, you shouldn't use
it!***

\\param a a pointer to a pointer.
\\param oldval the old pointer value.
\\param newval the new pointer value.
\\returns true if the pointer was set, false otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CompareAndSwapAtomicInt
\\sa SDL_GetAtomicPointer
\\sa SDL_SetAtomicPointer
")
(:FUNCTION "SDL_SetAtomicPointer" "Set a pointer to a value atomically.

***Note: If you don't know what this function is for, you shouldn't use
it!***

\\param a a pointer to a pointer.
\\param v the desired pointer value.
\\returns the previous value of the pointer.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CompareAndSwapAtomicPointer
\\sa SDL_GetAtomicPointer
")
(:FUNCTION "SDL_GetAtomicPointer" "Get the value of a pointer atomically.

***Note: If you don't know what this function is for, you shouldn't use
it!***

\\param a a pointer to a pointer.
\\returns the current value of a pointer.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CompareAndSwapAtomicPointer
\\sa SDL_SetAtomicPointer
")
(:FUNCTION "SDL_DEFINE_AUDIO_FORMAT" "Define an SDL_AudioFormat value.

SDL does not support custom audio formats, so this macro is not of much use
externally, but it can be illustrative as to what the various bits of an
SDL_AudioFormat mean.

For example, SDL_AUDIO_S32LE looks like this:

```c
SDL_DEFINE_AUDIO_FORMAT(1, 0, 0, 32)
```

\\param signed 1 for signed data, 0 for unsigned data.
\\param bigendian 1 for bigendian data, 0 for littleendian data.
\\param flt 1 for floating point data, 0 for integer data.
\\param size number of bits per sample.
\\returns a format value in the style of SDL_AudioFormat.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:ENUM "SDL_AudioFormat" "Audio format.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_AUDIO_BITSIZE
\\sa SDL_AUDIO_BYTESIZE
\\sa SDL_AUDIO_ISINT
\\sa SDL_AUDIO_ISFLOAT
\\sa SDL_AUDIO_ISBIGENDIAN
\\sa SDL_AUDIO_ISLITTLEENDIAN
\\sa SDL_AUDIO_ISSIGNED
\\sa SDL_AUDIO_ISUNSIGNED
")
(:FUNCTION "SDL_AUDIO_BITSIZE"
 "Retrieve the size, in bits, from an SDL_AudioFormat.

For example, `SDL_AUDIO_BITSIZE(SDL_AUDIO_S16)` returns 16.

\\param x an SDL_AudioFormat value.
\\returns data size in bits.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_AUDIO_BYTESIZE"
 "Retrieve the size, in bytes, from an SDL_AudioFormat.

For example, `SDL_AUDIO_BYTESIZE(SDL_AUDIO_S16)` returns 2.

\\param x an SDL_AudioFormat value.
\\returns data size in bytes.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_AUDIO_ISFLOAT"
 "Determine if an SDL_AudioFormat represents floating point data.

For example, `SDL_AUDIO_ISFLOAT(SDL_AUDIO_S16)` returns 0.

\\param x an SDL_AudioFormat value.
\\returns non-zero if format is floating point, zero otherwise.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_AUDIO_ISBIGENDIAN"
 "Determine if an SDL_AudioFormat represents bigendian data.

For example, `SDL_AUDIO_ISBIGENDIAN(SDL_AUDIO_S16LE)` returns 0.

\\param x an SDL_AudioFormat value.
\\returns non-zero if format is bigendian, zero otherwise.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_AUDIO_ISLITTLEENDIAN"
 "Determine if an SDL_AudioFormat represents littleendian data.

For example, `SDL_AUDIO_ISLITTLEENDIAN(SDL_AUDIO_S16BE)` returns 0.

\\param x an SDL_AudioFormat value.
\\returns non-zero if format is littleendian, zero otherwise.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_AUDIO_ISSIGNED"
 "Determine if an SDL_AudioFormat represents signed data.

For example, `SDL_AUDIO_ISSIGNED(SDL_AUDIO_U8)` returns 0.

\\param x an SDL_AudioFormat value.
\\returns non-zero if format is signed, zero otherwise.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_AUDIO_ISINT"
 "Determine if an SDL_AudioFormat represents integer data.

For example, `SDL_AUDIO_ISINT(SDL_AUDIO_F32)` returns 0.

\\param x an SDL_AudioFormat value.
\\returns non-zero if format is integer, zero otherwise.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_AUDIO_ISUNSIGNED"
 "Determine if an SDL_AudioFormat represents unsigned data.

For example, `SDL_AUDIO_ISUNSIGNED(SDL_AUDIO_S16)` returns 0.

\\param x an SDL_AudioFormat value.
\\returns non-zero if format is unsigned, zero otherwise.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:BITFIELD "SDL_AudioDeviceID" "SDL Audio Device instance IDs.

Zero is used to signify an invalid/null device.

\\since This datatype is available since SDL 3.2.0.
")
(:STRUCT "SDL_AudioSpec" "Format specifier for audio data.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_AudioFormat
")
(:FUNCTION "SDL_AUDIO_FRAMESIZE"
 "Calculate the size of each audio frame (in bytes) from an SDL_AudioSpec.

This reports on the size of an audio sample frame: stereo Sint16 data (2
channels of 2 bytes each) would be 4 bytes per frame, for example.

\\param x an SDL_AudioSpec to query.
\\returns the number of bytes used per sample frame.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:STRUCT "SDL_AudioStream" "The opaque handle that represents an audio stream.

SDL_AudioStream is an audio conversion interface.

- It can handle resampling data in chunks without generating artifacts,
  when it doesn't have the complete buffer available.
- It can handle incoming data in any variable size.
- It can handle input/output format changes on the fly.
- It can remap audio channels between inputs and outputs.
- You push data as you have it, and pull it when you need it
- It can also function as a basic audio data queue even if you just have
  sound that needs to pass from one place to another.
- You can hook callbacks up to them when more data is added or requested,
  to manage data on-the-fly.

Audio streams are the core of the SDL3 audio interface. You create one or
more of them, bind them to an opened audio device, and feed data to them
(or for recording, consume data from them).

\\since This struct is available since SDL 3.2.0.

\\sa SDL_CreateAudioStream
")
(:FUNCTION "SDL_GetNumAudioDrivers"
 "Use this function to get the number of built-in audio drivers.

This function returns a hardcoded number. This never returns a negative
value; if there are no drivers compiled into this build of SDL, this
function returns zero. The presence of a driver in this list does not mean
it will function, it just means SDL is capable of interacting with that
interface. For example, a build of SDL might have esound support, but if
there's no esound server available, SDL's esound driver would fail if used.

By default, SDL tries all drivers, in its preferred order, until one is
found to be usable.

\\returns the number of built-in audio drivers.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetAudioDriver
")
(:FUNCTION "SDL_GetAudioDriver"
 "Use this function to get the name of a built in audio driver.

The list of audio drivers is given in the order that they are normally
initialized by default; the drivers that seem more reasonable to choose
first (as far as the SDL developers believe) are earlier in the list.

The names of drivers are all simple, low-ASCII identifiers, like \"alsa\",
\"coreaudio\" or \"wasapi\". These never have Unicode characters, and are not
meant to be proper names.

\\param index the index of the audio driver; the value ranges from 0 to
             SDL_GetNumAudioDrivers() - 1.
\\returns the name of the audio driver at the requested index, or NULL if an
         invalid index was specified.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetNumAudioDrivers
")
(:FUNCTION "SDL_GetCurrentAudioDriver"
 "Get the name of the current audio driver.

The names of drivers are all simple, low-ASCII identifiers, like \"alsa\",
\"coreaudio\" or \"wasapi\". These never have Unicode characters, and are not
meant to be proper names.

\\returns the name of the current audio driver or NULL if no driver has been
         initialized.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetAudioPlaybackDevices"
 "Get a list of currently-connected audio playback devices.

This returns of list of available devices that play sound, perhaps to
speakers or headphones (\"playback\" devices). If you want devices that
record audio, like a microphone (\"recording\" devices), use
SDL_GetAudioRecordingDevices() instead.

This only returns a list of physical devices; it will not have any device
IDs returned by SDL_OpenAudioDevice().

If this function returns NULL, to signify an error, `*count` will be set to
zero.

\\param count a pointer filled in with the number of devices returned, may
             be NULL.
\\returns a 0 terminated array of device instance IDs or NULL on error; call
         SDL_GetError() for more information. This should be freed with
         SDL_free() when it is no longer needed.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_OpenAudioDevice
\\sa SDL_GetAudioRecordingDevices
")
(:FUNCTION "SDL_GetAudioRecordingDevices"
 "Get a list of currently-connected audio recording devices.

This returns of list of available devices that record audio, like a
microphone (\"recording\" devices). If you want devices that play sound,
perhaps to speakers or headphones (\"playback\" devices), use
SDL_GetAudioPlaybackDevices() instead.

This only returns a list of physical devices; it will not have any device
IDs returned by SDL_OpenAudioDevice().

If this function returns NULL, to signify an error, `*count` will be set to
zero.

\\param count a pointer filled in with the number of devices returned, may
             be NULL.
\\returns a 0 terminated array of device instance IDs, or NULL on failure;
         call SDL_GetError() for more information. This should be freed
         with SDL_free() when it is no longer needed.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_OpenAudioDevice
\\sa SDL_GetAudioPlaybackDevices
")
(:FUNCTION "SDL_GetAudioDeviceName"
 "Get the human-readable name of a specific audio device.

\\param devid the instance ID of the device to query.
\\returns the name of the audio device, or NULL on failure; call
         SDL_GetError() for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetAudioPlaybackDevices
\\sa SDL_GetAudioRecordingDevices
")
(:FUNCTION "SDL_GetAudioDeviceFormat"
 "Get the current audio format of a specific audio device.

For an opened device, this will report the format the device is currently
using. If the device isn't yet opened, this will report the device's
preferred format (or a reasonable default if this can't be determined).

You may also specify SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK or
SDL_AUDIO_DEVICE_DEFAULT_RECORDING here, which is useful for getting a
reasonable recommendation before opening the system-recommended default
device.

You can also use this to request the current device buffer size. This is
specified in sample frames and represents the amount of data SDL will feed
to the physical hardware in each chunk. This can be converted to
milliseconds of audio with the following equation:

`ms = (int) ((((Sint64) frames) * 1000) / spec.freq);`

Buffer size is only important if you need low-level control over the audio
playback timing. Most apps do not need this.

\\param devid the instance ID of the device to query.
\\param spec on return, will be filled with device details.
\\param sample_frames pointer to store device buffer size, in sample frames.
                     Can be NULL.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetAudioDeviceChannelMap"
 "Get the current channel map of an audio device.

Channel maps are optional; most things do not need them, instead passing
data in the [order that SDL expects](CategoryAudio#channel-layouts).

Audio devices usually have no remapping applied. This is represented by
returning NULL, and does not signify an error.

\\param devid the instance ID of the device to query.
\\param count On output, set to number of channels in the map. Can be NULL.
\\returns an array of the current channel mapping, with as many elements as
         the current output spec's channels, or NULL if default. This
         should be freed with SDL_free() when it is no longer needed.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetAudioStreamInputChannelMap
")
(:FUNCTION "SDL_OpenAudioDevice" "Open a specific audio device.

You can open both playback and recording devices through this function.
Playback devices will take data from bound audio streams, mix it, and send
it to the hardware. Recording devices will feed any bound audio streams
with a copy of any incoming data.

An opened audio device starts out with no audio streams bound. To start
audio playing, bind a stream and supply audio data to it. Unlike SDL2,
there is no audio callback; you only bind audio streams and make sure they
have data flowing into them (however, you can simulate SDL2's semantics
fairly closely by using SDL_OpenAudioDeviceStream instead of this
function).

If you don't care about opening a specific device, pass a `devid` of either
`SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK` or
`SDL_AUDIO_DEVICE_DEFAULT_RECORDING`. In this case, SDL will try to pick
the most reasonable default, and may also switch between physical devices
seamlessly later, if the most reasonable default changes during the
lifetime of this opened device (user changed the default in the OS's system
preferences, the default got unplugged so the system jumped to a new
default, the user plugged in headphones on a mobile device, etc). Unless
you have a good reason to choose a specific device, this is probably what
you want.

You may request a specific format for the audio device, but there is no
promise the device will honor that request for several reasons. As such,
it's only meant to be a hint as to what data your app will provide. Audio
streams will accept data in whatever format you specify and manage
conversion for you as appropriate. SDL_GetAudioDeviceFormat can tell you
the preferred format for the device before opening and the actual format
the device is using after opening.

It's legal to open the same device ID more than once; each successful open
will generate a new logical SDL_AudioDeviceID that is managed separately
from others on the same physical device. This allows libraries to open a
device separately from the main app and bind its own streams without
conflicting.

It is also legal to open a device ID returned by a previous call to this
function; doing so just creates another logical device on the same physical
device. This may be useful for making logical groupings of audio streams.

This function returns the opened device ID on success. This is a new,
unique SDL_AudioDeviceID that represents a logical device.

Some backends might offer arbitrary devices (for example, a networked audio
protocol that can connect to an arbitrary server). For these, as a change
from SDL2, you should open a default device ID and use an SDL hint to
specify the target if you care, or otherwise let the backend figure out a
reasonable default. Most backends don't offer anything like this, and often
this would be an end user setting an environment variable for their custom
need, and not something an application should specifically manage.

When done with an audio device, possibly at the end of the app's life, one
should call SDL_CloseAudioDevice() on the returned device id.

\\param devid the device instance id to open, or
             SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK or
             SDL_AUDIO_DEVICE_DEFAULT_RECORDING for the most reasonable
             default device.
\\param spec the requested device configuration. Can be NULL to use
            reasonable defaults.
\\returns the device ID on success or 0 on failure; call SDL_GetError() for
         more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CloseAudioDevice
\\sa SDL_GetAudioDeviceFormat
")
(:FUNCTION "SDL_IsAudioDevicePhysical"
 "Determine if an audio device is physical (instead of logical).

An SDL_AudioDeviceID that represents physical hardware is a physical
device; there is one for each piece of hardware that SDL can see. Logical
devices are created by calling SDL_OpenAudioDevice or
SDL_OpenAudioDeviceStream, and while each is associated with a physical
device, there can be any number of logical devices on one physical device.

For the most part, logical and physical IDs are interchangeable--if you try
to open a logical device, SDL understands to assign that effort to the
underlying physical device, etc. However, it might be useful to know if an
arbitrary device ID is physical or logical. This function reports which.

This function may return either true or false for invalid device IDs.

\\param devid the device ID to query.
\\returns true if devid is a physical device, false if it is logical.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_IsAudioDevicePlayback"
 "Determine if an audio device is a playback device (instead of recording).

This function may return either true or false for invalid device IDs.

\\param devid the device ID to query.
\\returns true if devid is a playback device, false if it is recording.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_PauseAudioDevice"
 "Use this function to pause audio playback on a specified device.

This function pauses audio processing for a given device. Any bound audio
streams will not progress, and no audio will be generated. Pausing one
device does not prevent other unpaused devices from running.

Unlike in SDL2, audio devices start in an _unpaused_ state, since an app
has to bind a stream before any audio will flow. Pausing a paused device is
a legal no-op.

Pausing a device can be useful to halt all audio without unbinding all the
audio streams. This might be useful while a game is paused, or a level is
loading, etc.

Physical devices can not be paused or unpaused, only logical devices
created through SDL_OpenAudioDevice() can be.

\\param devid a device opened by SDL_OpenAudioDevice().
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ResumeAudioDevice
\\sa SDL_AudioDevicePaused
")
(:FUNCTION "SDL_ResumeAudioDevice"
 "Use this function to unpause audio playback on a specified device.

This function unpauses audio processing for a given device that has
previously been paused with SDL_PauseAudioDevice(). Once unpaused, any
bound audio streams will begin to progress again, and audio can be
generated.

Unlike in SDL2, audio devices start in an _unpaused_ state, since an app
has to bind a stream before any audio will flow. Unpausing an unpaused
device is a legal no-op.

Physical devices can not be paused or unpaused, only logical devices
created through SDL_OpenAudioDevice() can be.

\\param devid a device opened by SDL_OpenAudioDevice().
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_AudioDevicePaused
\\sa SDL_PauseAudioDevice
")
(:FUNCTION "SDL_AudioDevicePaused"
 "Use this function to query if an audio device is paused.

Unlike in SDL2, audio devices start in an _unpaused_ state, since an app
has to bind a stream before any audio will flow.

Physical devices can not be paused or unpaused, only logical devices
created through SDL_OpenAudioDevice() can be. Physical and invalid device
IDs will report themselves as unpaused here.

\\param devid a device opened by SDL_OpenAudioDevice().
\\returns true if device is valid and paused, false otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_PauseAudioDevice
\\sa SDL_ResumeAudioDevice
")
(:FUNCTION "SDL_GetAudioDeviceGain" "Get the gain of an audio device.

The gain of a device is its volume; a larger gain means a louder output,
with a gain of zero being silence.

Audio devices default to a gain of 1.0f (no change in output).

Physical devices may not have their gain changed, only logical devices, and
this function will always return -1.0f when used on physical devices.

\\param devid the audio device to query.
\\returns the gain of the device or -1.0f on failure; call SDL_GetError()
         for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetAudioDeviceGain
")
(:FUNCTION "SDL_SetAudioDeviceGain" "Change the gain of an audio device.

The gain of a device is its volume; a larger gain means a louder output,
with a gain of zero being silence.

Audio devices default to a gain of 1.0f (no change in output).

Physical devices may not have their gain changed, only logical devices, and
this function will always return false when used on physical devices. While
it might seem attractive to adjust several logical devices at once in this
way, it would allow an app or library to interfere with another portion of
the program's otherwise-isolated devices.

This is applied, along with any per-audiostream gain, during playback to
the hardware, and can be continuously changed to create various effects. On
recording devices, this will adjust the gain before passing the data into
an audiostream; that recording audiostream can then adjust its gain further
when outputting the data elsewhere, if it likes, but that second gain is
not applied until the data leaves the audiostream again.

\\param devid the audio device on which to change gain.
\\param gain the gain. 1.0f is no change, 0.0f is silence.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread, as it holds
              a stream-specific mutex while running.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetAudioDeviceGain
")
(:FUNCTION "SDL_CloseAudioDevice" "Close a previously-opened audio device.

The application should close open audio devices once they are no longer
needed.

This function may block briefly while pending audio data is played by the
hardware, so that applications don't drop the last buffer of data they
supplied if terminating immediately afterwards.

\\param devid an audio device id previously returned by
             SDL_OpenAudioDevice().

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_OpenAudioDevice
")
(:FUNCTION "SDL_BindAudioStreams"
 "Bind a list of audio streams to an audio device.

Audio data will flow through any bound streams. For a playback device, data
for all bound streams will be mixed together and fed to the device. For a
recording device, a copy of recorded data will be provided to each bound
stream.

Audio streams can only be bound to an open device. This operation is
atomic--all streams bound in the same call will start processing at the
same time, so they can stay in sync. Also: either all streams will be bound
or none of them will be.

It is an error to bind an already-bound stream; it must be explicitly
unbound first.

Binding a stream to a device will set its output format for playback
devices, and its input format for recording devices, so they match the
device's settings. The caller is welcome to change the other end of the
stream's format at any time with SDL_SetAudioStreamFormat().

\\param devid an audio device to bind a stream to.
\\param streams an array of audio streams to bind.
\\param num_streams number streams listed in the `streams` array.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_BindAudioStreams
\\sa SDL_UnbindAudioStream
\\sa SDL_GetAudioStreamDevice
")
(:FUNCTION "SDL_BindAudioStream" "Bind a single audio stream to an audio device.

This is a convenience function, equivalent to calling
`SDL_BindAudioStreams(devid, &stream, 1)`.

\\param devid an audio device to bind a stream to.
\\param stream an audio stream to bind to a device.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_BindAudioStreams
\\sa SDL_UnbindAudioStream
\\sa SDL_GetAudioStreamDevice
")
(:FUNCTION "SDL_UnbindAudioStreams"
 "Unbind a list of audio streams from their audio devices.

The streams being unbound do not all have to be on the same device. All
streams on the same device will be unbound atomically (data will stop
flowing through all unbound streams on the same device at the same time).

Unbinding a stream that isn't bound to a device is a legal no-op.

\\param streams an array of audio streams to unbind. Can be NULL or contain
               NULL.
\\param num_streams number streams listed in the `streams` array.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_BindAudioStreams
")
(:FUNCTION "SDL_UnbindAudioStream"
 "Unbind a single audio stream from its audio device.

This is a convenience function, equivalent to calling
`SDL_UnbindAudioStreams(&stream, 1)`.

\\param stream an audio stream to unbind from a device. Can be NULL.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_BindAudioStream
")
(:FUNCTION "SDL_GetAudioStreamDevice"
 "Query an audio stream for its currently-bound device.

This reports the audio device that an audio stream is currently bound to.

If not bound, or invalid, this returns zero, which is not a valid device
ID.

\\param stream the audio stream to query.
\\returns the bound audio device, or 0 if not bound or invalid.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_BindAudioStream
\\sa SDL_BindAudioStreams
")
(:FUNCTION "SDL_CreateAudioStream" "Create a new audio stream.

\\param src_spec the format details of the input audio.
\\param dst_spec the format details of the output audio.
\\returns a new audio stream on success or NULL on failure; call
         SDL_GetError() for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_PutAudioStreamData
\\sa SDL_GetAudioStreamData
\\sa SDL_GetAudioStreamAvailable
\\sa SDL_FlushAudioStream
\\sa SDL_ClearAudioStream
\\sa SDL_SetAudioStreamFormat
\\sa SDL_DestroyAudioStream
")
(:FUNCTION "SDL_GetAudioStreamProperties"
 "Get the properties associated with an audio stream.

\\param stream the SDL_AudioStream to query.
\\returns a valid property ID on success or 0 on failure; call
         SDL_GetError() for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetAudioStreamFormat"
 "Query the current format of an audio stream.

\\param stream the SDL_AudioStream to query.
\\param src_spec where to store the input audio format; ignored if NULL.
\\param dst_spec where to store the output audio format; ignored if NULL.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread, as it holds
              a stream-specific mutex while running.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetAudioStreamFormat
")
(:FUNCTION "SDL_SetAudioStreamFormat"
 "Change the input and output formats of an audio stream.

Future calls to and SDL_GetAudioStreamAvailable and SDL_GetAudioStreamData
will reflect the new format, and future calls to SDL_PutAudioStreamData
must provide data in the new input formats.

Data that was previously queued in the stream will still be operated on in
the format that was current when it was added, which is to say you can put
the end of a sound file in one format to a stream, change formats for the
next sound file, and start putting that new data while the previous sound
file is still queued, and everything will still play back correctly.

If a stream is bound to a device, then the format of the side of the stream
bound to a device cannot be changed (src_spec for recording devices,
dst_spec for playback devices). Attempts to make a change to this side will
be ignored, but this will not report an error. The other side's format can
be changed.

\\param stream the stream the format is being changed.
\\param src_spec the new format of the audio input; if NULL, it is not
                changed.
\\param dst_spec the new format of the audio output; if NULL, it is not
                changed.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread, as it holds
              a stream-specific mutex while running.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetAudioStreamFormat
\\sa SDL_SetAudioStreamFrequencyRatio
")
(:FUNCTION "SDL_GetAudioStreamFrequencyRatio"
 "Get the frequency ratio of an audio stream.

\\param stream the SDL_AudioStream to query.
\\returns the frequency ratio of the stream or 0.0 on failure; call
         SDL_GetError() for more information.

\\threadsafety It is safe to call this function from any thread, as it holds
              a stream-specific mutex while running.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetAudioStreamFrequencyRatio
")
(:FUNCTION "SDL_SetAudioStreamFrequencyRatio"
 "Change the frequency ratio of an audio stream.

The frequency ratio is used to adjust the rate at which input data is
consumed. Changing this effectively modifies the speed and pitch of the
audio. A value greater than 1.0 will play the audio faster, and at a higher
pitch. A value less than 1.0 will play the audio slower, and at a lower
pitch.

This is applied during SDL_GetAudioStreamData, and can be continuously
changed to create various effects.

\\param stream the stream the frequency ratio is being changed.
\\param ratio the frequency ratio. 1.0 is normal speed. Must be between 0.01
             and 100.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread, as it holds
              a stream-specific mutex while running.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetAudioStreamFrequencyRatio
\\sa SDL_SetAudioStreamFormat
")
(:FUNCTION "SDL_GetAudioStreamGain" "Get the gain of an audio stream.

The gain of a stream is its volume; a larger gain means a louder output,
with a gain of zero being silence.

Audio streams default to a gain of 1.0f (no change in output).

\\param stream the SDL_AudioStream to query.
\\returns the gain of the stream or -1.0f on failure; call SDL_GetError()
         for more information.

\\threadsafety It is safe to call this function from any thread, as it holds
              a stream-specific mutex while running.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetAudioStreamGain
")
(:FUNCTION "SDL_SetAudioStreamGain" "Change the gain of an audio stream.

The gain of a stream is its volume; a larger gain means a louder output,
with a gain of zero being silence.

Audio streams default to a gain of 1.0f (no change in output).

This is applied during SDL_GetAudioStreamData, and can be continuously
changed to create various effects.

\\param stream the stream on which the gain is being changed.
\\param gain the gain. 1.0f is no change, 0.0f is silence.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread, as it holds
              a stream-specific mutex while running.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetAudioStreamGain
")
(:FUNCTION "SDL_GetAudioStreamInputChannelMap"
 "Get the current input channel map of an audio stream.

Channel maps are optional; most things do not need them, instead passing
data in the [order that SDL expects](CategoryAudio#channel-layouts).

Audio streams default to no remapping applied. This is represented by
returning NULL, and does not signify an error.

\\param stream the SDL_AudioStream to query.
\\param count On output, set to number of channels in the map. Can be NULL.
\\returns an array of the current channel mapping, with as many elements as
         the current output spec's channels, or NULL if default. This
         should be freed with SDL_free() when it is no longer needed.

\\threadsafety It is safe to call this function from any thread, as it holds
              a stream-specific mutex while running.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetAudioStreamInputChannelMap
")
(:FUNCTION "SDL_GetAudioStreamOutputChannelMap"
 "Get the current output channel map of an audio stream.

Channel maps are optional; most things do not need them, instead passing
data in the [order that SDL expects](CategoryAudio#channel-layouts).

Audio streams default to no remapping applied. This is represented by
returning NULL, and does not signify an error.

\\param stream the SDL_AudioStream to query.
\\param count On output, set to number of channels in the map. Can be NULL.
\\returns an array of the current channel mapping, with as many elements as
         the current output spec's channels, or NULL if default. This
         should be freed with SDL_free() when it is no longer needed.

\\threadsafety It is safe to call this function from any thread, as it holds
              a stream-specific mutex while running.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetAudioStreamInputChannelMap
")
(:FUNCTION "SDL_SetAudioStreamInputChannelMap"
 "Set the current input channel map of an audio stream.

Channel maps are optional; most things do not need them, instead passing
data in the [order that SDL expects](CategoryAudio#channel-layouts).

The input channel map reorders data that is added to a stream via
SDL_PutAudioStreamData. Future calls to SDL_PutAudioStreamData must provide
data in the new channel order.

Each item in the array represents an input channel, and its value is the
channel that it should be remapped to. To reverse a stereo signal's left
and right values, you'd have an array of `{ 1, 0 }`. It is legal to remap
multiple channels to the same thing, so `{ 1, 1 }` would duplicate the
right channel to both channels of a stereo signal. An element in the
channel map set to -1 instead of a valid channel will mute that channel,
setting it to a silence value.

You cannot change the number of channels through a channel map, just
reorder/mute them.

Data that was previously queued in the stream will still be operated on in
the order that was current when it was added, which is to say you can put
the end of a sound file in one order to a stream, change orders for the
next sound file, and start putting that new data while the previous sound
file is still queued, and everything will still play back correctly.

Audio streams default to no remapping applied. Passing a NULL channel map
is legal, and turns off remapping.

SDL will copy the channel map; the caller does not have to save this array
after this call.

If `count` is not equal to the current number of channels in the audio
stream's format, this will fail. This is a safety measure to make sure a
race condition hasn't changed the format while this call is setting the
channel map.

Unlike attempting to change the stream's format, the input channel map on a
stream bound to a recording device is permitted to change at any time; any
data added to the stream from the device after this call will have the new
mapping, but previously-added data will still have the prior mapping.

\\param stream the SDL_AudioStream to change.
\\param chmap the new channel map, NULL to reset to default.
\\param count The number of channels in the map.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread, as it holds
              a stream-specific mutex while running. Don't change the
              stream's format to have a different number of channels from a
              a different thread at the same time, though!

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetAudioStreamInputChannelMap
")
(:FUNCTION "SDL_SetAudioStreamOutputChannelMap"
 "Set the current output channel map of an audio stream.

Channel maps are optional; most things do not need them, instead passing
data in the [order that SDL expects](CategoryAudio#channel-layouts).

The output channel map reorders data that leaving a stream via
SDL_GetAudioStreamData.

Each item in the array represents an input channel, and its value is the
channel that it should be remapped to. To reverse a stereo signal's left
and right values, you'd have an array of `{ 1, 0 }`. It is legal to remap
multiple channels to the same thing, so `{ 1, 1 }` would duplicate the
right channel to both channels of a stereo signal. An element in the
channel map set to -1 instead of a valid channel will mute that channel,
setting it to a silence value.

You cannot change the number of channels through a channel map, just
reorder/mute them.

The output channel map can be changed at any time, as output remapping is
applied during SDL_GetAudioStreamData.

Audio streams default to no remapping applied. Passing a NULL channel map
is legal, and turns off remapping.

SDL will copy the channel map; the caller does not have to save this array
after this call.

If `count` is not equal to the current number of channels in the audio
stream's format, this will fail. This is a safety measure to make sure a
race condition hasn't changed the format while this call is setting the
channel map.

Unlike attempting to change the stream's format, the output channel map on
a stream bound to a recording device is permitted to change at any time;
any data added to the stream after this call will have the new mapping, but
previously-added data will still have the prior mapping. When the channel
map doesn't match the hardware's channel layout, SDL will convert the data
before feeding it to the device for playback.

\\param stream the SDL_AudioStream to change.
\\param chmap the new channel map, NULL to reset to default.
\\param count The number of channels in the map.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread, as it holds
              a stream-specific mutex while running. Don't change the
              stream's format to have a different number of channels from a
              a different thread at the same time, though!

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetAudioStreamInputChannelMap
")
(:FUNCTION "SDL_PutAudioStreamData" "Add data to the stream.

This data must match the format/channels/samplerate specified in the latest
call to SDL_SetAudioStreamFormat, or the format specified when creating the
stream if it hasn't been changed.

Note that this call simply copies the unconverted data for later. This is
different than SDL2, where data was converted during the Put call and the
Get call would just dequeue the previously-converted data.

\\param stream the stream the audio data is being added to.
\\param buf a pointer to the audio data to add.
\\param len the number of bytes to write to the stream.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread, but if the
              stream has a callback set, the caller might need to manage
              extra locking.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ClearAudioStream
\\sa SDL_FlushAudioStream
\\sa SDL_GetAudioStreamData
\\sa SDL_GetAudioStreamQueued
")
(:FUNCTION "SDL_GetAudioStreamData"
 "Get converted/resampled data from the stream.

The input/output data format/channels/samplerate is specified when creating
the stream, and can be changed after creation by calling
SDL_SetAudioStreamFormat.

Note that any conversion and resampling necessary is done during this call,
and SDL_PutAudioStreamData simply queues unconverted data for later. This
is different than SDL2, where that work was done while inputting new data
to the stream and requesting the output just copied the converted data.

\\param stream the stream the audio is being requested from.
\\param buf a buffer to fill with audio data.
\\param len the maximum number of bytes to fill.
\\returns the number of bytes read from the stream or -1 on failure; call
         SDL_GetError() for more information.

\\threadsafety It is safe to call this function from any thread, but if the
              stream has a callback set, the caller might need to manage
              extra locking.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ClearAudioStream
\\sa SDL_GetAudioStreamAvailable
\\sa SDL_PutAudioStreamData
")
(:FUNCTION "SDL_GetAudioStreamAvailable"
 "Get the number of converted/resampled bytes available.

The stream may be buffering data behind the scenes until it has enough to
resample correctly, so this number might be lower than what you expect, or
even be zero. Add more data or flush the stream if you need the data now.

If the stream has so much data that it would overflow an int, the return
value is clamped to a maximum value, but no queued data is lost; if there
are gigabytes of data queued, the app might need to read some of it with
SDL_GetAudioStreamData before this function's return value is no longer
clamped.

\\param stream the audio stream to query.
\\returns the number of converted/resampled bytes available or -1 on
         failure; call SDL_GetError() for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetAudioStreamData
\\sa SDL_PutAudioStreamData
")
(:FUNCTION "SDL_GetAudioStreamQueued" "Get the number of bytes currently queued.

This is the number of bytes put into a stream as input, not the number that
can be retrieved as output. Because of several details, it's not possible
to calculate one number directly from the other. If you need to know how
much usable data can be retrieved right now, you should use
SDL_GetAudioStreamAvailable() and not this function.

Note that audio streams can change their input format at any time, even if
there is still data queued in a different format, so the returned byte
count will not necessarily match the number of _sample frames_ available.
Users of this API should be aware of format changes they make when feeding
a stream and plan accordingly.

Queued data is not converted until it is consumed by
SDL_GetAudioStreamData, so this value should be representative of the exact
data that was put into the stream.

If the stream has so much data that it would overflow an int, the return
value is clamped to a maximum value, but no queued data is lost; if there
are gigabytes of data queued, the app might need to read some of it with
SDL_GetAudioStreamData before this function's return value is no longer
clamped.

\\param stream the audio stream to query.
\\returns the number of bytes queued or -1 on failure; call SDL_GetError()
         for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_PutAudioStreamData
\\sa SDL_ClearAudioStream
")
(:FUNCTION "SDL_FlushAudioStream"
 "Tell the stream that you're done sending data, and anything being buffered
should be converted/resampled and made available immediately.

It is legal to add more data to a stream after flushing, but there may be
audio gaps in the output. Generally this is intended to signal the end of
input, so the complete output becomes available.

\\param stream the audio stream to flush.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_PutAudioStreamData
")
(:FUNCTION "SDL_ClearAudioStream" "Clear any pending data in the stream.

This drops any queued data, so there will be nothing to read from the
stream until more is added.

\\param stream the audio stream to clear.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetAudioStreamAvailable
\\sa SDL_GetAudioStreamData
\\sa SDL_GetAudioStreamQueued
\\sa SDL_PutAudioStreamData
")
(:FUNCTION "SDL_PauseAudioStreamDevice"
 "Use this function to pause audio playback on the audio device associated
with an audio stream.

This function pauses audio processing for a given device. Any bound audio
streams will not progress, and no audio will be generated. Pausing one
device does not prevent other unpaused devices from running.

Pausing a device can be useful to halt all audio without unbinding all the
audio streams. This might be useful while a game is paused, or a level is
loading, etc.

\\param stream the audio stream associated with the audio device to pause.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ResumeAudioStreamDevice
")
(:FUNCTION "SDL_ResumeAudioStreamDevice"
 "Use this function to unpause audio playback on the audio device associated
with an audio stream.

This function unpauses audio processing for a given device that has
previously been paused. Once unpaused, any bound audio streams will begin
to progress again, and audio can be generated.

Remember, SDL_OpenAudioDeviceStream opens device in a paused state, so this
function call is required for audio playback to begin on such device.

\\param stream the audio stream associated with the audio device to resume.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_PauseAudioStreamDevice
")
(:FUNCTION "SDL_AudioStreamDevicePaused"
 "Use this function to query if an audio device associated with a stream is
paused.

Unlike in SDL2, audio devices start in an _unpaused_ state, since an app
has to bind a stream before any audio will flow.

\\param stream the audio stream associated with the audio device to query.
\\returns true if device is valid and paused, false otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_PauseAudioStreamDevice
\\sa SDL_ResumeAudioStreamDevice
")
(:FUNCTION "SDL_LockAudioStream" "Lock an audio stream for serialized access.

Each SDL_AudioStream has an internal mutex it uses to protect its data
structures from threading conflicts. This function allows an app to lock
that mutex, which could be useful if registering callbacks on this stream.

One does not need to lock a stream to use in it most cases, as the stream
manages this lock internally. However, this lock is held during callbacks,
which may run from arbitrary threads at any time, so if an app needs to
protect shared data during those callbacks, locking the stream guarantees
that the callback is not running while the lock is held.

As this is just a wrapper over SDL_LockMutex for an internal lock; it has
all the same attributes (recursive locks are allowed, etc).

\\param stream the audio stream to lock.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_UnlockAudioStream
")
(:FUNCTION "SDL_UnlockAudioStream"
 "Unlock an audio stream for serialized access.

This unlocks an audio stream after a call to SDL_LockAudioStream.

\\param stream the audio stream to unlock.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety You should only call this from the same thread that
              previously called SDL_LockAudioStream.

\\since This function is available since SDL 3.2.0.

\\sa SDL_LockAudioStream
")
(:FUNCTION "SDL_SetAudioStreamGetCallback"
 "Set a callback that runs when data is requested from an audio stream.

This callback is called _before_ data is obtained from the stream, giving
the callback the chance to add more on-demand.

The callback can (optionally) call SDL_PutAudioStreamData() to add more
audio to the stream during this call; if needed, the request that triggered
this callback will obtain the new data immediately.

The callback's `approx_request` argument is roughly how many bytes of
_unconverted_ data (in the stream's input format) is needed by the caller,
although this may overestimate a little for safety. This takes into account
how much is already in the stream and only asks for any extra necessary to
resolve the request, which means the callback may be asked for zero bytes,
and a different amount on each call.

The callback is not required to supply exact amounts; it is allowed to
supply too much or too little or none at all. The caller will get what's
available, up to the amount they requested, regardless of this callback's
outcome.

Clearing or flushing an audio stream does not call this callback.

This function obtains the stream's lock, which means any existing callback
(get or put) in progress will finish running before setting the new
callback.

Setting a NULL function turns off the callback.

\\param stream the audio stream to set the new callback on.
\\param callback the new callback function to call when data is requested
                from the stream.
\\param userdata an opaque pointer provided to the callback for its own
                personal use.
\\returns true on success or false on failure; call SDL_GetError() for more
         information. This only fails if `stream` is NULL.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetAudioStreamPutCallback
")
(:FUNCTION "SDL_SetAudioStreamPutCallback"
 "Set a callback that runs when data is added to an audio stream.

This callback is called _after_ the data is added to the stream, giving the
callback the chance to obtain it immediately.

The callback can (optionally) call SDL_GetAudioStreamData() to obtain audio
from the stream during this call.

The callback's `approx_request` argument is how many bytes of _converted_
data (in the stream's output format) was provided by the caller, although
this may underestimate a little for safety. This value might be less than
what is currently available in the stream, if data was already there, and
might be less than the caller provided if the stream needs to keep a buffer
to aid in resampling. Which means the callback may be provided with zero
bytes, and a different amount on each call.

The callback may call SDL_GetAudioStreamAvailable to see the total amount
currently available to read from the stream, instead of the total provided
by the current call.

The callback is not required to obtain all data. It is allowed to read less
or none at all. Anything not read now simply remains in the stream for
later access.

Clearing or flushing an audio stream does not call this callback.

This function obtains the stream's lock, which means any existing callback
(get or put) in progress will finish running before setting the new
callback.

Setting a NULL function turns off the callback.

\\param stream the audio stream to set the new callback on.
\\param callback the new callback function to call when data is added to the
                stream.
\\param userdata an opaque pointer provided to the callback for its own
                personal use.
\\returns true on success or false on failure; call SDL_GetError() for more
         information. This only fails if `stream` is NULL.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetAudioStreamGetCallback
")
(:FUNCTION "SDL_DestroyAudioStream" "Free an audio stream.

This will release all allocated data, including any audio that is still
queued. You do not need to manually clear the stream first.

If this stream was bound to an audio device, it is unbound during this
call. If this stream was created with SDL_OpenAudioDeviceStream, the audio
device that was opened alongside this stream's creation will be closed,
too.

\\param stream the audio stream to destroy.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateAudioStream
")
(:FUNCTION "SDL_OpenAudioDeviceStream"
 "Convenience function for straightforward audio init for the common case.

If all your app intends to do is provide a single source of PCM audio, this
function allows you to do all your audio setup in a single call.

This is also intended to be a clean means to migrate apps from SDL2.

This function will open an audio device, create a stream and bind it.
Unlike other methods of setup, the audio device will be closed when this
stream is destroyed, so the app can treat the returned SDL_AudioStream as
the only object needed to manage audio playback.

Also unlike other functions, the audio device begins paused. This is to map
more closely to SDL2-style behavior, since there is no extra step here to
bind a stream to begin audio flowing. The audio device should be resumed
with `SDL_ResumeAudioStreamDevice(stream);`

This function works with both playback and recording devices.

The `spec` parameter represents the app's side of the audio stream. That
is, for recording audio, this will be the output format, and for playing
audio, this will be the input format. If spec is NULL, the system will
choose the format, and the app can use SDL_GetAudioStreamFormat() to obtain
this information later.

If you don't care about opening a specific audio device, you can (and
probably _should_), use SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK for playback and
SDL_AUDIO_DEVICE_DEFAULT_RECORDING for recording.

One can optionally provide a callback function; if NULL, the app is
expected to queue audio data for playback (or unqueue audio data if
capturing). Otherwise, the callback will begin to fire once the device is
unpaused.

Destroying the returned stream with SDL_DestroyAudioStream will also close
the audio device associated with this stream.

\\param devid an audio device to open, or SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK
             or SDL_AUDIO_DEVICE_DEFAULT_RECORDING.
\\param spec the audio stream's data format. Can be NULL.
\\param callback a callback where the app will provide new data for
                playback, or receive new data for recording. Can be NULL,
                in which case the app will need to call
                SDL_PutAudioStreamData or SDL_GetAudioStreamData as
                necessary.
\\param userdata app-controlled pointer passed to callback. Can be NULL.
                Ignored if callback is NULL.
\\returns an audio stream on success, ready to use, or NULL on failure; call
         SDL_GetError() for more information. When done with this stream,
         call SDL_DestroyAudioStream to free resources and close the
         device.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetAudioStreamDevice
\\sa SDL_ResumeAudioStreamDevice
")
(:FUNCTION "SDL_SetAudioPostmixCallback"
 "Set a callback that fires when data is about to be fed to an audio device.

This is useful for accessing the final mix, perhaps for writing a
visualizer or applying a final effect to the audio data before playback.

The buffer is the final mix of all bound audio streams on an opened device;
this callback will fire regularly for any device that is both opened and
unpaused. If there is no new data to mix, either because no streams are
bound to the device or all the streams are empty, this callback will still
fire with the entire buffer set to silence.

This callback is allowed to make changes to the data; the contents of the
buffer after this call is what is ultimately passed along to the hardware.

The callback is always provided the data in float format (values from -1.0f
to 1.0f), but the number of channels or sample rate may be different than
the format the app requested when opening the device; SDL might have had to
manage a conversion behind the scenes, or the playback might have jumped to
new physical hardware when a system default changed, etc. These details may
change between calls. Accordingly, the size of the buffer might change
between calls as well.

This callback can run at any time, and from any thread; if you need to
serialize access to your app's data, you should provide and use a mutex or
other synchronization device.

All of this to say: there are specific needs this callback can fulfill, but
it is not the simplest interface. Apps should generally provide audio in
their preferred format through an SDL_AudioStream and let SDL handle the
difference.

This function is extremely time-sensitive; the callback should do the least
amount of work possible and return as quickly as it can. The longer the
callback runs, the higher the risk of audio dropouts or other problems.

This function will block until the audio device is in between iterations,
so any existing callback that might be running will finish before this
function sets the new callback and returns.

Setting a NULL callback function disables any previously-set callback.

\\param devid the ID of an opened audio device.
\\param callback a callback function to be called. Can be NULL.
\\param userdata app-controlled pointer passed to callback. Can be NULL.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_LoadWAV_IO" "Load the audio data of a WAVE file into memory.

Loading a WAVE file requires `src`, `spec`, `audio_buf` and `audio_len` to
be valid pointers. The entire data portion of the file is then loaded into
memory and decoded if necessary.

Supported formats are RIFF WAVE files with the formats PCM (8, 16, 24, and
32 bits), IEEE Float (32 bits), Microsoft ADPCM and IMA ADPCM (4 bits), and
A-law and mu-law (8 bits). Other formats are currently unsupported and
cause an error.

If this function succeeds, the return value is zero and the pointer to the
audio data allocated by the function is written to `audio_buf` and its
length in bytes to `audio_len`. The SDL_AudioSpec members `freq`,
`channels`, and `format` are set to the values of the audio data in the
buffer.

It's necessary to use SDL_free() to free the audio data returned in
`audio_buf` when it is no longer used.

Because of the underspecification of the .WAV format, there are many
problematic files in the wild that cause issues with strict decoders. To
provide compatibility with these files, this decoder is lenient in regards
to the truncation of the file, the fact chunk, and the size of the RIFF
chunk. The hints `SDL_HINT_WAVE_RIFF_CHUNK_SIZE`,
`SDL_HINT_WAVE_TRUNCATION`, and `SDL_HINT_WAVE_FACT_CHUNK` can be used to
tune the behavior of the loading process.

Any file that is invalid (due to truncation, corruption, or wrong values in
the headers), too big, or unsupported causes an error. Additionally, any
critical I/O error from the data source will terminate the loading process
with an error. The function returns NULL on error and in all cases (with
the exception of `src` being NULL), an appropriate error message will be
set.

It is required that the data source supports seeking.

Example:

```c
SDL_LoadWAV_IO(SDL_IOFromFile(\"sample.wav\", \"rb\"), true, &spec, &buf, &len);
```

Note that the SDL_LoadWAV function does this same thing for you, but in a
less messy way:

```c
SDL_LoadWAV(\"sample.wav\", &spec, &buf, &len);
```

\\param src the data source for the WAVE data.
\\param closeio if true, calls SDL_CloseIO() on `src` before returning, even
               in the case of an error.
\\param spec a pointer to an SDL_AudioSpec that will be set to the WAVE
            data's format details on successful return.
\\param audio_buf a pointer filled with the audio data, allocated by the
                 function.
\\param audio_len a pointer filled with the length of the audio data buffer
                 in bytes.
\\returns true on success. `audio_buf` will be filled with a pointer to an
         allocated buffer containing the audio data, and `audio_len` is
         filled with the length of that audio buffer in bytes.

         This function returns false if the .WAV file cannot be opened,
         uses an unknown data format, or is corrupt; call SDL_GetError()
         for more information.

         When the application is done with the data returned in
         `audio_buf`, it should call SDL_free() to dispose of it.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_free
\\sa SDL_LoadWAV
")
(:FUNCTION "SDL_LoadWAV" "Loads a WAV from a file path.

This is a convenience function that is effectively the same as:

```c
SDL_LoadWAV_IO(SDL_IOFromFile(path, \"rb\"), true, spec, audio_buf, audio_len);
```

\\param path the file path of the WAV file to open.
\\param spec a pointer to an SDL_AudioSpec that will be set to the WAVE
            data's format details on successful return.
\\param audio_buf a pointer filled with the audio data, allocated by the
                 function.
\\param audio_len a pointer filled with the length of the audio data buffer
                 in bytes.
\\returns true on success. `audio_buf` will be filled with a pointer to an
         allocated buffer containing the audio data, and `audio_len` is
         filled with the length of that audio buffer in bytes.

         This function returns false if the .WAV file cannot be opened,
         uses an unknown data format, or is corrupt; call SDL_GetError()
         for more information.

         When the application is done with the data returned in
         `audio_buf`, it should call SDL_free() to dispose of it.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_free
\\sa SDL_LoadWAV_IO
")
(:FUNCTION "SDL_MixAudio" "Mix audio data in a specified format.

This takes an audio buffer `src` of `len` bytes of `format` data and mixes
it into `dst`, performing addition, volume adjustment, and overflow
clipping. The buffer pointed to by `dst` must also be `len` bytes of
`format` data.

This is provided for convenience -- you can mix your own audio data.

Do not use this function for mixing together more than two streams of
sample data. The output from repeated application of this function may be
distorted by clipping, because there is no accumulator with greater range
than the input (not to mention this being an inefficient way of doing it).

It is a common misconception that this function is required to write audio
data to an output stream in an audio callback. While you can do that,
SDL_MixAudio() is really only needed when you're mixing a single audio
stream with a volume adjustment.

\\param dst the destination for the mixed audio.
\\param src the source audio buffer to be mixed.
\\param format the SDL_AudioFormat structure representing the desired audio
              format.
\\param len the length of the audio buffer in bytes.
\\param volume ranges from 0.0 - 1.0, and should be set to 1.0 for full
              audio volume.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ConvertAudioSamples"
 "Convert some audio data of one format to another format.

Please note that this function is for convenience, but should not be used
to resample audio in blocks, as it will introduce audio artifacts on the
boundaries. You should only use this function if you are converting audio
data in its entirety in one call. If you want to convert audio in smaller
chunks, use an SDL_AudioStream, which is designed for this situation.

Internally, this function creates and destroys an SDL_AudioStream on each
use, so it's also less efficient than using one directly, if you need to
convert multiple times.

\\param src_spec the format details of the input audio.
\\param src_data the audio data to be converted.
\\param src_len the len of src_data.
\\param dst_spec the format details of the output audio.
\\param dst_data will be filled with a pointer to converted audio data,
                which should be freed with SDL_free(). On error, it will be
                NULL.
\\param dst_len will be filled with the len of dst_data.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetAudioFormatName"
 "Get the human readable name of an audio format.

\\param format the audio format to query.
\\returns the human readable name of the specified audio format or
         \"SDL_AUDIO_UNKNOWN\" if the format isn't recognized.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetSilenceValueForFormat"
 "Get the appropriate memset value for silencing an audio format.

The value returned by this function can be used as the second argument to
memset (or SDL_memset) to set an audio buffer in a specific format to
silence.

\\param format the audio data format to query.
\\returns a byte value that can be passed to memset.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "__attribute__"
 "A macro to tag a function as never-returning (for analysis purposes).

This is almost identical to SDL_NORETURN, except functions marked with this
_can_ actually return. The difference is that this isn't used for code
generation, but rather static analyzers use this information to assume
truths about program state and available code paths. Specifically, this tag
is useful for writing an assertion mechanism. Indeed, SDL_assert uses this
tag behind the scenes. Generally, apps that don't understand the specific
use-case for this tag should avoid using it directly.

On compilers without analyzer_noreturn support, this is defined to nothing.

This symbol is used in SDL's headers, but apps and other libraries are
welcome to use it for their own interfaces as well.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "visibility" "A macro to tag a symbol as a public API.

SDL uses this macro for all its public functions. On some targets, it is
used to signal to the compiler that this function needs to be exported from
a shared library, but it might have other side effects.

This symbol is used in SDL's headers, but apps and other libraries are
welcome to use it for their own interfaces as well.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "__declspec" "A macro to tag a function as an allocator.

This is a hint to the compiler that a function is an allocator, like
malloc(), with certain rules. A description of how GCC treats this hint is
here:

https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-malloc-function-attribute

On compilers without allocator tag support, this is defined to nothing.

Most apps don't need to, and should not, use this directly.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ALLOC_SIZE" "Change the size of allocated memory.

The memory returned by this function must be freed with SDL_free().

If `size` is 0, it will be set to 1. Note that this is unlike some other C
runtime `realloc` implementations, which may treat `realloc(mem, 0)` the
same way as `free(mem)`.

If `mem` is NULL, the behavior of this function is equivalent to
SDL_malloc(). Otherwise, the function can have one of three possible
outcomes:

- If it returns the same pointer as `mem`, it means that `mem` was resized
  in place without freeing.
- If it returns a different non-NULL pointer, it means that `mem` was freed
  and cannot be dereferenced anymore.
- If it returns NULL (indicating failure), then `mem` will remain valid and
  must still be freed with SDL_free().

\\param mem a pointer to allocated memory to reallocate, or NULL.
\\param size the new size of the memory.
\\returns a pointer to the newly allocated memory, or NULL if allocation
         failed.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_free
\\sa SDL_malloc
\\sa SDL_calloc
")
(:FUNCTION "SDL_HAS_BUILTIN"
 "Check if the compiler supports a given builtin functionality.

This allows preprocessor checks for things that otherwise might fail to
compile.

Supported by virtually all clang versions and more-recent GCCs. Use this
instead of checking the clang version if possible.

On compilers without has_builtin support, this is defined to 0 (always
false).

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_MostSignificantBitIndex32"
 "Get the index of the most significant (set) bit in a 32-bit number.

Result is undefined when called with 0. This operation can also be stated
as \"count leading zeroes\" and \"log base 2\".

Note that this is a forced-inline function in a header, and not a public
API function available in the SDL library (which is to say, the code is
embedded in the calling program and the linker and dynamic loader will not
be able to find this function inside SDL itself).

\\param x the 32-bit value to examine.
\\returns the index of the most significant bit, or -1 if the value is 0.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_HasExactlyOneBitSet32"
 "Determine if a unsigned 32-bit value has exactly one bit set.

If there are no bits set (`x` is zero), or more than one bit set, this
returns false. If any one bit is exclusively set, this returns true.

Note that this is a forced-inline function in a header, and not a public
API function available in the SDL library (which is to say, the code is
embedded in the calling program and the linker and dynamic loader will not
be able to find this function inside SDL itself).

\\param x the 32-bit value to examine.
\\returns true if exactly one bit is set in `x`, false otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:BITFIELD "SDL_BlendMode" "A set of blend modes used in drawing operations.

These predefined blend modes are supported everywhere.

Additional values may be obtained from SDL_ComposeCustomBlendMode.

\\since This datatype is available since SDL 3.2.0.

\\sa SDL_ComposeCustomBlendMode
")
(:ENUM "SDL_BlendOperation"
 "The blend operation used when combining source and destination pixel
components.

\\since This enum is available since SDL 3.2.0.
")
(:ENUM "SDL_BlendFactor"
 "The normalized factor used to multiply pixel components.

The blend factors are multiplied with the pixels from a drawing operation
(src) and the pixels from the render target (dst) before the blend
operation. The comma-separated factors listed above are always applied in
the component order red, green, blue, and alpha.

\\since This enum is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ComposeCustomBlendMode"
 "Compose a custom blend mode for renderers.

The functions SDL_SetRenderDrawBlendMode and SDL_SetTextureBlendMode accept
the SDL_BlendMode returned by this function if the renderer supports it.

A blend mode controls how the pixels from a drawing operation (source) get
combined with the pixels from the render target (destination). First, the
components of the source and destination pixels get multiplied with their
blend factors. Then, the blend operation takes the two products and
calculates the result that will get stored in the render target.

Expressed in pseudocode, it would look like this:

```c
dstRGB = colorOperation(srcRGB * srcColorFactor, dstRGB * dstColorFactor);
dstA = alphaOperation(srcA * srcAlphaFactor, dstA * dstAlphaFactor);
```

Where the functions `colorOperation(src, dst)` and `alphaOperation(src,
dst)` can return one of the following:

- `src + dst`
- `src - dst`
- `dst - src`
- `min(src, dst)`
- `max(src, dst)`

The red, green, and blue components are always multiplied with the first,
second, and third components of the SDL_BlendFactor, respectively. The
fourth component is not used.

The alpha component is always multiplied with the fourth component of the
SDL_BlendFactor. The other components are not used in the alpha
calculation.

Support for these blend modes varies for each renderer. To check if a
specific SDL_BlendMode is supported, create a renderer and pass it to
either SDL_SetRenderDrawBlendMode or SDL_SetTextureBlendMode. They will
return with an error if the blend mode is not supported.

This list describes the support of custom blend modes for each renderer.
All renderers support the four blend modes listed in the SDL_BlendMode
enumeration.

- **direct3d**: Supports all operations with all factors. However, some
  factors produce unexpected results with `SDL_BLENDOPERATION_MINIMUM` and
  `SDL_BLENDOPERATION_MAXIMUM`.
- **direct3d11**: Same as Direct3D 9.
- **opengl**: Supports the `SDL_BLENDOPERATION_ADD` operation with all
  factors. OpenGL versions 1.1, 1.2, and 1.3 do not work correctly here.
- **opengles2**: Supports the `SDL_BLENDOPERATION_ADD`,
  `SDL_BLENDOPERATION_SUBTRACT`, `SDL_BLENDOPERATION_REV_SUBTRACT`
  operations with all factors.
- **psp**: No custom blend mode support.
- **software**: No custom blend mode support.

Some renderers do not provide an alpha component for the default render
target. The `SDL_BLENDFACTOR_DST_ALPHA` and
`SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA` factors do not have an effect in this
case.

\\param srcColorFactor the SDL_BlendFactor applied to the red, green, and
                      blue components of the source pixels.
\\param dstColorFactor the SDL_BlendFactor applied to the red, green, and
                      blue components of the destination pixels.
\\param colorOperation the SDL_BlendOperation used to combine the red,
                      green, and blue components of the source and
                      destination pixels.
\\param srcAlphaFactor the SDL_BlendFactor applied to the alpha component of
                      the source pixels.
\\param dstAlphaFactor the SDL_BlendFactor applied to the alpha component of
                      the destination pixels.
\\param alphaOperation the SDL_BlendOperation used to combine the alpha
                      component of the source and destination pixels.
\\returns an SDL_BlendMode that represents the chosen factors and
         operations.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetRenderDrawBlendMode
\\sa SDL_GetRenderDrawBlendMode
\\sa SDL_SetTextureBlendMode
\\sa SDL_GetTextureBlendMode
")
(:BITFIELD "SDL_CameraID"
 "This is a unique ID for a camera device for the time it is connected to the
system, and is never reused for the lifetime of the application.

If the device is disconnected and reconnected, it will get a new ID.

The value 0 is an invalid ID.

\\since This datatype is available since SDL 3.2.0.

\\sa SDL_GetCameras
")
(:STRUCT "SDL_Camera"
 "The opaque structure used to identify an opened SDL camera.

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_CameraSpec" "The details of an output format for a camera device.

Cameras often support multiple formats; each one will be encapsulated in
this struct.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_GetCameraSupportedFormats
\\sa SDL_GetCameraFormat
")
(:ENUM "SDL_CameraPosition"
 "The position of camera in relation to system device.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_GetCameraPosition
")
(:FUNCTION "SDL_GetNumCameraDrivers"
 "Use this function to get the number of built-in camera drivers.

This function returns a hardcoded number. This never returns a negative
value; if there are no drivers compiled into this build of SDL, this
function returns zero. The presence of a driver in this list does not mean
it will function, it just means SDL is capable of interacting with that
interface. For example, a build of SDL might have v4l2 support, but if
there's no kernel support available, SDL's v4l2 driver would fail if used.

By default, SDL tries all drivers, in its preferred order, until one is
found to be usable.

\\returns the number of built-in camera drivers.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetCameraDriver
")
(:FUNCTION "SDL_GetCameraDriver"
 "Use this function to get the name of a built in camera driver.

The list of camera drivers is given in the order that they are normally
initialized by default; the drivers that seem more reasonable to choose
first (as far as the SDL developers believe) are earlier in the list.

The names of drivers are all simple, low-ASCII identifiers, like \"v4l2\",
\"coremedia\" or \"android\". These never have Unicode characters, and are not
meant to be proper names.

\\param index the index of the camera driver; the value ranges from 0 to
             SDL_GetNumCameraDrivers() - 1.
\\returns the name of the camera driver at the requested index, or NULL if
         an invalid index was specified.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetNumCameraDrivers
")
(:FUNCTION "SDL_GetCurrentCameraDriver"
 "Get the name of the current camera driver.

The names of drivers are all simple, low-ASCII identifiers, like \"v4l2\",
\"coremedia\" or \"android\". These never have Unicode characters, and are not
meant to be proper names.

\\returns the name of the current camera driver or NULL if no driver has
         been initialized.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetCameras" "Get a list of currently connected camera devices.

\\param count a pointer filled in with the number of cameras returned, may
             be NULL.
\\returns a 0 terminated array of camera instance IDs or NULL on failure;
         call SDL_GetError() for more information. This should be freed
         with SDL_free() when it is no longer needed.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_OpenCamera
")
(:FUNCTION "SDL_GetCameraSupportedFormats"
 "Get the list of native formats/sizes a camera supports.

This returns a list of all formats and frame sizes that a specific camera
can offer. This is useful if your app can accept a variety of image formats
and sizes and so want to find the optimal spec that doesn't require
conversion.

This function isn't strictly required; if you call SDL_OpenCamera with a
NULL spec, SDL will choose a native format for you, and if you instead
specify a desired format, it will transparently convert to the requested
format on your behalf.

If `count` is not NULL, it will be filled with the number of elements in
the returned array.

Note that it's legal for a camera to supply an empty list. This is what
will happen on Emscripten builds, since that platform won't tell _anything_
about available cameras until you've opened one, and won't even tell if
there _is_ a camera until the user has given you permission to check
through a scary warning popup.

\\param instance_id the camera device instance ID.
\\param count a pointer filled in with the number of elements in the list,
             may be NULL.
\\returns a NULL terminated array of pointers to SDL_CameraSpec or NULL on
         failure; call SDL_GetError() for more information. This is a
         single allocation that should be freed with SDL_free() when it is
         no longer needed.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetCameras
\\sa SDL_OpenCamera
")
(:FUNCTION "SDL_GetCameraName" "Get the human-readable device name for a camera.

\\param instance_id the camera device instance ID.
\\returns a human-readable device name or NULL on failure; call
         SDL_GetError() for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetCameras
")
(:FUNCTION "SDL_GetCameraPosition"
 "Get the position of the camera in relation to the system.

Most platforms will report UNKNOWN, but mobile devices, like phones, can
often make a distinction between cameras on the front of the device (that
points towards the user, for taking \"selfies\") and cameras on the back (for
filming in the direction the user is facing).

\\param instance_id the camera device instance ID.
\\returns the position of the camera on the system hardware.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetCameras
")
(:FUNCTION "SDL_OpenCamera" "Open a video recording device (a \"camera\").

You can open the device with any reasonable spec, and if the hardware can't
directly support it, it will convert data seamlessly to the requested
format. This might incur overhead, including scaling of image data.

If you would rather accept whatever format the device offers, you can pass
a NULL spec here and it will choose one for you (and you can use
SDL_Surface's conversion/scaling functions directly if necessary).

You can call SDL_GetCameraFormat() to get the actual data format if passing
a NULL spec here. You can see the exact specs a device can support without
conversion with SDL_GetCameraSupportedFormats().

SDL will not attempt to emulate framerate; it will try to set the hardware
to the rate closest to the requested speed, but it won't attempt to limit
or duplicate frames artificially; call SDL_GetCameraFormat() to see the
actual framerate of the opened the device, and check your timestamps if
this is crucial to your app!

Note that the camera is not usable until the user approves its use! On some
platforms, the operating system will prompt the user to permit access to
the camera, and they can choose Yes or No at that point. Until they do, the
camera will not be usable. The app should either wait for an
SDL_EVENT_CAMERA_DEVICE_APPROVED (or SDL_EVENT_CAMERA_DEVICE_DENIED) event,
or poll SDL_GetCameraPermissionState() occasionally until it returns
non-zero. On platforms that don't require explicit user approval (and
perhaps in places where the user previously permitted access), the approval
event might come immediately, but it might come seconds, minutes, or hours
later!

\\param instance_id the camera device instance ID.
\\param spec the desired format for data the device will provide. Can be
            NULL.
\\returns an SDL_Camera object or NULL on failure; call SDL_GetError() for
         more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetCameras
\\sa SDL_GetCameraFormat
")
(:FUNCTION "SDL_GetCameraPermissionState"
 "Query if camera access has been approved by the user.

Cameras will not function between when the device is opened by the app and
when the user permits access to the hardware. On some platforms, this
presents as a popup dialog where the user has to explicitly approve access;
on others the approval might be implicit and not alert the user at all.

This function can be used to check the status of that approval. It will
return 0 if still waiting for user response, 1 if the camera is approved
for use, and -1 if the user denied access.

Instead of polling with this function, you can wait for a
SDL_EVENT_CAMERA_DEVICE_APPROVED (or SDL_EVENT_CAMERA_DEVICE_DENIED) event
in the standard SDL event loop, which is guaranteed to be sent once when
permission to use the camera is decided.

If a camera is declined, there's nothing to be done but call
SDL_CloseCamera() to dispose of it.

\\param camera the opened camera device to query.
\\returns -1 if user denied access to the camera, 1 if user approved access,
         0 if no decision has been made yet.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_OpenCamera
\\sa SDL_CloseCamera
")
(:FUNCTION "SDL_GetCameraID" "Get the instance ID of an opened camera.

\\param camera an SDL_Camera to query.
\\returns the instance ID of the specified camera on success or 0 on
         failure; call SDL_GetError() for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_OpenCamera
")
(:FUNCTION "SDL_GetCameraProperties"
 "Get the properties associated with an opened camera.

\\param camera the SDL_Camera obtained from SDL_OpenCamera().
\\returns a valid property ID on success or 0 on failure; call
         SDL_GetError() for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetCameraFormat"
 "Get the spec that a camera is using when generating images.

Note that this might not be the native format of the hardware, as SDL might
be converting to this format behind the scenes.

If the system is waiting for the user to approve access to the camera, as
some platforms require, this will return false, but this isn't necessarily
a fatal error; you should either wait for an
SDL_EVENT_CAMERA_DEVICE_APPROVED (or SDL_EVENT_CAMERA_DEVICE_DENIED) event,
or poll SDL_GetCameraPermissionState() occasionally until it returns
non-zero.

\\param camera opened camera device.
\\param spec the SDL_CameraSpec to be initialized by this function.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_OpenCamera
")
(:FUNCTION "SDL_AcquireCameraFrame" "Acquire a frame.

The frame is a memory pointer to the image data, whose size and format are
given by the spec requested when opening the device.

This is a non blocking API. If there is a frame available, a non-NULL
surface is returned, and timestampNS will be filled with a non-zero value.

Note that an error case can also return NULL, but a NULL by itself is
normal and just signifies that a new frame is not yet available. Note that
even if a camera device fails outright (a USB camera is unplugged while in
use, etc), SDL will send an event separately to notify the app, but
continue to provide blank frames at ongoing intervals until
SDL_CloseCamera() is called, so real failure here is almost always an out
of memory condition.

After use, the frame should be released with SDL_ReleaseCameraFrame(). If
you don't do this, the system may stop providing more video!

Do not call SDL_DestroySurface() on the returned surface! It must be given
back to the camera subsystem with SDL_ReleaseCameraFrame!

If the system is waiting for the user to approve access to the camera, as
some platforms require, this will return NULL (no frames available); you
should either wait for an SDL_EVENT_CAMERA_DEVICE_APPROVED (or
SDL_EVENT_CAMERA_DEVICE_DENIED) event, or poll
SDL_GetCameraPermissionState() occasionally until it returns non-zero.

\\param camera opened camera device.
\\param timestampNS a pointer filled in with the frame's timestamp, or 0 on
                   error. Can be NULL.
\\returns a new frame of video on success, NULL if none is currently
         available.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ReleaseCameraFrame
")
(:FUNCTION "SDL_ReleaseCameraFrame"
 "Release a frame of video acquired from a camera.

Let the back-end re-use the internal buffer for camera.

This function _must_ be called only on surface objects returned by
SDL_AcquireCameraFrame(). This function should be called as quickly as
possible after acquisition, as SDL keeps a small FIFO queue of surfaces for
video frames; if surfaces aren't released in a timely manner, SDL may drop
upcoming video frames from the camera.

If the app needs to keep the surface for a significant time, they should
make a copy of it and release the original.

The app should not use the surface again after calling this function;
assume the surface is freed and the pointer is invalid.

\\param camera opened camera device.
\\param frame the video frame surface to release.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_AcquireCameraFrame
")
(:FUNCTION "SDL_CloseCamera"
 "Use this function to shut down camera processing and close the camera
device.

\\param camera opened camera device.

\\threadsafety It is safe to call this function from any thread, but no
              thread may reference `device` once this function is called.

\\since This function is available since SDL 3.2.0.

\\sa SDL_OpenCamera
")
(:FUNCTION "SDL_SetClipboardText" "Put UTF-8 text into the clipboard.

\\param text the text to store in the clipboard.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetClipboardText
\\sa SDL_HasClipboardText
")
(:FUNCTION "SDL_GetClipboardText" "Get UTF-8 text from the clipboard.

This functions returns an empty string if there was not enough memory left
for a copy of the clipboard's content.

\\returns the clipboard text on success or an empty string on failure; call
         SDL_GetError() for more information. This should be freed with
         SDL_free() when it is no longer needed.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_HasClipboardText
\\sa SDL_SetClipboardText
")
(:FUNCTION "SDL_HasClipboardText"
 "Query whether the clipboard exists and contains a non-empty text string.

\\returns true if the clipboard has text, or false if it does not.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetClipboardText
\\sa SDL_SetClipboardText
")
(:FUNCTION "SDL_SetPrimarySelectionText"
 "Put UTF-8 text into the primary selection.

\\param text the text to store in the primary selection.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetPrimarySelectionText
\\sa SDL_HasPrimarySelectionText
")
(:FUNCTION "SDL_GetPrimarySelectionText"
 "Get UTF-8 text from the primary selection.

This functions returns an empty string if there was not enough memory left
for a copy of the primary selection's content.

\\returns the primary selection text on success or an empty string on
         failure; call SDL_GetError() for more information. This should be
         freed with SDL_free() when it is no longer needed.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_HasPrimarySelectionText
\\sa SDL_SetPrimarySelectionText
")
(:FUNCTION "SDL_HasPrimarySelectionText"
 "Query whether the primary selection exists and contains a non-empty text
string.

\\returns true if the primary selection has text, or false if it does not.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetPrimarySelectionText
\\sa SDL_SetPrimarySelectionText
")
(:FUNCTION "SDL_SetClipboardData" "Offer clipboard data to the OS.

Tell the operating system that the application is offering clipboard data
for each of the provided mime-types. Once another application requests the
data the callback function will be called, allowing it to generate and
respond with the data for the requested mime-type.

The size of text data does not include any terminator, and the text does
not need to be null terminated (e.g. you can directly copy a portion of a
document).

\\param callback a function pointer to the function that provides the
                clipboard data.
\\param cleanup a function pointer to the function that cleans up the
               clipboard data.
\\param userdata an opaque pointer that will be forwarded to the callbacks.
\\param mime_types a list of mime-types that are being offered.
\\param num_mime_types the number of mime-types in the mime_types list.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ClearClipboardData
\\sa SDL_GetClipboardData
\\sa SDL_HasClipboardData
")
(:FUNCTION "SDL_ClearClipboardData" "Clear the clipboard data.

\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetClipboardData
")
(:FUNCTION "SDL_GetClipboardData"
 "Get the data from clipboard for a given mime type.

The size of text data does not include the terminator, but the text is
guaranteed to be null terminated.

\\param mime_type the mime type to read from the clipboard.
\\param size a pointer filled in with the length of the returned data.
\\returns the retrieved data buffer or NULL on failure; call SDL_GetError()
         for more information. This should be freed with SDL_free() when it
         is no longer needed.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_HasClipboardData
\\sa SDL_SetClipboardData
")
(:FUNCTION "SDL_HasClipboardData"
 "Query whether there is data in the clipboard for the provided mime type.

\\param mime_type the mime type to check for data for.
\\returns true if there exists data in clipboard for the provided mime type,
         false if it does not.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetClipboardData
\\sa SDL_GetClipboardData
")
(:FUNCTION "SDL_GetClipboardMimeTypes"
 "Retrieve the list of mime types available in the clipboard.

\\param num_mime_types a pointer filled with the number of mime types, may
                      be NULL.
\\returns a null terminated array of strings with mime types, or NULL on
         failure; call SDL_GetError() for more information. This should be
         freed with SDL_free() when it is no longer needed.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetClipboardData
")
(:FUNCTION "SDL_GetNumLogicalCPUCores"
 "Get the number of logical CPU cores available.

\\returns the total number of logical CPU cores. On CPUs that include
         technologies such as hyperthreading, the number of logical cores
         may be more than the number of physical cores.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetCPUCacheLineSize"
 "Determine the L1 cache line size of the CPU.

This is useful for determining multi-threaded structure padding or SIMD
prefetch sizes.

\\returns the L1 cache line size of the CPU, in bytes.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_HasAltiVec" "Determine whether the CPU has AltiVec features.

This always returns false on CPUs that aren't using PowerPC instruction
sets.

\\returns true if the CPU has AltiVec features or false if not.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_HasMMX" "Determine whether the CPU has MMX features.

This always returns false on CPUs that aren't using Intel instruction sets.

\\returns true if the CPU has MMX features or false if not.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_HasSSE" "Determine whether the CPU has SSE features.

This always returns false on CPUs that aren't using Intel instruction sets.

\\returns true if the CPU has SSE features or false if not.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_HasSSE2
\\sa SDL_HasSSE3
\\sa SDL_HasSSE41
\\sa SDL_HasSSE42
")
(:FUNCTION "SDL_HasSSE2" "Determine whether the CPU has SSE2 features.

This always returns false on CPUs that aren't using Intel instruction sets.

\\returns true if the CPU has SSE2 features or false if not.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_HasSSE
\\sa SDL_HasSSE3
\\sa SDL_HasSSE41
\\sa SDL_HasSSE42
")
(:FUNCTION "SDL_HasSSE3" "Determine whether the CPU has SSE3 features.

This always returns false on CPUs that aren't using Intel instruction sets.

\\returns true if the CPU has SSE3 features or false if not.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_HasSSE
\\sa SDL_HasSSE2
\\sa SDL_HasSSE41
\\sa SDL_HasSSE42
")
(:FUNCTION "SDL_HasSSE41" "Determine whether the CPU has SSE4.1 features.

This always returns false on CPUs that aren't using Intel instruction sets.

\\returns true if the CPU has SSE4.1 features or false if not.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_HasSSE
\\sa SDL_HasSSE2
\\sa SDL_HasSSE3
\\sa SDL_HasSSE42
")
(:FUNCTION "SDL_HasSSE42" "Determine whether the CPU has SSE4.2 features.

This always returns false on CPUs that aren't using Intel instruction sets.

\\returns true if the CPU has SSE4.2 features or false if not.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_HasSSE
\\sa SDL_HasSSE2
\\sa SDL_HasSSE3
\\sa SDL_HasSSE41
")
(:FUNCTION "SDL_HasAVX" "Determine whether the CPU has AVX features.

This always returns false on CPUs that aren't using Intel instruction sets.

\\returns true if the CPU has AVX features or false if not.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_HasAVX2
\\sa SDL_HasAVX512F
")
(:FUNCTION "SDL_HasAVX2" "Determine whether the CPU has AVX2 features.

This always returns false on CPUs that aren't using Intel instruction sets.

\\returns true if the CPU has AVX2 features or false if not.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_HasAVX
\\sa SDL_HasAVX512F
")
(:FUNCTION "SDL_HasAVX512F"
 "Determine whether the CPU has AVX-512F (foundation) features.

This always returns false on CPUs that aren't using Intel instruction sets.

\\returns true if the CPU has AVX-512F features or false if not.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_HasAVX
\\sa SDL_HasAVX2
")
(:FUNCTION "SDL_HasARMSIMD"
 "Determine whether the CPU has ARM SIMD (ARMv6) features.

This is different from ARM NEON, which is a different instruction set.

This always returns false on CPUs that aren't using ARM instruction sets.

\\returns true if the CPU has ARM SIMD features or false if not.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_HasNEON
")
(:FUNCTION "SDL_HasNEON"
 "Determine whether the CPU has NEON (ARM SIMD) features.

This always returns false on CPUs that aren't using ARM instruction sets.

\\returns true if the CPU has ARM NEON features or false if not.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_HasLSX"
 "Determine whether the CPU has LSX (LOONGARCH SIMD) features.

This always returns false on CPUs that aren't using LOONGARCH instruction
sets.

\\returns true if the CPU has LOONGARCH LSX features or false if not.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_HasLASX"
 "Determine whether the CPU has LASX (LOONGARCH SIMD) features.

This always returns false on CPUs that aren't using LOONGARCH instruction
sets.

\\returns true if the CPU has LOONGARCH LASX features or false if not.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetSystemRAM" "Get the amount of RAM configured in the system.

\\returns the amount of RAM configured in the system in MiB.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetSIMDAlignment"
 "Report the alignment this system needs for SIMD allocations.

This will return the minimum number of bytes to which a pointer must be
aligned to be compatible with SIMD instructions on the current machine. For
example, if the machine supports SSE only, it will return 16, but if it
supports AVX-512F, it'll return 64 (etc). This only reports values for
instruction sets SDL knows about, so if your SDL build doesn't have
SDL_HasAVX512F(), then it might return 16 for the SSE support it sees and
not 64 for the AVX-512 instructions that exist but SDL doesn't know about.
Plan accordingly.

\\returns the alignment in bytes needed for available, known SIMD
         instructions.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_aligned_alloc
\\sa SDL_aligned_free
")
(:STRUCT "SDL_DialogFileFilter" "An entry for filters for file dialogs.

`name` is a user-readable label for the filter (for example, \"Office
document\").

`pattern` is a semicolon-separated list of file extensions (for example,
\"doc;docx\"). File extensions may only contain alphanumeric characters,
hyphens, underscores and periods. Alternatively, the whole string can be a
single asterisk (\"*\"), which serves as an \"All files\" filter.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_DialogFileCallback
\\sa SDL_ShowOpenFileDialog
\\sa SDL_ShowSaveFileDialog
\\sa SDL_ShowOpenFolderDialog
\\sa SDL_ShowFileDialogWithProperties
")
(:FUNCTION "SDL_ShowOpenFileDialog"
 "Displays a dialog that lets the user select a file on their filesystem.

This is an asynchronous function; it will return immediately, and the
result will be passed to the callback.

The callback will be invoked with a null-terminated list of files the user
chose. The list will be empty if the user canceled the dialog, and it will
be NULL if an error occurred.

Note that the callback may be called from a different thread than the one
the function was invoked on.

Depending on the platform, the user may be allowed to input paths that
don't yet exist.

On Linux, dialogs may require XDG Portals, which requires DBus, which
requires an event-handling loop. Apps that do not use SDL to handle events
should add a call to SDL_PumpEvents in their main loop.

\\param callback a function pointer to be invoked when the user selects a
                file and accepts, or cancels the dialog, or an error
                occurs.
\\param userdata an optional pointer to pass extra data to the callback when
                it will be invoked.
\\param window the window that the dialog should be modal for, may be NULL.
              Not all platforms support this option.
\\param filters a list of filters, may be NULL. Not all platforms support
               this option, and platforms that do support it may allow the
               user to ignore the filters. If non-NULL, it must remain
               valid at least until the callback is invoked.
\\param nfilters the number of filters. Ignored if filters is NULL.
\\param default_location the default folder or file to start the dialog at,
                        may be NULL. Not all platforms support this option.
\\param allow_many if non-zero, the user will be allowed to select multiple
                  entries. Not all platforms support this option.

\\threadsafety This function should be called only from the main thread. The
              callback may be invoked from the same thread or from a
              different one, depending on the OS's constraints.

\\since This function is available since SDL 3.2.0.

\\sa SDL_DialogFileCallback
\\sa SDL_DialogFileFilter
\\sa SDL_ShowSaveFileDialog
\\sa SDL_ShowOpenFolderDialog
\\sa SDL_ShowFileDialogWithProperties
")
(:FUNCTION "SDL_ShowSaveFileDialog"
 "Displays a dialog that lets the user choose a new or existing file on their
filesystem.

This is an asynchronous function; it will return immediately, and the
result will be passed to the callback.

The callback will be invoked with a null-terminated list of files the user
chose. The list will be empty if the user canceled the dialog, and it will
be NULL if an error occurred.

Note that the callback may be called from a different thread than the one
the function was invoked on.

The chosen file may or may not already exist.

On Linux, dialogs may require XDG Portals, which requires DBus, which
requires an event-handling loop. Apps that do not use SDL to handle events
should add a call to SDL_PumpEvents in their main loop.

\\param callback a function pointer to be invoked when the user selects a
                file and accepts, or cancels the dialog, or an error
                occurs.
\\param userdata an optional pointer to pass extra data to the callback when
                it will be invoked.
\\param window the window that the dialog should be modal for, may be NULL.
              Not all platforms support this option.
\\param filters a list of filters, may be NULL. Not all platforms support
               this option, and platforms that do support it may allow the
               user to ignore the filters. If non-NULL, it must remain
               valid at least until the callback is invoked.
\\param nfilters the number of filters. Ignored if filters is NULL.
\\param default_location the default folder or file to start the dialog at,
                        may be NULL. Not all platforms support this option.

\\threadsafety This function should be called only from the main thread. The
              callback may be invoked from the same thread or from a
              different one, depending on the OS's constraints.

\\since This function is available since SDL 3.2.0.

\\sa SDL_DialogFileCallback
\\sa SDL_DialogFileFilter
\\sa SDL_ShowOpenFileDialog
\\sa SDL_ShowOpenFolderDialog
\\sa SDL_ShowFileDialogWithProperties
")
(:FUNCTION "SDL_ShowOpenFolderDialog"
 "Displays a dialog that lets the user select a folder on their filesystem.

This is an asynchronous function; it will return immediately, and the
result will be passed to the callback.

The callback will be invoked with a null-terminated list of files the user
chose. The list will be empty if the user canceled the dialog, and it will
be NULL if an error occurred.

Note that the callback may be called from a different thread than the one
the function was invoked on.

Depending on the platform, the user may be allowed to input paths that
don't yet exist.

On Linux, dialogs may require XDG Portals, which requires DBus, which
requires an event-handling loop. Apps that do not use SDL to handle events
should add a call to SDL_PumpEvents in their main loop.

\\param callback a function pointer to be invoked when the user selects a
                file and accepts, or cancels the dialog, or an error
                occurs.
\\param userdata an optional pointer to pass extra data to the callback when
                it will be invoked.
\\param window the window that the dialog should be modal for, may be NULL.
              Not all platforms support this option.
\\param default_location the default folder or file to start the dialog at,
                        may be NULL. Not all platforms support this option.
\\param allow_many if non-zero, the user will be allowed to select multiple
                  entries. Not all platforms support this option.

\\threadsafety This function should be called only from the main thread. The
              callback may be invoked from the same thread or from a
              different one, depending on the OS's constraints.

\\since This function is available since SDL 3.2.0.

\\sa SDL_DialogFileCallback
\\sa SDL_ShowOpenFileDialog
\\sa SDL_ShowSaveFileDialog
\\sa SDL_ShowFileDialogWithProperties
")
(:ENUM "SDL_FileDialogType" "Various types of file dialogs.

This is used by SDL_ShowFileDialogWithProperties() to decide what kind of
dialog to present to the user.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_ShowFileDialogWithProperties
")
(:FUNCTION "SDL_ShowFileDialogWithProperties"
 "Create and launch a file dialog with the specified properties.

These are the supported properties:

- `SDL_PROP_FILE_DIALOG_FILTERS_POINTER`: a pointer to a list of
  SDL_DialogFileFilter structs, which will be used as filters for
  file-based selections. Ignored if the dialog is an \"Open Folder\" dialog.
  If non-NULL, the array of filters must remain valid at least until the
  callback is invoked.
- `SDL_PROP_FILE_DIALOG_NFILTERS_NUMBER`: the number of filters in the
  array of filters, if it exists.
- `SDL_PROP_FILE_DIALOG_WINDOW_POINTER`: the window that the dialog should
  be modal for.
- `SDL_PROP_FILE_DIALOG_LOCATION_STRING`: the default folder or file to
  start the dialog at.
- `SDL_PROP_FILE_DIALOG_MANY_BOOLEAN`: true to allow the user to select
  more than one entry.
- `SDL_PROP_FILE_DIALOG_TITLE_STRING`: the title for the dialog.
- `SDL_PROP_FILE_DIALOG_ACCEPT_STRING`: the label that the accept button
  should have.
- `SDL_PROP_FILE_DIALOG_CANCEL_STRING`: the label that the cancel button
  should have.

Note that each platform may or may not support any of the properties.

\\param type the type of file dialog.
\\param callback a function pointer to be invoked when the user selects a
                file and accepts, or cancels the dialog, or an error
                occurs.
\\param userdata an optional pointer to pass extra data to the callback when
                it will be invoked.
\\param props the properties to use.

\\threadsafety This function should be called only from the main thread. The
              callback may be invoked from the same thread or from a
              different one, depending on the OS's constraints.

\\since This function is available since SDL 3.2.0.

\\sa SDL_FileDialogType
\\sa SDL_DialogFileCallback
\\sa SDL_DialogFileFilter
\\sa SDL_ShowOpenFileDialog
\\sa SDL_ShowSaveFileDialog
\\sa SDL_ShowOpenFolderDialog
")
(:FUNCTION "SDL_SwapFloat" "Byte-swap a floating point number.

This will always byte-swap the value, whether it's currently in the native
byteorder of the system or not. You should use SDL_SwapFloatLE or
SDL_SwapFloatBE instead, in most cases.

Note that this is a forced-inline function in a header, and not a public
API function available in the SDL library (which is to say, the code is
embedded in the calling program and the linker and dynamic loader will not
be able to find this function inside SDL itself).

\\param x the value to byte-swap.
\\returns x, with its bytes in the opposite endian order.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_Swap16" "Byte-swap an unsigned 16-bit number.

This will always byte-swap the value, whether it's currently in the native
byteorder of the system or not. You should use SDL_Swap16LE or SDL_Swap16BE
instead, in most cases.

Note that this is a forced-inline function in a header, and not a public
API function available in the SDL library (which is to say, the code is
embedded in the calling program and the linker and dynamic loader will not
be able to find this function inside SDL itself).

\\param x the value to byte-swap.
\\returns `x`, with its bytes in the opposite endian order.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_Swap32" "Byte-swap an unsigned 32-bit number.

This will always byte-swap the value, whether it's currently in the native
byteorder of the system or not. You should use SDL_Swap32LE or SDL_Swap32BE
instead, in most cases.

Note that this is a forced-inline function in a header, and not a public
API function available in the SDL library (which is to say, the code is
embedded in the calling program and the linker and dynamic loader will not
be able to find this function inside SDL itself).

\\param x the value to byte-swap.
\\returns `x`, with its bytes in the opposite endian order.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_Swap64" "Byte-swap an unsigned 64-bit number.

This will always byte-swap the value, whether it's currently in the native
byteorder of the system or not. You should use SDL_Swap64LE or SDL_Swap64BE
instead, in most cases.

Note that this is a forced-inline function in a header, and not a public
API function available in the SDL library (which is to say, the code is
embedded in the calling program and the linker and dynamic loader will not
be able to find this function inside SDL itself).

\\param x the value to byte-swap.
\\returns `x`, with its bytes in the opposite endian order.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_Swap16LE"
 "Swap a 16-bit value from littleendian to native byte order.

If this is running on a littleendian system, `x` is returned unchanged.

This macro never references `x` more than once, avoiding side effects.

\\param x the value to swap, in littleendian byte order.
\\returns `x` in native byte order.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_Swap32LE"
 "Swap a 32-bit value from littleendian to native byte order.

If this is running on a littleendian system, `x` is returned unchanged.

This macro never references `x` more than once, avoiding side effects.

\\param x the value to swap, in littleendian byte order.
\\returns `x` in native byte order.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_Swap64LE"
 "Swap a 64-bit value from littleendian to native byte order.

If this is running on a littleendian system, `x` is returned unchanged.

This macro never references `x` more than once, avoiding side effects.

\\param x the value to swap, in littleendian byte order.
\\returns `x` in native byte order.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SwapFloatLE"
 "Swap a floating point value from littleendian to native byte order.

If this is running on a littleendian system, `x` is returned unchanged.

This macro never references `x` more than once, avoiding side effects.

\\param x the value to swap, in littleendian byte order.
\\returns `x` in native byte order.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_Swap16BE"
 "Swap a 16-bit value from bigendian to native byte order.

If this is running on a bigendian system, `x` is returned unchanged.

This macro never references `x` more than once, avoiding side effects.

\\param x the value to swap, in bigendian byte order.
\\returns `x` in native byte order.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_Swap32BE"
 "Swap a 32-bit value from bigendian to native byte order.

If this is running on a bigendian system, `x` is returned unchanged.

This macro never references `x` more than once, avoiding side effects.

\\param x the value to swap, in bigendian byte order.
\\returns `x` in native byte order.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_Swap64BE"
 "Swap a 64-bit value from bigendian to native byte order.

If this is running on a bigendian system, `x` is returned unchanged.

This macro never references `x` more than once, avoiding side effects.

\\param x the value to swap, in bigendian byte order.
\\returns `x` in native byte order.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SwapFloatBE"
 "Swap a floating point value from bigendian to native byte order.

If this is running on a bigendian system, `x` is returned unchanged.

This macro never references `x` more than once, avoiding side effects.

\\param x the value to swap, in bigendian byte order.
\\returns `x` in native byte order.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SetError" "Set the SDL error message for the current thread.

Calling this function will replace any previous error message that was set.

This function always returns false, since SDL frequently uses false to
signify a failing result, leading to this idiom:

```c
if (error_code) {
    return SDL_SetError(\"This operation has failed: %d\", error_code);
}
```

\\param fmt a printf()-style message format string.
\\param ... additional parameters matching % tokens in the `fmt` string, if
           any.
\\returns false.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ClearError
\\sa SDL_GetError
\\sa SDL_SetErrorV
")
(:FUNCTION "SDL_SetErrorV" "Set the SDL error message for the current thread.

Calling this function will replace any previous error message that was set.

\\param fmt a printf()-style message format string.
\\param ap a variable argument list.
\\returns false.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ClearError
\\sa SDL_GetError
\\sa SDL_SetError
")
(:FUNCTION "SDL_OutOfMemory"
 "Set an error indicating that memory allocation failed.

This function does not do any memory allocation.

\\returns false.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetError"
 "Retrieve a message about the last error that occurred on the current
thread.

It is possible for multiple errors to occur before calling SDL_GetError().
Only the last error is returned.

The message is only applicable when an SDL function has signaled an error.
You must check the return values of SDL function calls to determine when to
appropriately call SDL_GetError(). You should *not* use the results of
SDL_GetError() to decide if an error has occurred! Sometimes SDL will set
an error string even when reporting success.

SDL will *not* clear the error string for successful API calls. You *must*
check return values for failure cases before you can assume the error
string applies.

Error strings are set per-thread, so an error set in a different thread
will not interfere with the current thread's operation.

The returned value is a thread-local string which will remain valid until
the current thread's error string is changed. The caller should make a copy
if the value is needed after the next SDL API call.

\\returns a message with information about the specific error that occurred,
         or an empty string if there hasn't been an error message set since
         the last call to SDL_ClearError().

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ClearError
\\sa SDL_SetError
")
(:FUNCTION "SDL_ClearError" "Clear any previous error message for this thread.

\\returns true.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetError
\\sa SDL_SetError
")
(:FUNCTION "SDL_Unsupported"
 "A macro to standardize error reporting on unsupported operations.

This simply calls SDL_SetError() with a standardized error string, for
convenience, consistency, and clarity.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_InvalidParamError"
 "A macro to standardize error reporting on unsupported operations.

This simply calls SDL_SetError() with a standardized error string, for
convenience, consistency, and clarity.

A common usage pattern inside SDL is this:

```c
bool MyFunction(const char *str) {
    if (!str) {
        return SDL_InvalidParamError(\"str\");  // returns false.
    }
    DoSomething(str);
    return true;
}
```

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:ENUM "SDL_EventType" "The types of events that can be delivered.

\\since This enum is available since SDL 3.2.0.
")
(:STRUCT "SDL_CommonEvent" "Fields shared by every event

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_DisplayEvent" "Display state change event data (event.display.*)

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_WindowEvent" "Window state change event data (event.window.*)

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_KeyboardDeviceEvent"
 "Keyboard device event structure (event.kdevice.*)

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_KeyboardEvent" "Keyboard button event structure (event.key.*)

The `key` is the base SDL_Keycode generated by pressing the `scancode`
using the current keyboard layout, applying any options specified in
SDL_HINT_KEYCODE_OPTIONS. You can get the SDL_Keycode corresponding to the
event scancode and modifiers directly from the keyboard layout, bypassing
SDL_HINT_KEYCODE_OPTIONS, by calling SDL_GetKeyFromScancode().

\\since This struct is available since SDL 3.2.0.

\\sa SDL_GetKeyFromScancode
\\sa SDL_HINT_KEYCODE_OPTIONS
")
(:STRUCT "SDL_TextEditingEvent"
 "Keyboard text editing event structure (event.edit.*)

The start cursor is the position, in UTF-8 characters, where new typing
will be inserted into the editing text. The length is the number of UTF-8
characters that will be replaced by new typing.

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_TextEditingCandidatesEvent"
 "Keyboard IME candidates event structure (event.edit_candidates.*)

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_TextInputEvent"
 "Keyboard text input event structure (event.text.*)

This event will never be delivered unless text input is enabled by calling
SDL_StartTextInput(). Text input is disabled by default!

\\since This struct is available since SDL 3.2.0.

\\sa SDL_StartTextInput
\\sa SDL_StopTextInput
")
(:STRUCT "SDL_MouseDeviceEvent" "Mouse device event structure (event.mdevice.*)

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_MouseMotionEvent" "Mouse motion event structure (event.motion.*)

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_MouseButtonEvent" "Mouse button event structure (event.button.*)

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_MouseWheelEvent" "Mouse wheel event structure (event.wheel.*)

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_JoyAxisEvent"
 "Joystick axis motion event structure (event.jaxis.*)

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_JoyBallEvent"
 "Joystick trackball motion event structure (event.jball.*)

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_JoyHatEvent"
 "Joystick hat position change event structure (event.jhat.*)

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_JoyButtonEvent" "Joystick button event structure (event.jbutton.*)

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_JoyDeviceEvent" "Joystick device event structure (event.jdevice.*)

SDL will send JOYSTICK_ADDED events for devices that are already plugged in
during SDL_Init.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_GamepadDeviceEvent
")
(:STRUCT "SDL_JoyBatteryEvent"
 "Joystick battery level change event structure (event.jbattery.*)

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_GamepadAxisEvent"
 "Gamepad axis motion event structure (event.gaxis.*)

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_GamepadButtonEvent"
 "Gamepad button event structure (event.gbutton.*)

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_GamepadDeviceEvent"
 "Gamepad device event structure (event.gdevice.*)

Joysticks that are supported gamepads receive both an SDL_JoyDeviceEvent
and an SDL_GamepadDeviceEvent.

SDL will send GAMEPAD_ADDED events for joysticks that are already plugged
in during SDL_Init() and are recognized as gamepads. It will also send
events for joysticks that get gamepad mappings at runtime.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_JoyDeviceEvent
")
(:STRUCT "SDL_GamepadTouchpadEvent"
 "Gamepad touchpad event structure (event.gtouchpad.*)

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_GamepadSensorEvent"
 "Gamepad sensor event structure (event.gsensor.*)

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_AudioDeviceEvent" "Audio device event structure (event.adevice.*)

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_CameraDeviceEvent"
 "Camera device event structure (event.cdevice.*)

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_RenderEvent" "Renderer event structure (event.render.*)

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_TouchFingerEvent" "Touch finger event structure (event.tfinger.*)

Coordinates in this event are normalized. `x` and `y` are normalized to a
range between 0.0f and 1.0f, relative to the window, so (0,0) is the top
left and (1,1) is the bottom right. Delta coordinates `dx` and `dy` are
normalized in the ranges of -1.0f (traversed all the way from the bottom or
right to all the way up or left) to 1.0f (traversed all the way from the
top or left to all the way down or right).

Note that while the coordinates are _normalized_, they are not _clamped_,
which means in some circumstances you can get a value outside of this
range. For example, a renderer using logical presentation might give a
negative value when the touch is in the letterboxing. Some platforms might
report a touch outside of the window, which will also be outside of the
range.

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_PenProximityEvent"
 "Pressure-sensitive pen proximity event structure (event.pmotion.*)

When a pen becomes visible to the system (it is close enough to a tablet,
etc), SDL will send an SDL_EVENT_PEN_PROXIMITY_IN event with the new pen's
ID. This ID is valid until the pen leaves proximity again (has been removed
from the tablet's area, the tablet has been unplugged, etc). If the same
pen reenters proximity again, it will be given a new ID.

Note that \"proximity\" means \"close enough for the tablet to know the tool
is there.\" The pen touching and lifting off from the tablet while not
leaving the area are handled by SDL_EVENT_PEN_DOWN and SDL_EVENT_PEN_UP.

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_PenMotionEvent"
 "Pressure-sensitive pen motion event structure (event.pmotion.*)

Depending on the hardware, you may get motion events when the pen is not
touching a tablet, for tracking a pen even when it isn't drawing. You
should listen for SDL_EVENT_PEN_DOWN and SDL_EVENT_PEN_UP events, or check
`pen_state & SDL_PEN_INPUT_DOWN` to decide if a pen is \"drawing\" when
dealing with pen motion.

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_PenTouchEvent"
 "Pressure-sensitive pen touched event structure (event.ptouch.*)

These events come when a pen touches a surface (a tablet, etc), or lifts
off from one.

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_PenButtonEvent"
 "Pressure-sensitive pen button event structure (event.pbutton.*)

This is for buttons on the pen itself that the user might click. The pen
itself pressing down to draw triggers a SDL_EVENT_PEN_DOWN event instead.

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_PenAxisEvent"
 "Pressure-sensitive pen pressure / angle event structure (event.paxis.*)

You might get some of these events even if the pen isn't touching the
tablet.

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_DropEvent"
 "An event used to drop text or request a file open by the system
(event.drop.*)

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_ClipboardEvent"
 "An event triggered when the clipboard contents have changed
(event.clipboard.*)

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_SensorEvent" "Sensor event structure (event.sensor.*)

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_QuitEvent" "The \"quit requested\" event

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_UserEvent" "A user-defined event type (event.user.*)

This event is unique; it is never created by SDL, but only by the
application. The event can be pushed onto the event queue using
SDL_PushEvent(). The contents of the structure members are completely up to
the programmer; the only requirement is that '''type''' is a value obtained
from SDL_RegisterEvents().

\\since This struct is available since SDL 3.2.0.
")
(:FUNCTION "SDL_PumpEvents"
 "Pump the event loop, gathering events from the input devices.

This function updates the event queue and internal input device state.

SDL_PumpEvents() gathers all the pending input information from devices and
places it in the event queue. Without calls to SDL_PumpEvents() no events
would ever be placed on the queue. Often the need for calls to
SDL_PumpEvents() is hidden from the user since SDL_PollEvent() and
SDL_WaitEvent() implicitly call SDL_PumpEvents(). However, if you are not
polling or waiting for events (e.g. you are filtering them), then you must
call SDL_PumpEvents() to force an event queue update.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_PollEvent
\\sa SDL_WaitEvent
")
(:ENUM "SDL_EventAction" "The type of action to request from SDL_PeepEvents().

\\since This enum is available since SDL 3.2.0.
")
(:FUNCTION "SDL_PeepEvents"
 "Check the event queue for messages and optionally return them.

`action` may be any of the following:

- `SDL_ADDEVENT`: up to `numevents` events will be added to the back of the
  event queue.
- `SDL_PEEKEVENT`: `numevents` events at the front of the event queue,
  within the specified minimum and maximum type, will be returned to the
  caller and will _not_ be removed from the queue. If you pass NULL for
  `events`, then `numevents` is ignored and the total number of matching
  events will be returned.
- `SDL_GETEVENT`: up to `numevents` events at the front of the event queue,
  within the specified minimum and maximum type, will be returned to the
  caller and will be removed from the queue.

You may have to call SDL_PumpEvents() before calling this function.
Otherwise, the events may not be ready to be filtered when you call
SDL_PeepEvents().

\\param events destination buffer for the retrieved events, may be NULL to
              leave the events in the queue and return the number of events
              that would have been stored.
\\param numevents if action is SDL_ADDEVENT, the number of events to add
                 back to the event queue; if action is SDL_PEEKEVENT or
                 SDL_GETEVENT, the maximum number of events to retrieve.
\\param action action to take; see [[#action|Remarks]] for details.
\\param minType minimum value of the event type to be considered;
               SDL_EVENT_FIRST is a safe choice.
\\param maxType maximum value of the event type to be considered;
               SDL_EVENT_LAST is a safe choice.
\\returns the number of events actually stored or -1 on failure; call
         SDL_GetError() for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_PollEvent
\\sa SDL_PumpEvents
\\sa SDL_PushEvent
")
(:FUNCTION "SDL_HasEvent"
 "Check for the existence of a certain event type in the event queue.

If you need to check for a range of event types, use SDL_HasEvents()
instead.

\\param type the type of event to be queried; see SDL_EventType for details.
\\returns true if events matching `type` are present, or false if events
         matching `type` are not present.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_HasEvents
")
(:FUNCTION "SDL_HasEvents"
 "Check for the existence of certain event types in the event queue.

If you need to check for a single event type, use SDL_HasEvent() instead.

\\param minType the low end of event type to be queried, inclusive; see
               SDL_EventType for details.
\\param maxType the high end of event type to be queried, inclusive; see
               SDL_EventType for details.
\\returns true if events with type >= `minType` and <= `maxType` are
         present, or false if not.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_HasEvents
")
(:FUNCTION "SDL_FlushEvent"
 "Clear events of a specific type from the event queue.

This will unconditionally remove any events from the queue that match
`type`. If you need to remove a range of event types, use SDL_FlushEvents()
instead.

It's also normal to just ignore events you don't care about in your event
loop without calling this function.

This function only affects currently queued events. If you want to make
sure that all pending OS events are flushed, you can call SDL_PumpEvents()
on the main thread immediately before the flush call.

If you have user events with custom data that needs to be freed, you should
use SDL_PeepEvents() to remove and clean up those events before calling
this function.

\\param type the type of event to be cleared; see SDL_EventType for details.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_FlushEvents
")
(:FUNCTION "SDL_FlushEvents"
 "Clear events of a range of types from the event queue.

This will unconditionally remove any events from the queue that are in the
range of `minType` to `maxType`, inclusive. If you need to remove a single
event type, use SDL_FlushEvent() instead.

It's also normal to just ignore events you don't care about in your event
loop without calling this function.

This function only affects currently queued events. If you want to make
sure that all pending OS events are flushed, you can call SDL_PumpEvents()
on the main thread immediately before the flush call.

\\param minType the low end of event type to be cleared, inclusive; see
               SDL_EventType for details.
\\param maxType the high end of event type to be cleared, inclusive; see
               SDL_EventType for details.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_FlushEvent
")
(:FUNCTION "SDL_PollEvent" "Poll for currently pending events.

If `event` is not NULL, the next event is removed from the queue and stored
in the SDL_Event structure pointed to by `event`. The 1 returned refers to
this event, immediately stored in the SDL Event structure -- not an event
to follow.

If `event` is NULL, it simply returns 1 if there is an event in the queue,
but will not remove it from the queue.

As this function may implicitly call SDL_PumpEvents(), you can only call
this function in the thread that set the video mode.

SDL_PollEvent() is the favored way of receiving system events since it can
be done from the main loop and does not suspend the main loop while waiting
on an event to be posted.

The common practice is to fully process the event queue once every frame,
usually as a first step before updating the game's state:

```c
while (game_is_still_running) {
    SDL_Event event;
    while (SDL_PollEvent(&event)) {  // poll until all events are handled!
        // decide what to do with this event.
    }

    // update game state, draw the current frame
}
```

\\param event the SDL_Event structure to be filled with the next event from
             the queue, or NULL.
\\returns true if this got an event or false if there are none available.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_PushEvent
\\sa SDL_WaitEvent
\\sa SDL_WaitEventTimeout
")
(:FUNCTION "SDL_WaitEvent" "Wait indefinitely for the next available event.

If `event` is not NULL, the next event is removed from the queue and stored
in the SDL_Event structure pointed to by `event`.

As this function may implicitly call SDL_PumpEvents(), you can only call
this function in the thread that initialized the video subsystem.

\\param event the SDL_Event structure to be filled in with the next event
             from the queue, or NULL.
\\returns true on success or false if there was an error while waiting for
         events; call SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_PollEvent
\\sa SDL_PushEvent
\\sa SDL_WaitEventTimeout
")
(:FUNCTION "SDL_WaitEventTimeout"
 "Wait until the specified timeout (in milliseconds) for the next available
event.

If `event` is not NULL, the next event is removed from the queue and stored
in the SDL_Event structure pointed to by `event`.

As this function may implicitly call SDL_PumpEvents(), you can only call
this function in the thread that initialized the video subsystem.

The timeout is not guaranteed, the actual wait time could be longer due to
system scheduling.

\\param event the SDL_Event structure to be filled in with the next event
             from the queue, or NULL.
\\param timeoutMS the maximum number of milliseconds to wait for the next
                 available event.
\\returns true if this got an event or false if the timeout elapsed without
         any events available.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_PollEvent
\\sa SDL_PushEvent
\\sa SDL_WaitEvent
")
(:FUNCTION "SDL_PushEvent" "Add an event to the event queue.

The event queue can actually be used as a two way communication channel.
Not only can events be read from the queue, but the user can also push
their own events onto it. `event` is a pointer to the event structure you
wish to push onto the queue. The event is copied into the queue, and the
caller may dispose of the memory pointed to after SDL_PushEvent() returns.

Note: Pushing device input events onto the queue doesn't modify the state
of the device within SDL.

Note: Events pushed onto the queue with SDL_PushEvent() get passed through
the event filter but events added with SDL_PeepEvents() do not.

For pushing application-specific events, please use SDL_RegisterEvents() to
get an event type that does not conflict with other code that also wants
its own custom event types.

\\param event the SDL_Event to be added to the queue.
\\returns true on success, false if the event was filtered or on failure;
         call SDL_GetError() for more information. A common reason for
         error is the event queue being full.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_PeepEvents
\\sa SDL_PollEvent
\\sa SDL_RegisterEvents
")
(:FUNCTION "SDL_SetEventFilter"
 "Set up a filter to process all events before they are added to the internal
event queue.

If you just want to see events without modifying them or preventing them
from being queued, you should use SDL_AddEventWatch() instead.

If the filter function returns true when called, then the event will be
added to the internal queue. If it returns false, then the event will be
dropped from the queue, but the internal state will still be updated. This
allows selective filtering of dynamically arriving events.

**WARNING**: Be very careful of what you do in the event filter function,
as it may run in a different thread!

On platforms that support it, if the quit event is generated by an
interrupt signal (e.g. pressing Ctrl-C), it will be delivered to the
application at the next event poll.

Note: Disabled events never make it to the event filter function; see
SDL_SetEventEnabled().

Note: Events pushed onto the queue with SDL_PushEvent() get passed through
the event filter, but events pushed onto the queue with SDL_PeepEvents() do
not.

\\param filter an SDL_EventFilter function to call when an event happens.
\\param userdata a pointer that is passed to `filter`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_AddEventWatch
\\sa SDL_SetEventEnabled
\\sa SDL_GetEventFilter
\\sa SDL_PeepEvents
\\sa SDL_PushEvent
")
(:FUNCTION "SDL_GetEventFilter" "Query the current event filter.

This function can be used to \"chain\" filters, by saving the existing filter
before replacing it with a function that will call that saved filter.

\\param filter the current callback function will be stored here.
\\param userdata the pointer that is passed to the current event filter will
                be stored here.
\\returns true on success or false if there is no event filter set.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetEventFilter
")
(:FUNCTION "SDL_AddEventWatch"
 "Add a callback to be triggered when an event is added to the event queue.

`filter` will be called when an event happens, and its return value is
ignored.

**WARNING**: Be very careful of what you do in the event filter function,
as it may run in a different thread!

If the quit event is generated by a signal (e.g. SIGINT), it will bypass
the internal queue and be delivered to the watch callback immediately, and
arrive at the next event poll.

Note: the callback is called for events posted by the user through
SDL_PushEvent(), but not for disabled events, nor for events by a filter
callback set with SDL_SetEventFilter(), nor for events posted by the user
through SDL_PeepEvents().

\\param filter an SDL_EventFilter function to call when an event happens.
\\param userdata a pointer that is passed to `filter`.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RemoveEventWatch
\\sa SDL_SetEventFilter
")
(:FUNCTION "SDL_RemoveEventWatch"
 "Remove an event watch callback added with SDL_AddEventWatch().

This function takes the same input as SDL_AddEventWatch() to identify and
delete the corresponding callback.

\\param filter the function originally passed to SDL_AddEventWatch().
\\param userdata the pointer originally passed to SDL_AddEventWatch().

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_AddEventWatch
")
(:FUNCTION "SDL_FilterEvents"
 "Run a specific filter function on the current event queue, removing any
events for which the filter returns false.

See SDL_SetEventFilter() for more information. Unlike SDL_SetEventFilter(),
this function does not change the filter permanently, it only uses the
supplied filter until this function returns.

\\param filter the SDL_EventFilter function to call when an event happens.
\\param userdata a pointer that is passed to `filter`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetEventFilter
\\sa SDL_SetEventFilter
")
(:FUNCTION "SDL_SetEventEnabled" "Set the state of processing events by type.

\\param type the type of event; see SDL_EventType for details.
\\param enabled whether to process the event or not.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_EventEnabled
")
(:FUNCTION "SDL_EventEnabled" "Query the state of processing events by type.

\\param type the type of event; see SDL_EventType for details.
\\returns true if the event is being processed, false otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetEventEnabled
")
(:FUNCTION "SDL_RegisterEvents"
 "Allocate a set of user-defined events, and return the beginning event
number for that set of events.

\\param numevents the number of events to be allocated.
\\returns the beginning event number, or 0 if numevents is invalid or if
         there are not enough user-defined events left.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_PushEvent
")
(:FUNCTION "SDL_GetWindowFromEvent" "Get window associated with an event.

\\param event an event containing a `windowID`.
\\returns the associated window on success or NULL if there is none.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_PollEvent
\\sa SDL_WaitEvent
\\sa SDL_WaitEventTimeout
")
(:FUNCTION "SDL_GetBasePath"
 "Get the directory where the application was run from.

SDL caches the result of this call internally, but the first call to this
function is not necessarily fast, so plan accordingly.

**macOS and iOS Specific Functionality**: If the application is in a \".app\"
bundle, this function returns the Resource directory (e.g.
MyApp.app/Contents/Resources/). This behaviour can be overridden by adding
a property to the Info.plist file. Adding a string key with the name
SDL_FILESYSTEM_BASE_DIR_TYPE with a supported value will change the
behaviour.

Supported values for the SDL_FILESYSTEM_BASE_DIR_TYPE property (Given an
application in /Applications/SDLApp/MyApp.app):

- `resource`: bundle resource directory (the default). For example:
  `/Applications/SDLApp/MyApp.app/Contents/Resources`
- `bundle`: the Bundle directory. For example:
  `/Applications/SDLApp/MyApp.app/`
- `parent`: the containing directory of the bundle. For example:
  `/Applications/SDLApp/`

**Nintendo 3DS Specific Functionality**: This function returns \"romfs\"
directory of the application as it is uncommon to store resources outside
the executable. As such it is not a writable directory.

The returned path is guaranteed to end with a path separator ('\\\\' on
Windows, '/' on most other platforms).

\\returns an absolute path in UTF-8 encoding to the application data
         directory. NULL will be returned on error or when the platform
         doesn't implement this functionality, call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetPrefPath
")
(:FUNCTION "SDL_GetPrefPath"
 "Get the user-and-app-specific path where files can be written.

Get the \"pref dir\". This is meant to be where users can write personal
files (preferences and save games, etc) that are specific to your
application. This directory is unique per user, per application.

This function will decide the appropriate location in the native
filesystem, create the directory if necessary, and return a string of the
absolute path to the directory in UTF-8 encoding.

On Windows, the string might look like:

`C:\\\\Users\\\\bob\\\\AppData\\\\Roaming\\\\My Company\\\\My Program Name\\\\`

On Linux, the string might look like:

`/home/bob/.local/share/My Program Name/`

On macOS, the string might look like:

`/Users/bob/Library/Application Support/My Program Name/`

You should assume the path returned by this function is the only safe place
to write files (and that SDL_GetBasePath(), while it might be writable, or
even the parent of the returned path, isn't where you should be writing
things).

Both the org and app strings may become part of a directory name, so please
follow these rules:

- Try to use the same org string (_including case-sensitivity_) for all
  your applications that use this function.
- Always use a unique app string for each one, and make sure it never
  changes for an app once you've decided on it.
- Unicode characters are legal, as long as they are UTF-8 encoded, but...
- ...only use letters, numbers, and spaces. Avoid punctuation like \"Game
  Name 2: Bad Guy's Revenge!\" ... \"Game Name 2\" is sufficient.

The returned path is guaranteed to end with a path separator ('\\\\' on
Windows, '/' on most other platforms).

\\param org the name of your organization.
\\param app the name of your application.
\\returns a UTF-8 string of the user directory in platform-dependent
         notation. NULL if there's a problem (creating directory failed,
         etc.). This should be freed with SDL_free() when it is no longer
         needed.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetBasePath
")
(:ENUM "SDL_Folder"
 "The type of the OS-provided default folder for a specific purpose.

Note that the Trash folder isn't included here, because trashing files
usually involves extra OS-specific functionality to remember the file's
original location.

The folders supported per platform are:

|             | Windows | macOS/iOS | tvOS | Unix (XDG) | Haiku | Emscripten |
| ----------- | ------- | --------- | ---- | ---------- | ----- | ---------- |
| HOME        | X       | X         |      | X          | X     | X          |
| DESKTOP     | X       | X         |      | X          | X     |            |
| DOCUMENTS   | X       | X         |      | X          |       |            |
| DOWNLOADS   | Vista+  | X         |      | X          |       |            |
| MUSIC       | X       | X         |      | X          |       |            |
| PICTURES    | X       | X         |      | X          |       |            |
| PUBLICSHARE |         | X         |      | X          |       |            |
| SAVEDGAMES  | Vista+  |           |      |            |       |            |
| SCREENSHOTS | Vista+  |           |      |            |       |            |
| TEMPLATES   | X       | X         |      | X          |       |            |
| VIDEOS      | X       | X*        |      | X          |       |            |

Note that on macOS/iOS, the Videos folder is called \"Movies\".

\\since This enum is available since SDL 3.2.0.

\\sa SDL_GetUserFolder
")
(:FUNCTION "SDL_GetUserFolder"
 "Finds the most suitable user folder for a specific purpose.

Many OSes provide certain standard folders for certain purposes, such as
storing pictures, music or videos for a certain user. This function gives
the path for many of those special locations.

This function is specifically for _user_ folders, which are meant for the
user to access and manage. For application-specific folders, meant to hold
data for the application to manage, see SDL_GetBasePath() and
SDL_GetPrefPath().

The returned path is guaranteed to end with a path separator ('\\\\' on
Windows, '/' on most other platforms).

If NULL is returned, the error may be obtained with SDL_GetError().

\\param folder the type of folder to find.
\\returns either a null-terminated C string containing the full path to the
         folder, or NULL if an error happened.

\\since This function is available since SDL 3.2.0.
")
(:ENUM "SDL_PathType" "Types of filesystem entries.

Note that there may be other sorts of items on a filesystem: devices,
symlinks, named pipes, etc. They are currently reported as
SDL_PATHTYPE_OTHER.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_PathInfo
")
(:STRUCT "SDL_PathInfo" "Information about a path on the filesystem.

\\since This datatype is available since SDL 3.2.0.

\\sa SDL_GetPathInfo
\\sa SDL_GetStoragePathInfo
")
(:BITFIELD "SDL_GlobFlags" "Flags for path matching.

\\since This datatype is available since SDL 3.2.0.

\\sa SDL_GlobDirectory
\\sa SDL_GlobStorageDirectory
")
(:FUNCTION "SDL_CreateDirectory"
 "Create a directory, and any missing parent directories.

This reports success if `path` already exists as a directory.

If parent directories are missing, it will also create them. Note that if
this fails, it will not remove any parent directories it already made.

\\param path the path of the directory to create.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:ENUM "SDL_EnumerationResult" "Possible results from an enumeration callback.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_EnumerateDirectoryCallback
")
(:FUNCTION "SDL_EnumerateDirectory"
 "Enumerate a directory through a callback function.

This function provides every directory entry through an app-provided
callback, called once for each directory entry, until all results have been
provided or the callback returns either SDL_ENUM_SUCCESS or
SDL_ENUM_FAILURE.

This will return false if there was a system problem in general, or if a
callback returns SDL_ENUM_FAILURE. A successful return means a callback
returned SDL_ENUM_SUCCESS to halt enumeration, or all directory entries
were enumerated.

\\param path the path of the directory to enumerate.
\\param callback a function that is called for each entry in the directory.
\\param userdata a pointer that is passed to `callback`.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_RemovePath" "Remove a file or an empty directory.

Directories that are not empty will fail; this function will not recursely
delete directory trees.

\\param path the path to remove from the filesystem.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_RenamePath" "Rename a file or directory.

If the file at `newpath` already exists, it will replaced.

Note that this will not copy files across filesystems/drives/volumes, as
that is a much more complicated (and possibly time-consuming) operation.

Which is to say, if this function fails, SDL_CopyFile() to a temporary file
in the same directory as `newpath`, then SDL_RenamePath() from the
temporary file to `newpath` and SDL_RemovePath() on `oldpath` might work
for files. Renaming a non-empty directory across filesystems is
dramatically more complex, however.

\\param oldpath the old path.
\\param newpath the new path.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_CopyFile" "Copy a file.

If the file at `newpath` already exists, it will be overwritten with the
contents of the file at `oldpath`.

This function will block until the copy is complete, which might be a
significant time for large files on slow disks. On some platforms, the copy
can be handed off to the OS itself, but on others SDL might just open both
paths, and read from one and write to the other.

Note that this is not an atomic operation! If something tries to read from
`newpath` while the copy is in progress, it will see an incomplete copy of
the data, and if the calling thread terminates (or the power goes out)
during the copy, `newpath`'s previous contents will be gone, replaced with
an incomplete copy of the data. To avoid this risk, it is recommended that
the app copy to a temporary file in the same directory as `newpath`, and if
the copy is successful, use SDL_RenamePath() to replace `newpath` with the
temporary file. This will ensure that reads of `newpath` will either see a
complete copy of the data, or it will see the pre-copy state of `newpath`.

This function attempts to synchronize the newly-copied data to disk before
returning, if the platform allows it, so that the renaming trick will not
have a problem in a system crash or power failure, where the file could be
renamed but the contents never made it from the system file cache to the
physical disk.

If the copy fails for any reason, the state of `newpath` is undefined. It
might be half a copy, it might be the untouched data of what was already
there, or it might be a zero-byte file, etc.

\\param oldpath the old path.
\\param newpath the new path.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetPathInfo" "Get information about a filesystem path.

\\param path the path to query.
\\param info a pointer filled in with information about the path, or NULL to
            check for the existence of a file.
\\returns true on success or false if the file doesn't exist, or another
         failure; call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GlobDirectory"
 "Enumerate a directory tree, filtered by pattern, and return a list.

Files are filtered out if they don't match the string in `pattern`, which
may contain wildcard characters '\\*' (match everything) and '?' (match one
character). If pattern is NULL, no filtering is done and all results are
returned. Subdirectories are permitted, and are specified with a path
separator of '/'. Wildcard characters '\\*' and '?' never match a path
separator.

`flags` may be set to SDL_GLOB_CASEINSENSITIVE to make the pattern matching
case-insensitive.

The returned array is always NULL-terminated, for your iterating
convenience, but if `count` is non-NULL, on return it will contain the
number of items in the array, not counting the NULL terminator.

\\param path the path of the directory to enumerate.
\\param pattern the pattern that files in the directory must match. Can be
               NULL.
\\param flags `SDL_GLOB_*` bitflags that affect this search.
\\param count on return, will be set to the number of items in the returned
             array. Can be NULL.
\\returns an array of strings on success or NULL on failure; call
         SDL_GetError() for more information. This is a single allocation
         that should be freed with SDL_free() when it is no longer needed.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetCurrentDirectory"
 "Get what the system believes is the \"current working directory.\"

For systems without a concept of a current working directory, this will
still attempt to provide something reasonable.

SDL does not provide a means to _change_ the current working directory; for
platforms without this concept, this would cause surprises with file access
outside of SDL.

The returned path is guaranteed to end with a path separator ('\\\\' on
Windows, '/' on most other platforms).

\\returns a UTF-8 string of the current working directory in
         platform-dependent notation. NULL if there's a problem. This
         should be freed with SDL_free() when it is no longer needed.

\\since This function is available since SDL 3.2.0.
")
(:STRUCT "SDL_Gamepad" "The structure used to identify an SDL gamepad

\\since This struct is available since SDL 3.2.0.
")
(:ENUM "SDL_GamepadType" "Standard gamepad types.

This type does not necessarily map to first-party controllers from
Microsoft/Sony/Nintendo; in many cases, third-party controllers can report
as these, either because they were designed for a specific console, or they
simply most closely match that console's controllers (does it have A/B/X/Y
buttons or X/O/Square/Triangle? Does it have a touchpad? etc).
")
(:ENUM "SDL_GamepadButton" "The list of buttons available on a gamepad

For controllers that use a diamond pattern for the face buttons, the
south/east/west/north buttons below correspond to the locations in the
diamond pattern. For Xbox controllers, this would be A/B/X/Y, for Nintendo
Switch controllers, this would be B/A/Y/X, for PlayStation controllers this
would be Cross/Circle/Square/Triangle.

For controllers that don't use a diamond pattern for the face buttons, the
south/east/west/north buttons indicate the buttons labeled A, B, C, D, or
1, 2, 3, 4, or for controllers that aren't labeled, they are the primary,
secondary, etc. buttons.

The activate action is often the south button and the cancel action is
often the east button, but in some regions this is reversed, so your game
should allow remapping actions based on user preferences.

You can query the labels for the face buttons using
SDL_GetGamepadButtonLabel()

\\since This enum is available since SDL 3.2.0.
")
(:ENUM "SDL_GamepadButtonLabel" "The set of gamepad button labels

This isn't a complete set, just the face buttons to make it easy to show
button prompts.

For a complete set, you should look at the button and gamepad type and have
a set of symbols that work well with your art style.

\\since This enum is available since SDL 3.2.0.
")
(:ENUM "SDL_GamepadAxis" "The list of axes available on a gamepad

Thumbstick axis values range from SDL_JOYSTICK_AXIS_MIN to
SDL_JOYSTICK_AXIS_MAX, and are centered within ~8000 of zero, though
advanced UI will allow users to set or autodetect the dead zone, which
varies between gamepads.

Trigger axis values range from 0 (released) to SDL_JOYSTICK_AXIS_MAX (fully
pressed) when reported by SDL_GetGamepadAxis(). Note that this is not the
same range that will be reported by the lower-level SDL_GetJoystickAxis().

\\since This enum is available since SDL 3.2.0.
")
(:ENUM "SDL_GamepadBindingType" "Types of gamepad control bindings.

A gamepad is a collection of bindings that map arbitrary joystick buttons,
axes and hat switches to specific positions on a generic console-style
gamepad. This enum is used as part of SDL_GamepadBinding to specify those
mappings.

\\since This enum is available since SDL 3.2.0.
")
(:STRUCT "SDL_GamepadBinding"
 "A mapping between one joystick input to a gamepad control.

A gamepad has a collection of several bindings, to say, for example, when
joystick button number 5 is pressed, that should be treated like the
gamepad's \"start\" button.

SDL has these bindings built-in for many popular controllers, and can add
more with a simple text string. Those strings are parsed into a collection
of these structs to make it easier to operate on the data.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_GetGamepadBindings
")
(:FUNCTION "SDL_AddGamepadMapping"
 "Add support for gamepads that SDL is unaware of or change the binding of an
existing gamepad.

The mapping string has the format \"GUID,name,mapping\", where GUID is the
string value from SDL_GUIDToString(), name is the human readable string for
the device and mappings are gamepad mappings to joystick ones. Under
Windows there is a reserved GUID of \"xinput\" that covers all XInput
devices. The mapping format for joystick is:

- `bX`: a joystick button, index X
- `hX.Y`: hat X with value Y
- `aX`: axis X of the joystick

Buttons can be used as a gamepad axes and vice versa.

If a device with this GUID is already plugged in, SDL will generate an
SDL_EVENT_GAMEPAD_ADDED event.

This string shows an example of a valid mapping for a gamepad:

```c
\"341a3608000000000000504944564944,Afterglow PS3 Controller,a:b1,b:b2,y:b3,x:b0,start:b9,guide:b12,back:b8,dpup:h0.1,dpleft:h0.8,dpdown:h0.4,dpright:h0.2,leftshoulder:b4,rightshoulder:b5,leftstick:b10,rightstick:b11,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:b6,righttrigger:b7\"
```

\\param mapping the mapping string.
\\returns 1 if a new mapping is added, 0 if an existing mapping is updated,
         -1 on failure; call SDL_GetError() for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_AddGamepadMappingsFromFile
\\sa SDL_AddGamepadMappingsFromIO
\\sa SDL_GetGamepadMapping
\\sa SDL_GetGamepadMappingForGUID
\\sa SDL_HINT_GAMECONTROLLERCONFIG
\\sa SDL_HINT_GAMECONTROLLERCONFIG_FILE
\\sa SDL_EVENT_GAMEPAD_ADDED
")
(:FUNCTION "SDL_AddGamepadMappingsFromIO"
 "Load a set of gamepad mappings from an SDL_IOStream.

You can call this function several times, if needed, to load different
database files.

If a new mapping is loaded for an already known gamepad GUID, the later
version will overwrite the one currently loaded.

Any new mappings for already plugged in controllers will generate
SDL_EVENT_GAMEPAD_ADDED events.

Mappings not belonging to the current platform or with no platform field
specified will be ignored (i.e. mappings for Linux will be ignored in
Windows, etc).

This function will load the text database entirely in memory before
processing it, so take this into consideration if you are in a memory
constrained environment.

\\param src the data stream for the mappings to be added.
\\param closeio if true, calls SDL_CloseIO() on `src` before returning, even
               in the case of an error.
\\returns the number of mappings added or -1 on failure; call SDL_GetError()
         for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_AddGamepadMapping
\\sa SDL_AddGamepadMappingsFromFile
\\sa SDL_GetGamepadMapping
\\sa SDL_GetGamepadMappingForGUID
\\sa SDL_HINT_GAMECONTROLLERCONFIG
\\sa SDL_HINT_GAMECONTROLLERCONFIG_FILE
\\sa SDL_EVENT_GAMEPAD_ADDED
")
(:FUNCTION "SDL_AddGamepadMappingsFromFile"
 "Load a set of gamepad mappings from a file.

You can call this function several times, if needed, to load different
database files.

If a new mapping is loaded for an already known gamepad GUID, the later
version will overwrite the one currently loaded.

Any new mappings for already plugged in controllers will generate
SDL_EVENT_GAMEPAD_ADDED events.

Mappings not belonging to the current platform or with no platform field
specified will be ignored (i.e. mappings for Linux will be ignored in
Windows, etc).

\\param file the mappings file to load.
\\returns the number of mappings added or -1 on failure; call SDL_GetError()
         for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_AddGamepadMapping
\\sa SDL_AddGamepadMappingsFromIO
\\sa SDL_GetGamepadMapping
\\sa SDL_GetGamepadMappingForGUID
\\sa SDL_HINT_GAMECONTROLLERCONFIG
\\sa SDL_HINT_GAMECONTROLLERCONFIG_FILE
\\sa SDL_EVENT_GAMEPAD_ADDED
")
(:FUNCTION "SDL_ReloadGamepadMappings"
 "Reinitialize the SDL mapping database to its initial state.

This will generate gamepad events as needed if device mappings change.

\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetGamepadMappings" "Get the current gamepad mappings.

\\param count a pointer filled in with the number of mappings returned, can
             be NULL.
\\returns an array of the mapping strings, NULL-terminated, or NULL on
         failure; call SDL_GetError() for more information. This is a
         single allocation that should be freed with SDL_free() when it is
         no longer needed.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetGamepadMappingForGUID"
 "Get the gamepad mapping string for a given GUID.

\\param guid a structure containing the GUID for which a mapping is desired.
\\returns a mapping string or NULL on failure; call SDL_GetError() for more
         information. This should be freed with SDL_free() when it is no
         longer needed.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetJoystickGUIDForID
\\sa SDL_GetJoystickGUID
")
(:FUNCTION "SDL_GetGamepadMapping" "Get the current mapping of a gamepad.

Details about mappings are discussed with SDL_AddGamepadMapping().

\\param gamepad the gamepad you want to get the current mapping for.
\\returns a string that has the gamepad's mapping or NULL if no mapping is
         available; call SDL_GetError() for more information. This should
         be freed with SDL_free() when it is no longer needed.

\\since This function is available since SDL 3.2.0.

\\sa SDL_AddGamepadMapping
\\sa SDL_GetGamepadMappingForID
\\sa SDL_GetGamepadMappingForGUID
\\sa SDL_SetGamepadMapping
")
(:FUNCTION "SDL_SetGamepadMapping"
 "Set the current mapping of a joystick or gamepad.

Details about mappings are discussed with SDL_AddGamepadMapping().

\\param instance_id the joystick instance ID.
\\param mapping the mapping to use for this device, or NULL to clear the
               mapping.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_AddGamepadMapping
\\sa SDL_GetGamepadMapping
")
(:FUNCTION "SDL_HasGamepad" "Return whether a gamepad is currently connected.

\\returns true if a gamepad is connected, false otherwise.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepads
")
(:FUNCTION "SDL_GetGamepads" "Get a list of currently connected gamepads.

\\param count a pointer filled in with the number of gamepads returned, may
             be NULL.
\\returns a 0 terminated array of joystick instance IDs or NULL on failure;
         call SDL_GetError() for more information. This should be freed
         with SDL_free() when it is no longer needed.

\\since This function is available since SDL 3.2.0.

\\sa SDL_HasGamepad
\\sa SDL_OpenGamepad
")
(:FUNCTION "SDL_IsGamepad"
 "Check if the given joystick is supported by the gamepad interface.

\\param instance_id the joystick instance ID.
\\returns true if the given joystick is supported by the gamepad interface,
         false if it isn't or it's an invalid index.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetJoysticks
\\sa SDL_OpenGamepad
")
(:FUNCTION "SDL_GetGamepadNameForID"
 "Get the implementation dependent name of a gamepad.

This can be called before any gamepads are opened.

\\param instance_id the joystick instance ID.
\\returns the name of the selected gamepad. If no name can be found, this
         function returns NULL; call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepadName
\\sa SDL_GetGamepads
")
(:FUNCTION "SDL_GetGamepadPathForID"
 "Get the implementation dependent path of a gamepad.

This can be called before any gamepads are opened.

\\param instance_id the joystick instance ID.
\\returns the path of the selected gamepad. If no path can be found, this
         function returns NULL; call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepadPath
\\sa SDL_GetGamepads
")
(:FUNCTION "SDL_GetGamepadPlayerIndexForID" "Get the player index of a gamepad.

This can be called before any gamepads are opened.

\\param instance_id the joystick instance ID.
\\returns the player index of a gamepad, or -1 if it's not available.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepadPlayerIndex
\\sa SDL_GetGamepads
")
(:FUNCTION "SDL_GetGamepadGUIDForID"
 "Get the implementation-dependent GUID of a gamepad.

This can be called before any gamepads are opened.

\\param instance_id the joystick instance ID.
\\returns the GUID of the selected gamepad. If called on an invalid index,
         this function returns a zero GUID.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GUIDToString
\\sa SDL_GetGamepads
")
(:FUNCTION "SDL_GetGamepadVendorForID"
 "Get the USB vendor ID of a gamepad, if available.

This can be called before any gamepads are opened. If the vendor ID isn't
available this function returns 0.

\\param instance_id the joystick instance ID.
\\returns the USB vendor ID of the selected gamepad. If called on an invalid
         index, this function returns zero.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepadVendor
\\sa SDL_GetGamepads
")
(:FUNCTION "SDL_GetGamepadProductForID"
 "Get the USB product ID of a gamepad, if available.

This can be called before any gamepads are opened. If the product ID isn't
available this function returns 0.

\\param instance_id the joystick instance ID.
\\returns the USB product ID of the selected gamepad. If called on an
         invalid index, this function returns zero.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepadProduct
\\sa SDL_GetGamepads
")
(:FUNCTION "SDL_GetGamepadProductVersionForID"
 "Get the product version of a gamepad, if available.

This can be called before any gamepads are opened. If the product version
isn't available this function returns 0.

\\param instance_id the joystick instance ID.
\\returns the product version of the selected gamepad. If called on an
         invalid index, this function returns zero.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepadProductVersion
\\sa SDL_GetGamepads
")
(:FUNCTION "SDL_GetGamepadTypeForID" "Get the type of a gamepad.

This can be called before any gamepads are opened.

\\param instance_id the joystick instance ID.
\\returns the gamepad type.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepadType
\\sa SDL_GetGamepads
\\sa SDL_GetRealGamepadTypeForID
")
(:FUNCTION "SDL_GetRealGamepadTypeForID"
 "Get the type of a gamepad, ignoring any mapping override.

This can be called before any gamepads are opened.

\\param instance_id the joystick instance ID.
\\returns the gamepad type.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepadTypeForID
\\sa SDL_GetGamepads
\\sa SDL_GetRealGamepadType
")
(:FUNCTION "SDL_GetGamepadMappingForID" "Get the mapping of a gamepad.

This can be called before any gamepads are opened.

\\param instance_id the joystick instance ID.
\\returns the mapping string. Returns NULL if no mapping is available. This
         should be freed with SDL_free() when it is no longer needed.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepads
\\sa SDL_GetGamepadMapping
")
(:FUNCTION "SDL_OpenGamepad" "Open a gamepad for use.

\\param instance_id the joystick instance ID.
\\returns a gamepad identifier or NULL if an error occurred; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CloseGamepad
\\sa SDL_IsGamepad
")
(:FUNCTION "SDL_GetGamepadFromID"
 "Get the SDL_Gamepad associated with a joystick instance ID, if it has been
opened.

\\param instance_id the joystick instance ID of the gamepad.
\\returns an SDL_Gamepad on success or NULL on failure or if it hasn't been
         opened yet; call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetGamepadFromPlayerIndex"
 "Get the SDL_Gamepad associated with a player index.

\\param player_index the player index, which different from the instance ID.
\\returns the SDL_Gamepad associated with a player index.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepadPlayerIndex
\\sa SDL_SetGamepadPlayerIndex
")
(:FUNCTION "SDL_GetGamepadProperties"
 "Get the properties associated with an opened gamepad.

These properties are shared with the underlying joystick object.

The following read-only properties are provided by SDL:

- `SDL_PROP_GAMEPAD_CAP_MONO_LED_BOOLEAN`: true if this gamepad has an LED
  that has adjustable brightness
- `SDL_PROP_GAMEPAD_CAP_RGB_LED_BOOLEAN`: true if this gamepad has an LED
  that has adjustable color
- `SDL_PROP_GAMEPAD_CAP_PLAYER_LED_BOOLEAN`: true if this gamepad has a
  player LED
- `SDL_PROP_GAMEPAD_CAP_RUMBLE_BOOLEAN`: true if this gamepad has
  left/right rumble
- `SDL_PROP_GAMEPAD_CAP_TRIGGER_RUMBLE_BOOLEAN`: true if this gamepad has
  simple trigger rumble

\\param gamepad a gamepad identifier previously returned by
               SDL_OpenGamepad().
\\returns a valid property ID on success or 0 on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetGamepadID" "Get the instance ID of an opened gamepad.

\\param gamepad a gamepad identifier previously returned by
               SDL_OpenGamepad().
\\returns the instance ID of the specified gamepad on success or 0 on
         failure; call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetGamepadName"
 "Get the implementation-dependent name for an opened gamepad.

\\param gamepad a gamepad identifier previously returned by
               SDL_OpenGamepad().
\\returns the implementation dependent name for the gamepad, or NULL if
         there is no name or the identifier passed is invalid.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepadNameForID
")
(:FUNCTION "SDL_GetGamepadPath"
 "Get the implementation-dependent path for an opened gamepad.

\\param gamepad a gamepad identifier previously returned by
               SDL_OpenGamepad().
\\returns the implementation dependent path for the gamepad, or NULL if
         there is no path or the identifier passed is invalid.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepadPathForID
")
(:FUNCTION "SDL_GetGamepadType" "Get the type of an opened gamepad.

\\param gamepad the gamepad object to query.
\\returns the gamepad type, or SDL_GAMEPAD_TYPE_UNKNOWN if it's not
         available.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepadTypeForID
")
(:FUNCTION "SDL_GetRealGamepadType"
 "Get the type of an opened gamepad, ignoring any mapping override.

\\param gamepad the gamepad object to query.
\\returns the gamepad type, or SDL_GAMEPAD_TYPE_UNKNOWN if it's not
         available.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetRealGamepadTypeForID
")
(:FUNCTION "SDL_GetGamepadPlayerIndex"
 "Get the player index of an opened gamepad.

For XInput gamepads this returns the XInput user index.

\\param gamepad the gamepad object to query.
\\returns the player index for gamepad, or -1 if it's not available.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetGamepadPlayerIndex
")
(:FUNCTION "SDL_SetGamepadPlayerIndex"
 "Set the player index of an opened gamepad.

\\param gamepad the gamepad object to adjust.
\\param player_index player index to assign to this gamepad, or -1 to clear
                    the player index and turn off player LEDs.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepadPlayerIndex
")
(:FUNCTION "SDL_GetGamepadVendor"
 "Get the USB vendor ID of an opened gamepad, if available.

If the vendor ID isn't available this function returns 0.

\\param gamepad the gamepad object to query.
\\returns the USB vendor ID, or zero if unavailable.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepadVendorForID
")
(:FUNCTION "SDL_GetGamepadProduct"
 "Get the USB product ID of an opened gamepad, if available.

If the product ID isn't available this function returns 0.

\\param gamepad the gamepad object to query.
\\returns the USB product ID, or zero if unavailable.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepadProductForID
")
(:FUNCTION "SDL_GetGamepadProductVersion"
 "Get the product version of an opened gamepad, if available.

If the product version isn't available this function returns 0.

\\param gamepad the gamepad object to query.
\\returns the USB product version, or zero if unavailable.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepadProductVersionForID
")
(:FUNCTION "SDL_GetGamepadFirmwareVersion"
 "Get the firmware version of an opened gamepad, if available.

If the firmware version isn't available this function returns 0.

\\param gamepad the gamepad object to query.
\\returns the gamepad firmware version, or zero if unavailable.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetGamepadSerial"
 "Get the serial number of an opened gamepad, if available.

Returns the serial number of the gamepad, or NULL if it is not available.

\\param gamepad the gamepad object to query.
\\returns the serial number, or NULL if unavailable.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetGamepadSteamHandle"
 "Get the Steam Input handle of an opened gamepad, if available.

Returns an InputHandle_t for the gamepad that can be used with Steam Input
API: https://partner.steamgames.com/doc/api/ISteamInput

\\param gamepad the gamepad object to query.
\\returns the gamepad handle, or 0 if unavailable.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetGamepadConnectionState"
 "Get the connection state of a gamepad.

\\param gamepad the gamepad object to query.
\\returns the connection state on success or
         `SDL_JOYSTICK_CONNECTION_INVALID` on failure; call SDL_GetError()
         for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetGamepadPowerInfo" "Get the battery state of a gamepad.

You should never take a battery status as absolute truth. Batteries
(especially failing batteries) are delicate hardware, and the values
reported here are best estimates based on what that hardware reports. It's
not uncommon for older batteries to lose stored power much faster than it
reports, or completely drain when reporting it has 20 percent left, etc.

\\param gamepad the gamepad object to query.
\\param percent a pointer filled in with the percentage of battery life
               left, between 0 and 100, or NULL to ignore. This will be
               filled in with -1 we can't determine a value or there is no
               battery.
\\returns the current battery state.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GamepadConnected"
 "Check if a gamepad has been opened and is currently connected.

\\param gamepad a gamepad identifier previously returned by
               SDL_OpenGamepad().
\\returns true if the gamepad has been opened and is currently connected, or
         false if not.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetGamepadJoystick" "Get the underlying joystick from a gamepad.

This function will give you a SDL_Joystick object, which allows you to use
the SDL_Joystick functions with a SDL_Gamepad object. This would be useful
for getting a joystick's position at any given time, even if it hasn't
moved (moving it would produce an event, which would have the axis' value).

The pointer returned is owned by the SDL_Gamepad. You should not call
SDL_CloseJoystick() on it, for example, since doing so will likely cause
SDL to crash.

\\param gamepad the gamepad object that you want to get a joystick from.
\\returns an SDL_Joystick object, or NULL on failure; call SDL_GetError()
         for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SetGamepadEventsEnabled"
 "Set the state of gamepad event processing.

If gamepad events are disabled, you must call SDL_UpdateGamepads() yourself
and check the state of the gamepad when you want gamepad information.

\\param enabled whether to process gamepad events or not.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GamepadEventsEnabled
\\sa SDL_UpdateGamepads
")
(:FUNCTION "SDL_GamepadEventsEnabled"
 "Query the state of gamepad event processing.

If gamepad events are disabled, you must call SDL_UpdateGamepads() yourself
and check the state of the gamepad when you want gamepad information.

\\returns true if gamepad events are being processed, false otherwise.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetGamepadEventsEnabled
")
(:FUNCTION "SDL_GetGamepadBindings"
 "Get the SDL joystick layer bindings for a gamepad.

\\param gamepad a gamepad.
\\param count a pointer filled in with the number of bindings returned.
\\returns a NULL terminated array of pointers to bindings or NULL on
         failure; call SDL_GetError() for more information. This is a
         single allocation that should be freed with SDL_free() when it is
         no longer needed.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_UpdateGamepads"
 "Manually pump gamepad updates if not using the loop.

This function is called automatically by the event loop if events are
enabled. Under such circumstances, it will not be necessary to call this
function.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetGamepadTypeFromString"
 "Convert a string into SDL_GamepadType enum.

This function is called internally to translate SDL_Gamepad mapping strings
for the underlying joystick device into the consistent SDL_Gamepad mapping.
You do not normally need to call this function unless you are parsing
SDL_Gamepad mappings in your own code.

\\param str string representing a SDL_GamepadType type.
\\returns the SDL_GamepadType enum corresponding to the input string, or
         `SDL_GAMEPAD_TYPE_UNKNOWN` if no match was found.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepadStringForType
")
(:FUNCTION "SDL_GetGamepadStringForType"
 "Convert from an SDL_GamepadType enum to a string.

\\param type an enum value for a given SDL_GamepadType.
\\returns a string for the given type, or NULL if an invalid type is
         specified. The string returned is of the format used by
         SDL_Gamepad mapping strings.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepadTypeFromString
")
(:FUNCTION "SDL_GetGamepadAxisFromString"
 "Convert a string into SDL_GamepadAxis enum.

This function is called internally to translate SDL_Gamepad mapping strings
for the underlying joystick device into the consistent SDL_Gamepad mapping.
You do not normally need to call this function unless you are parsing
SDL_Gamepad mappings in your own code.

Note specially that \"righttrigger\" and \"lefttrigger\" map to
`SDL_GAMEPAD_AXIS_RIGHT_TRIGGER` and `SDL_GAMEPAD_AXIS_LEFT_TRIGGER`,
respectively.

\\param str string representing a SDL_Gamepad axis.
\\returns the SDL_GamepadAxis enum corresponding to the input string, or
         `SDL_GAMEPAD_AXIS_INVALID` if no match was found.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepadStringForAxis
")
(:FUNCTION "SDL_GetGamepadStringForAxis"
 "Convert from an SDL_GamepadAxis enum to a string.

\\param axis an enum value for a given SDL_GamepadAxis.
\\returns a string for the given axis, or NULL if an invalid axis is
         specified. The string returned is of the format used by
         SDL_Gamepad mapping strings.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepadAxisFromString
")
(:FUNCTION "SDL_GamepadHasAxis" "Query whether a gamepad has a given axis.

This merely reports whether the gamepad's mapping defined this axis, as
that is all the information SDL has about the physical device.

\\param gamepad a gamepad.
\\param axis an axis enum value (an SDL_GamepadAxis value).
\\returns true if the gamepad has this axis, false otherwise.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GamepadHasButton
\\sa SDL_GetGamepadAxis
")
(:FUNCTION "SDL_GetGamepadAxis"
 "Get the current state of an axis control on a gamepad.

The axis indices start at index 0.

For thumbsticks, the state is a value ranging from -32768 (up/left) to
32767 (down/right).

Triggers range from 0 when released to 32767 when fully pressed, and never
return a negative value. Note that this differs from the value reported by
the lower-level SDL_GetJoystickAxis(), which normally uses the full range.

\\param gamepad a gamepad.
\\param axis an axis index (one of the SDL_GamepadAxis values).
\\returns axis state (including 0) on success or 0 (also) on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GamepadHasAxis
\\sa SDL_GetGamepadButton
")
(:FUNCTION "SDL_GetGamepadButtonFromString"
 "Convert a string into an SDL_GamepadButton enum.

This function is called internally to translate SDL_Gamepad mapping strings
for the underlying joystick device into the consistent SDL_Gamepad mapping.
You do not normally need to call this function unless you are parsing
SDL_Gamepad mappings in your own code.

\\param str string representing a SDL_Gamepad axis.
\\returns the SDL_GamepadButton enum corresponding to the input string, or
         `SDL_GAMEPAD_BUTTON_INVALID` if no match was found.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepadStringForButton
")
(:FUNCTION "SDL_GetGamepadStringForButton"
 "Convert from an SDL_GamepadButton enum to a string.

\\param button an enum value for a given SDL_GamepadButton.
\\returns a string for the given button, or NULL if an invalid button is
         specified. The string returned is of the format used by
         SDL_Gamepad mapping strings.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepadButtonFromString
")
(:FUNCTION "SDL_GamepadHasButton" "Query whether a gamepad has a given button.

This merely reports whether the gamepad's mapping defined this button, as
that is all the information SDL has about the physical device.

\\param gamepad a gamepad.
\\param button a button enum value (an SDL_GamepadButton value).
\\returns true if the gamepad has this button, false otherwise.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GamepadHasAxis
")
(:FUNCTION "SDL_GetGamepadButton"
 "Get the current state of a button on a gamepad.

\\param gamepad a gamepad.
\\param button a button index (one of the SDL_GamepadButton values).
\\returns true if the button is pressed, false otherwise.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GamepadHasButton
\\sa SDL_GetGamepadAxis
")
(:FUNCTION "SDL_GetGamepadButtonLabelForType"
 "Get the label of a button on a gamepad.

\\param type the type of gamepad to check.
\\param button a button index (one of the SDL_GamepadButton values).
\\returns the SDL_GamepadButtonLabel enum corresponding to the button label.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepadButtonLabel
")
(:FUNCTION "SDL_GetGamepadButtonLabel" "Get the label of a button on a gamepad.

\\param gamepad a gamepad.
\\param button a button index (one of the SDL_GamepadButton values).
\\returns the SDL_GamepadButtonLabel enum corresponding to the button label.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepadButtonLabelForType
")
(:FUNCTION "SDL_GetNumGamepadTouchpads"
 "Get the number of touchpads on a gamepad.

\\param gamepad a gamepad.
\\returns number of touchpads.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetNumGamepadTouchpadFingers
")
(:FUNCTION "SDL_GetNumGamepadTouchpadFingers"
 "Get the number of supported simultaneous fingers on a touchpad on a game
gamepad.

\\param gamepad a gamepad.
\\param touchpad a touchpad.
\\returns number of supported simultaneous fingers.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepadTouchpadFinger
\\sa SDL_GetNumGamepadTouchpads
")
(:FUNCTION "SDL_GetGamepadTouchpadFinger"
 "Get the current state of a finger on a touchpad on a gamepad.

\\param gamepad a gamepad.
\\param touchpad a touchpad.
\\param finger a finger.
\\param down a pointer filled with true if the finger is down, false
            otherwise, may be NULL.
\\param x a pointer filled with the x position, normalized 0 to 1, with the
         origin in the upper left, may be NULL.
\\param y a pointer filled with the y position, normalized 0 to 1, with the
         origin in the upper left, may be NULL.
\\param pressure a pointer filled with pressure value, may be NULL.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetNumGamepadTouchpadFingers
")
(:FUNCTION "SDL_GamepadHasSensor"
 "Return whether a gamepad has a particular sensor.

\\param gamepad the gamepad to query.
\\param type the type of sensor to query.
\\returns true if the sensor exists, false otherwise.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepadSensorData
\\sa SDL_GetGamepadSensorDataRate
\\sa SDL_SetGamepadSensorEnabled
")
(:FUNCTION "SDL_SetGamepadSensorEnabled"
 "Set whether data reporting for a gamepad sensor is enabled.

\\param gamepad the gamepad to update.
\\param type the type of sensor to enable/disable.
\\param enabled whether data reporting should be enabled.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GamepadHasSensor
\\sa SDL_GamepadSensorEnabled
")
(:FUNCTION "SDL_GamepadSensorEnabled"
 "Query whether sensor data reporting is enabled for a gamepad.

\\param gamepad the gamepad to query.
\\param type the type of sensor to query.
\\returns true if the sensor is enabled, false otherwise.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetGamepadSensorEnabled
")
(:FUNCTION "SDL_GetGamepadSensorDataRate"
 "Get the data rate (number of events per second) of a gamepad sensor.

\\param gamepad the gamepad to query.
\\param type the type of sensor to query.
\\returns the data rate, or 0.0f if the data rate is not available.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetGamepadSensorData"
 "Get the current state of a gamepad sensor.

The number of values and interpretation of the data is sensor dependent.
See SDL_sensor.h for the details for each type of sensor.

\\param gamepad the gamepad to query.
\\param type the type of sensor to query.
\\param data a pointer filled with the current sensor state.
\\param num_values the number of values to write to data.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_RumbleGamepad" "Start a rumble effect on a gamepad.

Each call to this function cancels any previous rumble effect, and calling
it with 0 intensity stops any rumbling.

This function requires you to process SDL events or call
SDL_UpdateJoysticks() to update rumble state.

\\param gamepad the gamepad to vibrate.
\\param low_frequency_rumble the intensity of the low frequency (left)
                            rumble motor, from 0 to 0xFFFF.
\\param high_frequency_rumble the intensity of the high frequency (right)
                             rumble motor, from 0 to 0xFFFF.
\\param duration_ms the duration of the rumble effect, in milliseconds.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_RumbleGamepadTriggers"
 "Start a rumble effect in the gamepad's triggers.

Each call to this function cancels any previous trigger rumble effect, and
calling it with 0 intensity stops any rumbling.

Note that this is rumbling of the _triggers_ and not the gamepad as a
whole. This is currently only supported on Xbox One gamepads. If you want
the (more common) whole-gamepad rumble, use SDL_RumbleGamepad() instead.

This function requires you to process SDL events or call
SDL_UpdateJoysticks() to update rumble state.

\\param gamepad the gamepad to vibrate.
\\param left_rumble the intensity of the left trigger rumble motor, from 0
                   to 0xFFFF.
\\param right_rumble the intensity of the right trigger rumble motor, from 0
                    to 0xFFFF.
\\param duration_ms the duration of the rumble effect, in milliseconds.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RumbleGamepad
")
(:FUNCTION "SDL_SetGamepadLED" "Update a gamepad's LED color.

An example of a joystick LED is the light on the back of a PlayStation 4's
DualShock 4 controller.

For gamepads with a single color LED, the maximum of the RGB values will be
used as the LED brightness.

\\param gamepad the gamepad to update.
\\param red the intensity of the red LED.
\\param green the intensity of the green LED.
\\param blue the intensity of the blue LED.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SendGamepadEffect" "Send a gamepad specific effect packet.

\\param gamepad the gamepad to affect.
\\param data the data to send to the gamepad.
\\param size the size of the data to send to the gamepad.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_CloseGamepad"
 "Close a gamepad previously opened with SDL_OpenGamepad().

\\param gamepad a gamepad identifier previously returned by
               SDL_OpenGamepad().

\\since This function is available since SDL 3.2.0.

\\sa SDL_OpenGamepad
")
(:FUNCTION "SDL_GetGamepadAppleSFSymbolsNameForButton"
 "Return the sfSymbolsName for a given button on a gamepad on Apple
platforms.

\\param gamepad the gamepad to query.
\\param button a button on the gamepad.
\\returns the sfSymbolsName or NULL if the name can't be found.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepadAppleSFSymbolsNameForAxis
")
(:FUNCTION "SDL_GetGamepadAppleSFSymbolsNameForAxis"
 "Return the sfSymbolsName for a given axis on a gamepad on Apple platforms.

\\param gamepad the gamepad to query.
\\param axis an axis on the gamepad.
\\returns the sfSymbolsName or NULL if the name can't be found.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGamepadAppleSFSymbolsNameForButton
")
(:STRUCT "SDL_GPUDevice" "An opaque handle representing the SDL_GPU context.

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_GPUBuffer" "An opaque handle representing a buffer.

Used for vertices, indices, indirect draw commands, and general compute
data.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_CreateGPUBuffer
\\sa SDL_UploadToGPUBuffer
\\sa SDL_DownloadFromGPUBuffer
\\sa SDL_CopyGPUBufferToBuffer
\\sa SDL_BindGPUVertexBuffers
\\sa SDL_BindGPUIndexBuffer
\\sa SDL_BindGPUVertexStorageBuffers
\\sa SDL_BindGPUFragmentStorageBuffers
\\sa SDL_DrawGPUPrimitivesIndirect
\\sa SDL_DrawGPUIndexedPrimitivesIndirect
\\sa SDL_BindGPUComputeStorageBuffers
\\sa SDL_DispatchGPUComputeIndirect
\\sa SDL_ReleaseGPUBuffer
")
(:STRUCT "SDL_GPUTransferBuffer"
 "An opaque handle representing a transfer buffer.

Used for transferring data to and from the device.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_CreateGPUTransferBuffer
\\sa SDL_MapGPUTransferBuffer
\\sa SDL_UnmapGPUTransferBuffer
\\sa SDL_UploadToGPUBuffer
\\sa SDL_UploadToGPUTexture
\\sa SDL_DownloadFromGPUBuffer
\\sa SDL_DownloadFromGPUTexture
\\sa SDL_ReleaseGPUTransferBuffer
")
(:STRUCT "SDL_GPUTexture" "An opaque handle representing a texture.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_CreateGPUTexture
\\sa SDL_UploadToGPUTexture
\\sa SDL_DownloadFromGPUTexture
\\sa SDL_CopyGPUTextureToTexture
\\sa SDL_BindGPUVertexSamplers
\\sa SDL_BindGPUVertexStorageTextures
\\sa SDL_BindGPUFragmentSamplers
\\sa SDL_BindGPUFragmentStorageTextures
\\sa SDL_BindGPUComputeStorageTextures
\\sa SDL_GenerateMipmapsForGPUTexture
\\sa SDL_BlitGPUTexture
\\sa SDL_ReleaseGPUTexture
")
(:STRUCT "SDL_GPUSampler" "An opaque handle representing a sampler.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_CreateGPUSampler
\\sa SDL_BindGPUVertexSamplers
\\sa SDL_BindGPUFragmentSamplers
\\sa SDL_ReleaseGPUSampler
")
(:STRUCT "SDL_GPUShader"
 "An opaque handle representing a compiled shader object.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_CreateGPUShader
\\sa SDL_CreateGPUGraphicsPipeline
\\sa SDL_ReleaseGPUShader
")
(:STRUCT "SDL_GPUComputePipeline"
 "An opaque handle representing a compute pipeline.

Used during compute passes.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_CreateGPUComputePipeline
\\sa SDL_BindGPUComputePipeline
\\sa SDL_ReleaseGPUComputePipeline
")
(:STRUCT "SDL_GPUGraphicsPipeline"
 "An opaque handle representing a graphics pipeline.

Used during render passes.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_CreateGPUGraphicsPipeline
\\sa SDL_BindGPUGraphicsPipeline
\\sa SDL_ReleaseGPUGraphicsPipeline
")
(:STRUCT "SDL_GPUCommandBuffer" "An opaque handle representing a command buffer.

Most state is managed via command buffers. When setting state using a
command buffer, that state is local to the command buffer.

Commands only begin execution on the GPU once SDL_SubmitGPUCommandBuffer is
called. Once the command buffer is submitted, it is no longer valid to use
it.

Command buffers are executed in submission order. If you submit command
buffer A and then command buffer B all commands in A will begin executing
before any command in B begins executing.

In multi-threading scenarios, you should only access a command buffer on
the thread you acquired it from.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_AcquireGPUCommandBuffer
\\sa SDL_SubmitGPUCommandBuffer
\\sa SDL_SubmitGPUCommandBufferAndAcquireFence
")
(:STRUCT "SDL_GPURenderPass" "An opaque handle representing a render pass.

This handle is transient and should not be held or referenced after
SDL_EndGPURenderPass is called.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_BeginGPURenderPass
\\sa SDL_EndGPURenderPass
")
(:STRUCT "SDL_GPUComputePass" "An opaque handle representing a compute pass.

This handle is transient and should not be held or referenced after
SDL_EndGPUComputePass is called.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_BeginGPUComputePass
\\sa SDL_EndGPUComputePass
")
(:STRUCT "SDL_GPUCopyPass" "An opaque handle representing a copy pass.

This handle is transient and should not be held or referenced after
SDL_EndGPUCopyPass is called.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_BeginGPUCopyPass
\\sa SDL_EndGPUCopyPass
")
(:STRUCT "SDL_GPUFence" "An opaque handle representing a fence.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_SubmitGPUCommandBufferAndAcquireFence
\\sa SDL_QueryGPUFence
\\sa SDL_WaitForGPUFences
\\sa SDL_ReleaseGPUFence
")
(:ENUM "SDL_GPUPrimitiveType"
 "Specifies the primitive topology of a graphics pipeline.

If you are using POINTLIST you must include a point size output in the
vertex shader.

- For HLSL compiling to SPIRV you must decorate a float output with
  [[vk::builtin(\"PointSize\")]].
- For GLSL you must set the gl_PointSize builtin.
- For MSL you must include a float output with the [[point_size]]
  decorator.

Note that sized point topology is totally unsupported on D3D12. Any size
other than 1 will be ignored. In general, you should avoid using point
topology for both compatibility and performance reasons. You WILL regret
using it.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_CreateGPUGraphicsPipeline
")
(:ENUM "SDL_GPULoadOp"
 "Specifies how the contents of a texture attached to a render pass are
treated at the beginning of the render pass.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_BeginGPURenderPass
")
(:ENUM "SDL_GPUStoreOp"
 "Specifies how the contents of a texture attached to a render pass are
treated at the end of the render pass.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_BeginGPURenderPass
")
(:ENUM "SDL_GPUIndexElementSize"
 "Specifies the size of elements in an index buffer.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_CreateGPUGraphicsPipeline
")
(:ENUM "SDL_GPUTextureFormat" "Specifies the pixel format of a texture.

Texture format support varies depending on driver, hardware, and usage
flags. In general, you should use SDL_GPUTextureSupportsFormat to query if
a format is supported before using it. However, there are a few guaranteed
formats.

FIXME: Check universal support for 32-bit component formats FIXME: Check
universal support for SIMULTANEOUS_READ_WRITE

For SAMPLER usage, the following formats are universally supported:

- R8G8B8A8_UNORM
- B8G8R8A8_UNORM
- R8_UNORM
- R8_SNORM
- R8G8_UNORM
- R8G8_SNORM
- R8G8B8A8_SNORM
- R16_FLOAT
- R16G16_FLOAT
- R16G16B16A16_FLOAT
- R32_FLOAT
- R32G32_FLOAT
- R32G32B32A32_FLOAT
- R11G11B10_UFLOAT
- R8G8B8A8_UNORM_SRGB
- B8G8R8A8_UNORM_SRGB
- D16_UNORM

For COLOR_TARGET usage, the following formats are universally supported:

- R8G8B8A8_UNORM
- B8G8R8A8_UNORM
- R8_UNORM
- R16_FLOAT
- R16G16_FLOAT
- R16G16B16A16_FLOAT
- R32_FLOAT
- R32G32_FLOAT
- R32G32B32A32_FLOAT
- R8_UINT
- R8G8_UINT
- R8G8B8A8_UINT
- R16_UINT
- R16G16_UINT
- R16G16B16A16_UINT
- R8_INT
- R8G8_INT
- R8G8B8A8_INT
- R16_INT
- R16G16_INT
- R16G16B16A16_INT
- R8G8B8A8_UNORM_SRGB
- B8G8R8A8_UNORM_SRGB

For STORAGE usages, the following formats are universally supported:

- R8G8B8A8_UNORM
- R8G8B8A8_SNORM
- R16G16B16A16_FLOAT
- R32_FLOAT
- R32G32_FLOAT
- R32G32B32A32_FLOAT
- R8G8B8A8_UINT
- R16G16B16A16_UINT
- R8G8B8A8_INT
- R16G16B16A16_INT

For DEPTH_STENCIL_TARGET usage, the following formats are universally
supported:

- D16_UNORM
- Either (but not necessarily both!) D24_UNORM or D32_FLOAT
- Either (but not necessarily both!) D24_UNORM_S8_UINT or D32_FLOAT_S8_UINT

Unless D16_UNORM is sufficient for your purposes, always check which of
D24/D32 is supported before creating a depth-stencil texture!

\\since This enum is available since SDL 3.2.0.

\\sa SDL_CreateGPUTexture
\\sa SDL_GPUTextureSupportsFormat
")
(:BITFIELD "SDL_GPUTextureUsageFlags"
 "Specifies how a texture is intended to be used by the client.

A texture must have at least one usage flag. Note that some usage flag
combinations are invalid.

With regards to compute storage usage, READ | WRITE means that you can have
shader A that only writes into the texture and shader B that only reads
from the texture and bind the same texture to either shader respectively.
SIMULTANEOUS means that you can do reads and writes within the same shader
or compute pass. It also implies that atomic ops can be used, since those
are read-modify-write operations. If you use SIMULTANEOUS, you are
responsible for avoiding data races, as there is no data synchronization
within a compute pass. Note that SIMULTANEOUS usage is only supported by a
limited number of texture formats.

\\since This datatype is available since SDL 3.2.0.

\\sa SDL_CreateGPUTexture
")
(:ENUM "SDL_GPUTextureType" "Specifies the type of a texture.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_CreateGPUTexture
")
(:ENUM "SDL_GPUSampleCount" "Specifies the sample count of a texture.

Used in multisampling. Note that this value only applies when the texture
is used as a render target.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_CreateGPUTexture
\\sa SDL_GPUTextureSupportsSampleCount
")
(:ENUM "SDL_GPUCubeMapFace" "Specifies the face of a cube map.

Can be passed in as the layer field in texture-related structs.

\\since This enum is available since SDL 3.2.0.
")
(:BITFIELD "SDL_GPUBufferUsageFlags"
 "Specifies how a buffer is intended to be used by the client.

A buffer must have at least one usage flag. Note that some usage flag
combinations are invalid.

Unlike textures, READ | WRITE can be used for simultaneous read-write
usage. The same data synchronization concerns as textures apply.

If you use a STORAGE flag, the data in the buffer must respect std140
layout conventions. In practical terms this means you must ensure that vec3
and vec4 fields are 16-byte aligned.

\\since This datatype is available since SDL 3.2.0.

\\sa SDL_CreateGPUBuffer
")
(:ENUM "SDL_GPUTransferBufferUsage"
 "Specifies how a transfer buffer is intended to be used by the client.

Note that mapping and copying FROM an upload transfer buffer or TO a
download transfer buffer is undefined behavior.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_CreateGPUTransferBuffer
")
(:ENUM "SDL_GPUShaderStage"
 "Specifies which stage a shader program corresponds to.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_CreateGPUShader
")
(:BITFIELD "SDL_GPUShaderFormat" "Specifies the format of shader code.

Each format corresponds to a specific backend that accepts it.

\\since This datatype is available since SDL 3.2.0.

\\sa SDL_CreateGPUShader
")
(:ENUM "SDL_GPUVertexElementFormat" "Specifies the format of a vertex attribute.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_CreateGPUGraphicsPipeline
")
(:ENUM "SDL_GPUVertexInputRate"
 "Specifies the rate at which vertex attributes are pulled from buffers.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_CreateGPUGraphicsPipeline
")
(:ENUM "SDL_GPUFillMode" "Specifies the fill mode of the graphics pipeline.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_CreateGPUGraphicsPipeline
")
(:ENUM "SDL_GPUCullMode"
 "Specifies the facing direction in which triangle faces will be culled.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_CreateGPUGraphicsPipeline
")
(:ENUM "SDL_GPUFrontFace"
 "Specifies the vertex winding that will cause a triangle to be determined to
be front-facing.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_CreateGPUGraphicsPipeline
")
(:ENUM "SDL_GPUCompareOp"
 "Specifies a comparison operator for depth, stencil and sampler operations.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_CreateGPUGraphicsPipeline
")
(:ENUM "SDL_GPUStencilOp"
 "Specifies what happens to a stored stencil value if stencil tests fail or
pass.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_CreateGPUGraphicsPipeline
")
(:ENUM "SDL_GPUBlendOp"
 "Specifies the operator to be used when pixels in a render target are
blended with existing pixels in the texture.

The source color is the value written by the fragment shader. The
destination color is the value currently existing in the texture.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_CreateGPUGraphicsPipeline
")
(:ENUM "SDL_GPUBlendFactor"
 "Specifies a blending factor to be used when pixels in a render target are
blended with existing pixels in the texture.

The source color is the value written by the fragment shader. The
destination color is the value currently existing in the texture.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_CreateGPUGraphicsPipeline
")
(:TYPEDEF "SDL_GPUColorComponentFlags"
 "Specifies which color components are written in a graphics pipeline.

\\since This datatype is available since SDL 3.2.0.

\\sa SDL_CreateGPUGraphicsPipeline
")
(:ENUM "SDL_GPUFilter" "Specifies a filter operation used by a sampler.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_CreateGPUSampler
")
(:ENUM "SDL_GPUSamplerMipmapMode" "Specifies a mipmap mode used by a sampler.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_CreateGPUSampler
")
(:ENUM "SDL_GPUSamplerAddressMode"
 "Specifies behavior of texture sampling when the coordinates exceed the 0-1
range.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_CreateGPUSampler
")
(:ENUM "SDL_GPUPresentMode"
 "Specifies the timing that will be used to present swapchain textures to the
OS.

VSYNC mode will always be supported. IMMEDIATE and MAILBOX modes may not be
supported on certain systems.

It is recommended to query SDL_WindowSupportsGPUPresentMode after claiming
the window if you wish to change the present mode to IMMEDIATE or MAILBOX.

- VSYNC: Waits for vblank before presenting. No tearing is possible. If
  there is a pending image to present, the new image is enqueued for
  presentation. Disallows tearing at the cost of visual latency.
- IMMEDIATE: Immediately presents. Lowest latency option, but tearing may
  occur.
- MAILBOX: Waits for vblank before presenting. No tearing is possible. If
  there is a pending image to present, the pending image is replaced by the
  new image. Similar to VSYNC, but with reduced visual latency.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_SetGPUSwapchainParameters
\\sa SDL_WindowSupportsGPUPresentMode
\\sa SDL_WaitAndAcquireGPUSwapchainTexture
")
(:ENUM "SDL_GPUSwapchainComposition"
 "Specifies the texture format and colorspace of the swapchain textures.

SDR will always be supported. Other compositions may not be supported on
certain systems.

It is recommended to query SDL_WindowSupportsGPUSwapchainComposition after
claiming the window if you wish to change the swapchain composition from
SDR.

- SDR: B8G8R8A8 or R8G8B8A8 swapchain. Pixel values are in sRGB encoding.
- SDR_LINEAR: B8G8R8A8_SRGB or R8G8B8A8_SRGB swapchain. Pixel values are
  stored in memory in sRGB encoding but accessed in shaders in \"linear
  sRGB\" encoding which is sRGB but with a linear transfer function.
- HDR_EXTENDED_LINEAR: R16G16B16A16_FLOAT swapchain. Pixel values are in
  extended linear sRGB encoding and permits values outside of the [0, 1]
  range.
- HDR10_ST2084: A2R10G10B10 or A2B10G10R10 swapchain. Pixel values are in
  BT.2020 ST2084 (PQ) encoding.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_SetGPUSwapchainParameters
\\sa SDL_WindowSupportsGPUSwapchainComposition
\\sa SDL_WaitAndAcquireGPUSwapchainTexture
")
(:STRUCT "SDL_GPUViewport" "A structure specifying a viewport.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_SetGPUViewport
")
(:STRUCT "SDL_GPUTextureTransferInfo"
 "A structure specifying parameters related to transferring data to or from a
texture.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_UploadToGPUTexture
\\sa SDL_DownloadFromGPUTexture
")
(:STRUCT "SDL_GPUTransferBufferLocation"
 "A structure specifying a location in a transfer buffer.

Used when transferring buffer data to or from a transfer buffer.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_UploadToGPUBuffer
\\sa SDL_DownloadFromGPUBuffer
")
(:STRUCT "SDL_GPUTextureLocation"
 "A structure specifying a location in a texture.

Used when copying data from one texture to another.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_CopyGPUTextureToTexture
")
(:STRUCT "SDL_GPUTextureRegion" "A structure specifying a region of a texture.

Used when transferring data to or from a texture.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_UploadToGPUTexture
\\sa SDL_DownloadFromGPUTexture
\\sa SDL_CreateGPUTexture
")
(:STRUCT "SDL_GPUBlitRegion"
 "A structure specifying a region of a texture used in the blit operation.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_BlitGPUTexture
")
(:STRUCT "SDL_GPUBufferLocation" "A structure specifying a location in a buffer.

Used when copying data between buffers.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_CopyGPUBufferToBuffer
")
(:STRUCT "SDL_GPUBufferRegion" "A structure specifying a region of a buffer.

Used when transferring data to or from buffers.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_UploadToGPUBuffer
\\sa SDL_DownloadFromGPUBuffer
")
(:STRUCT "SDL_GPUIndirectDrawCommand"
 "A structure specifying the parameters of an indirect draw command.

Note that the `first_vertex` and `first_instance` parameters are NOT
compatible with built-in vertex/instance ID variables in shaders (for
example, SV_VertexID); GPU APIs and shader languages do not define these
built-in variables consistently, so if your shader depends on them, the
only way to keep behavior consistent and portable is to always pass 0 for
the correlating parameter in the draw calls.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_DrawGPUPrimitivesIndirect
")
(:STRUCT "SDL_GPUIndexedIndirectDrawCommand"
 "A structure specifying the parameters of an indexed indirect draw command.

Note that the `first_vertex` and `first_instance` parameters are NOT
compatible with built-in vertex/instance ID variables in shaders (for
example, SV_VertexID); GPU APIs and shader languages do not define these
built-in variables consistently, so if your shader depends on them, the
only way to keep behavior consistent and portable is to always pass 0 for
the correlating parameter in the draw calls.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_DrawGPUIndexedPrimitivesIndirect
")
(:STRUCT "SDL_GPUIndirectDispatchCommand"
 "A structure specifying the parameters of an indexed dispatch command.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_DispatchGPUComputeIndirect
")
(:STRUCT "SDL_GPUSamplerCreateInfo"
 "A structure specifying the parameters of a sampler.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateGPUSampler
")
(:STRUCT "SDL_GPUVertexBufferDescription"
 "A structure specifying the parameters of vertex buffers used in a graphics
pipeline.

When you call SDL_BindGPUVertexBuffers, you specify the binding slots of
the vertex buffers. For example if you called SDL_BindGPUVertexBuffers with
a first_slot of 2 and num_bindings of 3, the binding slots 2, 3, 4 would be
used by the vertex buffers you pass in.

Vertex attributes are linked to buffers via the buffer_slot field of
SDL_GPUVertexAttribute. For example, if an attribute has a buffer_slot of
0, then that attribute belongs to the vertex buffer bound at slot 0.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_GPUVertexAttribute
\\sa SDL_GPUVertexInputState
")
(:STRUCT "SDL_GPUVertexAttribute" "A structure specifying a vertex attribute.

All vertex attribute locations provided to an SDL_GPUVertexInputState must
be unique.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_GPUVertexBufferDescription
\\sa SDL_GPUVertexInputState
\\sa SDL_GPUVertexElementFormat
")
(:STRUCT "SDL_GPUVertexInputState"
 "A structure specifying the parameters of a graphics pipeline vertex input
state.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_GPUGraphicsPipelineCreateInfo
\\sa SDL_GPUVertexBufferDescription
\\sa SDL_GPUVertexAttribute
")
(:STRUCT "SDL_GPUStencilOpState"
 "A structure specifying the stencil operation state of a graphics pipeline.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_GPUDepthStencilState
")
(:STRUCT "SDL_GPUColorTargetBlendState"
 "A structure specifying the blend state of a color target.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_GPUColorTargetDescription
")
(:STRUCT "SDL_GPUShaderCreateInfo"
 "A structure specifying code and metadata for creating a shader object.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_CreateGPUShader
")
(:STRUCT "SDL_GPUTextureCreateInfo"
 "A structure specifying the parameters of a texture.

Usage flags can be bitwise OR'd together for combinations of usages. Note
that certain usage combinations are invalid, for example SAMPLER and
GRAPHICS_STORAGE.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_CreateGPUTexture
\\sa SDL_GPUTextureType
\\sa SDL_GPUTextureFormat
\\sa SDL_GPUTextureUsageFlags
\\sa SDL_GPUSampleCount
")
(:STRUCT "SDL_GPUBufferCreateInfo"
 "A structure specifying the parameters of a buffer.

Usage flags can be bitwise OR'd together for combinations of usages. Note
that certain combinations are invalid, for example VERTEX and INDEX.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_CreateGPUBuffer
\\sa SDL_GPUBufferUsageFlags
")
(:STRUCT "SDL_GPUTransferBufferCreateInfo"
 "A structure specifying the parameters of a transfer buffer.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_CreateGPUTransferBuffer
")
(:STRUCT "SDL_GPURasterizerState"
 "A structure specifying the parameters of the graphics pipeline rasterizer
state.

NOTE: Some backend APIs (D3D11/12) will enable depth clamping even if
enable_depth_clip is true. If you rely on this clamp+clip behavior,
consider enabling depth clip and then manually clamping depth in your
fragment shaders on Metal and Vulkan.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_GPUGraphicsPipelineCreateInfo
")
(:STRUCT "SDL_GPUMultisampleState"
 "A structure specifying the parameters of the graphics pipeline multisample
state.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_GPUGraphicsPipelineCreateInfo
")
(:STRUCT "SDL_GPUDepthStencilState"
 "A structure specifying the parameters of the graphics pipeline depth
stencil state.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_GPUGraphicsPipelineCreateInfo
")
(:STRUCT "SDL_GPUColorTargetDescription"
 "A structure specifying the parameters of color targets used in a graphics
pipeline.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_GPUGraphicsPipelineTargetInfo
")
(:STRUCT "SDL_GPUGraphicsPipelineTargetInfo"
 "A structure specifying the descriptions of render targets used in a
graphics pipeline.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_GPUGraphicsPipelineCreateInfo
")
(:STRUCT "SDL_GPUGraphicsPipelineCreateInfo"
 "A structure specifying the parameters of a graphics pipeline state.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_CreateGPUGraphicsPipeline
\\sa SDL_GPUShader
\\sa SDL_GPUVertexInputState
\\sa SDL_GPUPrimitiveType
\\sa SDL_GPURasterizerState
\\sa SDL_GPUMultisampleState
\\sa SDL_GPUDepthStencilState
\\sa SDL_GPUGraphicsPipelineTargetInfo
")
(:STRUCT "SDL_GPUComputePipelineCreateInfo"
 "A structure specifying the parameters of a compute pipeline state.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_CreateGPUComputePipeline
\\sa SDL_GPUShaderFormat
")
(:STRUCT "SDL_GPUColorTargetInfo"
 "A structure specifying the parameters of a color target used by a render
pass.

The load_op field determines what is done with the texture at the beginning
of the render pass.

- LOAD: Loads the data currently in the texture. Not recommended for
  multisample textures as it requires significant memory bandwidth.
- CLEAR: Clears the texture to a single color.
- DONT_CARE: The driver will do whatever it wants with the texture memory.
  This is a good option if you know that every single pixel will be touched
  in the render pass.

The store_op field determines what is done with the color results of the
render pass.

- STORE: Stores the results of the render pass in the texture. Not
  recommended for multisample textures as it requires significant memory
  bandwidth.
- DONT_CARE: The driver will do whatever it wants with the texture memory.
  This is often a good option for depth/stencil textures.
- RESOLVE: Resolves a multisample texture into resolve_texture, which must
  have a sample count of 1. Then the driver may discard the multisample
  texture memory. This is the most performant method of resolving a
  multisample target.
- RESOLVE_AND_STORE: Resolves a multisample texture into the
  resolve_texture, which must have a sample count of 1. Then the driver
  stores the multisample texture's contents. Not recommended as it requires
  significant memory bandwidth.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_BeginGPURenderPass
")
(:STRUCT "SDL_GPUDepthStencilTargetInfo"
 "A structure specifying the parameters of a depth-stencil target used by a
render pass.

The load_op field determines what is done with the depth contents of the
texture at the beginning of the render pass.

- LOAD: Loads the depth values currently in the texture.
- CLEAR: Clears the texture to a single depth.
- DONT_CARE: The driver will do whatever it wants with the memory. This is
  a good option if you know that every single pixel will be touched in the
  render pass.

The store_op field determines what is done with the depth results of the
render pass.

- STORE: Stores the depth results in the texture.
- DONT_CARE: The driver will do whatever it wants with the depth results.
  This is often a good option for depth/stencil textures that don't need to
  be reused again.

The stencil_load_op field determines what is done with the stencil contents
of the texture at the beginning of the render pass.

- LOAD: Loads the stencil values currently in the texture.
- CLEAR: Clears the stencil values to a single value.
- DONT_CARE: The driver will do whatever it wants with the memory. This is
  a good option if you know that every single pixel will be touched in the
  render pass.

The stencil_store_op field determines what is done with the stencil results
of the render pass.

- STORE: Stores the stencil results in the texture.
- DONT_CARE: The driver will do whatever it wants with the stencil results.
  This is often a good option for depth/stencil textures that don't need to
  be reused again.

Note that depth/stencil targets do not support multisample resolves.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_BeginGPURenderPass
")
(:STRUCT "SDL_GPUBlitInfo"
 "A structure containing parameters for a blit command.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_BlitGPUTexture
")
(:STRUCT "SDL_GPUBufferBinding"
 "A structure specifying parameters in a buffer binding call.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_BindGPUVertexBuffers
\\sa SDL_BindGPUIndexBuffer
")
(:STRUCT "SDL_GPUTextureSamplerBinding"
 "A structure specifying parameters in a sampler binding call.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_BindGPUVertexSamplers
\\sa SDL_BindGPUFragmentSamplers
")
(:STRUCT "SDL_GPUStorageBufferReadWriteBinding"
 "A structure specifying parameters related to binding buffers in a compute
pass.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_BeginGPUComputePass
")
(:STRUCT "SDL_GPUStorageTextureReadWriteBinding"
 "A structure specifying parameters related to binding textures in a compute
pass.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_BeginGPUComputePass
")
(:FUNCTION "SDL_GPUSupportsShaderFormats" "Checks for GPU runtime support.

\\param format_flags a bitflag indicating which shader formats the app is
                    able to provide.
\\param name the preferred GPU driver, or NULL to let SDL pick the optimal
            driver.
\\returns true if supported, false otherwise.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateGPUDevice
")
(:FUNCTION "SDL_GPUSupportsProperties" "Checks for GPU runtime support.

\\param props the properties to use.
\\returns true if supported, false otherwise.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateGPUDeviceWithProperties
")
(:FUNCTION "SDL_CreateGPUDevice" "Creates a GPU context.

\\param format_flags a bitflag indicating which shader formats the app is
                    able to provide.
\\param debug_mode enable debug mode properties and validations.
\\param name the preferred GPU driver, or NULL to let SDL pick the optimal
            driver.
\\returns a GPU context on success or NULL on failure; call SDL_GetError()
         for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGPUShaderFormats
\\sa SDL_GetGPUDeviceDriver
\\sa SDL_DestroyGPUDevice
\\sa SDL_GPUSupportsShaderFormats
")
(:FUNCTION "SDL_CreateGPUDeviceWithProperties" "Creates a GPU context.

These are the supported properties:

- `SDL_PROP_GPU_DEVICE_CREATE_DEBUGMODE_BOOLEAN`: enable debug mode
  properties and validations, defaults to true.
- `SDL_PROP_GPU_DEVICE_CREATE_PREFERLOWPOWER_BOOLEAN`: enable to prefer
  energy efficiency over maximum GPU performance, defaults to false.
- `SDL_PROP_GPU_DEVICE_CREATE_NAME_STRING`: the name of the GPU driver to
  use, if a specific one is desired.

These are the current shader format properties:

- `SDL_PROP_GPU_DEVICE_CREATE_SHADERS_PRIVATE_BOOLEAN`: The app is able to
  provide shaders for an NDA platform.
- `SDL_PROP_GPU_DEVICE_CREATE_SHADERS_SPIRV_BOOLEAN`: The app is able to
  provide SPIR-V shaders if applicable.
- `SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXBC_BOOLEAN`: The app is able to
  provide DXBC shaders if applicable
- `SDL_PROP_GPU_DEVICE_CREATE_SHADERS_DXIL_BOOLEAN`: The app is able to
  provide DXIL shaders if applicable.
- `SDL_PROP_GPU_DEVICE_CREATE_SHADERS_MSL_BOOLEAN`: The app is able to
  provide MSL shaders if applicable.
- `SDL_PROP_GPU_DEVICE_CREATE_SHADERS_METALLIB_BOOLEAN`: The app is able to
  provide Metal shader libraries if applicable.

With the D3D12 renderer:

- `SDL_PROP_GPU_DEVICE_CREATE_D3D12_SEMANTIC_NAME_STRING`: the prefix to
  use for all vertex semantics, default is \"TEXCOORD\".

\\param props the properties to use.
\\returns a GPU context on success or NULL on failure; call SDL_GetError()
         for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGPUShaderFormats
\\sa SDL_GetGPUDeviceDriver
\\sa SDL_DestroyGPUDevice
\\sa SDL_GPUSupportsProperties
")
(:FUNCTION "SDL_DestroyGPUDevice"
 "Destroys a GPU context previously returned by SDL_CreateGPUDevice.

\\param device a GPU Context to destroy.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateGPUDevice
")
(:FUNCTION "SDL_GetNumGPUDrivers"
 "Get the number of GPU drivers compiled into SDL.

\\returns the number of built in GPU drivers.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGPUDriver
")
(:FUNCTION "SDL_GetGPUDriver" "Get the name of a built in GPU driver.

The GPU drivers are presented in the order in which they are normally
checked during initialization.

The names of drivers are all simple, low-ASCII identifiers, like \"vulkan\",
\"metal\" or \"direct3d12\". These never have Unicode characters, and are not
meant to be proper names.

\\param index the index of a GPU driver.
\\returns the name of the GPU driver with the given **index**.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetNumGPUDrivers
")
(:FUNCTION "SDL_GetGPUDeviceDriver"
 "Returns the name of the backend used to create this GPU context.

\\param device a GPU context to query.
\\returns the name of the device's driver, or NULL on error.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetGPUShaderFormats"
 "Returns the supported shader formats for this GPU context.

\\param device a GPU context to query.
\\returns a bitflag indicating which shader formats the driver is able to
         consume.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_CreateGPUComputePipeline"
 "Creates a pipeline object to be used in a compute workflow.

Shader resource bindings must be authored to follow a particular order
depending on the shader format.

For SPIR-V shaders, use the following resource sets:

- 0: Sampled textures, followed by read-only storage textures, followed by
  read-only storage buffers
- 1: Read-write storage textures, followed by read-write storage buffers
- 2: Uniform buffers

For DXBC and DXIL shaders, use the following register order:

- (t[n], space0): Sampled textures, followed by read-only storage textures,
  followed by read-only storage buffers
- (u[n], space1): Read-write storage textures, followed by read-write
  storage buffers
- (b[n], space2): Uniform buffers

For MSL/metallib, use the following order:

- [[buffer]]: Uniform buffers, followed by read-only storage buffers,
  followed by read-write storage buffers
- [[texture]]: Sampled textures, followed by read-only storage textures,
  followed by read-write storage textures

There are optional properties that can be provided through `props`. These
are the supported properties:

- `SDL_PROP_GPU_COMPUTEPIPELINE_CREATE_NAME_STRING`: a name that can be
  displayed in debugging tools.

\\param device a GPU Context.
\\param createinfo a struct describing the state of the compute pipeline to
                  create.
\\returns a compute pipeline object on success, or NULL on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_BindGPUComputePipeline
\\sa SDL_ReleaseGPUComputePipeline
")
(:FUNCTION "SDL_CreateGPUGraphicsPipeline"
 "Creates a pipeline object to be used in a graphics workflow.

There are optional properties that can be provided through `props`. These
are the supported properties:

- `SDL_PROP_GPU_GRAPHICSPIPELINE_CREATE_NAME_STRING`: a name that can be
  displayed in debugging tools.

\\param device a GPU Context.
\\param createinfo a struct describing the state of the graphics pipeline to
                  create.
\\returns a graphics pipeline object on success, or NULL on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateGPUShader
\\sa SDL_BindGPUGraphicsPipeline
\\sa SDL_ReleaseGPUGraphicsPipeline
")
(:FUNCTION "SDL_CreateGPUSampler"
 "Creates a sampler object to be used when binding textures in a graphics
workflow.

There are optional properties that can be provided through `props`. These
are the supported properties:

- `SDL_PROP_GPU_SAMPLER_CREATE_NAME_STRING`: a name that can be displayed
  in debugging tools.

\\param device a GPU Context.
\\param createinfo a struct describing the state of the sampler to create.
\\returns a sampler object on success, or NULL on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_BindGPUVertexSamplers
\\sa SDL_BindGPUFragmentSamplers
\\sa SDL_ReleaseGPUSampler
")
(:FUNCTION "SDL_CreateGPUShader"
 "Creates a shader to be used when creating a graphics pipeline.

Shader resource bindings must be authored to follow a particular order
depending on the shader format.

For SPIR-V shaders, use the following resource sets:

For vertex shaders:

- 0: Sampled textures, followed by storage textures, followed by storage
  buffers
- 1: Uniform buffers

For fragment shaders:

- 2: Sampled textures, followed by storage textures, followed by storage
  buffers
- 3: Uniform buffers

For DXBC and DXIL shaders, use the following register order:

For vertex shaders:

- (t[n], space0): Sampled textures, followed by storage textures, followed
  by storage buffers
- (s[n], space0): Samplers with indices corresponding to the sampled
  textures
- (b[n], space1): Uniform buffers

For pixel shaders:

- (t[n], space2): Sampled textures, followed by storage textures, followed
  by storage buffers
- (s[n], space2): Samplers with indices corresponding to the sampled
  textures
- (b[n], space3): Uniform buffers

For MSL/metallib, use the following order:

- [[texture]]: Sampled textures, followed by storage textures
- [[sampler]]: Samplers with indices corresponding to the sampled textures
- [[buffer]]: Uniform buffers, followed by storage buffers. Vertex buffer 0
  is bound at [[buffer(14)]], vertex buffer 1 at [[buffer(15)]], and so on.
  Rather than manually authoring vertex buffer indices, use the
  [[stage_in]] attribute which will automatically use the vertex input
  information from the SDL_GPUGraphicsPipeline.

Shader semantics other than system-value semantics do not matter in D3D12
and for ease of use the SDL implementation assumes that non system-value
semantics will all be TEXCOORD. If you are using HLSL as the shader source
language, your vertex semantics should start at TEXCOORD0 and increment
like so: TEXCOORD1, TEXCOORD2, etc. If you wish to change the semantic
prefix to something other than TEXCOORD you can use
SDL_PROP_GPU_DEVICE_CREATE_D3D12_SEMANTIC_NAME_STRING with
SDL_CreateGPUDeviceWithProperties().

There are optional properties that can be provided through `props`. These
are the supported properties:

- `SDL_PROP_GPU_SHADER_CREATE_NAME_STRING`: a name that can be displayed in
  debugging tools.

\\param device a GPU Context.
\\param createinfo a struct describing the state of the shader to create.
\\returns a shader object on success, or NULL on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateGPUGraphicsPipeline
\\sa SDL_ReleaseGPUShader
")
(:FUNCTION "SDL_CreateGPUTexture"
 "Creates a texture object to be used in graphics or compute workflows.

The contents of this texture are undefined until data is written to the
texture.

Note that certain combinations of usage flags are invalid. For example, a
texture cannot have both the SAMPLER and GRAPHICS_STORAGE_READ flags.

If you request a sample count higher than the hardware supports, the
implementation will automatically fall back to the highest available sample
count.

There are optional properties that can be provided through
SDL_GPUTextureCreateInfo's `props`. These are the supported properties:

- `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_R_FLOAT`: (Direct3D 12 only) if
  the texture usage is SDL_GPU_TEXTUREUSAGE_COLOR_TARGET, clear the texture
  to a color with this red intensity. Defaults to zero.
- `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_G_FLOAT`: (Direct3D 12 only) if
  the texture usage is SDL_GPU_TEXTUREUSAGE_COLOR_TARGET, clear the texture
  to a color with this green intensity. Defaults to zero.
- `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_B_FLOAT`: (Direct3D 12 only) if
  the texture usage is SDL_GPU_TEXTUREUSAGE_COLOR_TARGET, clear the texture
  to a color with this blue intensity. Defaults to zero.
- `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_A_FLOAT`: (Direct3D 12 only) if
  the texture usage is SDL_GPU_TEXTUREUSAGE_COLOR_TARGET, clear the texture
  to a color with this alpha intensity. Defaults to zero.
- `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_DEPTH_FLOAT`: (Direct3D 12 only)
  if the texture usage is SDL_GPU_TEXTUREUSAGE_DEPTH_STENCIL_TARGET, clear
  the texture to a depth of this value. Defaults to zero.
- `SDL_PROP_GPU_TEXTURE_CREATE_D3D12_CLEAR_STENCIL_UINT8`: (Direct3D 12
  only) if the texture usage is SDL_GPU_TEXTUREUSAGE_DEPTH_STENCIL_TARGET,
  clear the texture to a stencil of this value. Defaults to zero.
- `SDL_PROP_GPU_TEXTURE_CREATE_NAME_STRING`: a name that can be displayed
  in debugging tools.

\\param device a GPU Context.
\\param createinfo a struct describing the state of the texture to create.
\\returns a texture object on success, or NULL on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_UploadToGPUTexture
\\sa SDL_DownloadFromGPUTexture
\\sa SDL_BindGPUVertexSamplers
\\sa SDL_BindGPUVertexStorageTextures
\\sa SDL_BindGPUFragmentSamplers
\\sa SDL_BindGPUFragmentStorageTextures
\\sa SDL_BindGPUComputeStorageTextures
\\sa SDL_BlitGPUTexture
\\sa SDL_ReleaseGPUTexture
\\sa SDL_GPUTextureSupportsFormat
")
(:FUNCTION "SDL_CreateGPUBuffer"
 "Creates a buffer object to be used in graphics or compute workflows.

The contents of this buffer are undefined until data is written to the
buffer.

Note that certain combinations of usage flags are invalid. For example, a
buffer cannot have both the VERTEX and INDEX flags.

If you use a STORAGE flag, the data in the buffer must respect std140
layout conventions. In practical terms this means you must ensure that vec3
and vec4 fields are 16-byte aligned.

For better understanding of underlying concepts and memory management with
SDL GPU API, you may refer
[this blog post](https://moonside.games/posts/sdl-gpu-concepts-cycling/)
.

There are optional properties that can be provided through `props`. These
are the supported properties:

- `SDL_PROP_GPU_BUFFER_CREATE_NAME_STRING`: a name that can be displayed in
  debugging tools.

\\param device a GPU Context.
\\param createinfo a struct describing the state of the buffer to create.
\\returns a buffer object on success, or NULL on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_UploadToGPUBuffer
\\sa SDL_DownloadFromGPUBuffer
\\sa SDL_CopyGPUBufferToBuffer
\\sa SDL_BindGPUVertexBuffers
\\sa SDL_BindGPUIndexBuffer
\\sa SDL_BindGPUVertexStorageBuffers
\\sa SDL_BindGPUFragmentStorageBuffers
\\sa SDL_DrawGPUPrimitivesIndirect
\\sa SDL_DrawGPUIndexedPrimitivesIndirect
\\sa SDL_BindGPUComputeStorageBuffers
\\sa SDL_DispatchGPUComputeIndirect
\\sa SDL_ReleaseGPUBuffer
")
(:FUNCTION "SDL_CreateGPUTransferBuffer"
 "Creates a transfer buffer to be used when uploading to or downloading from
graphics resources.

Download buffers can be particularly expensive to create, so it is good
practice to reuse them if data will be downloaded regularly.

There are optional properties that can be provided through `props`. These
are the supported properties:

- `SDL_PROP_GPU_TRANSFERBUFFER_CREATE_NAME_STRING`: a name that can be
  displayed in debugging tools.

\\param device a GPU Context.
\\param createinfo a struct describing the state of the transfer buffer to
                  create.
\\returns a transfer buffer on success, or NULL on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_UploadToGPUBuffer
\\sa SDL_DownloadFromGPUBuffer
\\sa SDL_UploadToGPUTexture
\\sa SDL_DownloadFromGPUTexture
\\sa SDL_ReleaseGPUTransferBuffer
")
(:FUNCTION "SDL_SetGPUBufferName"
 "Sets an arbitrary string constant to label a buffer.

You should use SDL_PROP_GPU_BUFFER_CREATE_NAME_STRING with
SDL_CreateGPUBuffer instead of this function to avoid thread safety issues.

\\param device a GPU Context.
\\param buffer a buffer to attach the name to.
\\param text a UTF-8 string constant to mark as the name of the buffer.

\\threadsafety This function is not thread safe, you must make sure the
              buffer is not simultaneously used by any other thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateGPUBuffer
")
(:FUNCTION "SDL_SetGPUTextureName"
 "Sets an arbitrary string constant to label a texture.

You should use SDL_PROP_GPU_TEXTURE_CREATE_NAME_STRING with
SDL_CreateGPUTexture instead of this function to avoid thread safety
issues.

\\param device a GPU Context.
\\param texture a texture to attach the name to.
\\param text a UTF-8 string constant to mark as the name of the texture.

\\threadsafety This function is not thread safe, you must make sure the
              texture is not simultaneously used by any other thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateGPUTexture
")
(:FUNCTION "SDL_InsertGPUDebugLabel"
 "Inserts an arbitrary string label into the command buffer callstream.

Useful for debugging.

\\param command_buffer a command buffer.
\\param text a UTF-8 string constant to insert as the label.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_PushGPUDebugGroup" "Begins a debug group with an arbitary name.

Used for denoting groups of calls when viewing the command buffer
callstream in a graphics debugging tool.

Each call to SDL_PushGPUDebugGroup must have a corresponding call to
SDL_PopGPUDebugGroup.

On some backends (e.g. Metal), pushing a debug group during a
render/blit/compute pass will create a group that is scoped to the native
pass rather than the command buffer. For best results, if you push a debug
group during a pass, always pop it in the same pass.

\\param command_buffer a command buffer.
\\param name a UTF-8 string constant that names the group.

\\since This function is available since SDL 3.2.0.

\\sa SDL_PopGPUDebugGroup
")
(:FUNCTION "SDL_PopGPUDebugGroup" "Ends the most-recently pushed debug group.

\\param command_buffer a command buffer.

\\since This function is available since SDL 3.2.0.

\\sa SDL_PushGPUDebugGroup
")
(:FUNCTION "SDL_ReleaseGPUTexture"
 "Frees the given texture as soon as it is safe to do so.

You must not reference the texture after calling this function.

\\param device a GPU context.
\\param texture a texture to be destroyed.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ReleaseGPUSampler"
 "Frees the given sampler as soon as it is safe to do so.

You must not reference the sampler after calling this function.

\\param device a GPU context.
\\param sampler a sampler to be destroyed.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ReleaseGPUBuffer"
 "Frees the given buffer as soon as it is safe to do so.

You must not reference the buffer after calling this function.

\\param device a GPU context.
\\param buffer a buffer to be destroyed.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ReleaseGPUTransferBuffer"
 "Frees the given transfer buffer as soon as it is safe to do so.

You must not reference the transfer buffer after calling this function.

\\param device a GPU context.
\\param transfer_buffer a transfer buffer to be destroyed.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ReleaseGPUComputePipeline"
 "Frees the given compute pipeline as soon as it is safe to do so.

You must not reference the compute pipeline after calling this function.

\\param device a GPU context.
\\param compute_pipeline a compute pipeline to be destroyed.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ReleaseGPUShader"
 "Frees the given shader as soon as it is safe to do so.

You must not reference the shader after calling this function.

\\param device a GPU context.
\\param shader a shader to be destroyed.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ReleaseGPUGraphicsPipeline"
 "Frees the given graphics pipeline as soon as it is safe to do so.

You must not reference the graphics pipeline after calling this function.

\\param device a GPU context.
\\param graphics_pipeline a graphics pipeline to be destroyed.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_AcquireGPUCommandBuffer" "Acquire a command buffer.

This command buffer is managed by the implementation and should not be
freed by the user. The command buffer may only be used on the thread it was
acquired on. The command buffer should be submitted on the thread it was
acquired on.

It is valid to acquire multiple command buffers on the same thread at once.
In fact a common design pattern is to acquire two command buffers per frame
where one is dedicated to render and compute passes and the other is
dedicated to copy passes and other preparatory work such as generating
mipmaps. Interleaving commands between the two command buffers reduces the
total amount of passes overall which improves rendering performance.

\\param device a GPU context.
\\returns a command buffer, or NULL on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SubmitGPUCommandBuffer
\\sa SDL_SubmitGPUCommandBufferAndAcquireFence
")
(:FUNCTION "SDL_PushGPUVertexUniformData"
 "Pushes data to a vertex uniform slot on the command buffer.

Subsequent draw calls will use this uniform data.

The data being pushed must respect std140 layout conventions. In practical
terms this means you must ensure that vec3 and vec4 fields are 16-byte
aligned.

\\param command_buffer a command buffer.
\\param slot_index the vertex uniform slot to push data to.
\\param data client data to write.
\\param length the length of the data to write.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_PushGPUFragmentUniformData"
 "Pushes data to a fragment uniform slot on the command buffer.

Subsequent draw calls will use this uniform data.

The data being pushed must respect std140 layout conventions. In practical
terms this means you must ensure that vec3 and vec4 fields are 16-byte
aligned.

\\param command_buffer a command buffer.
\\param slot_index the fragment uniform slot to push data to.
\\param data client data to write.
\\param length the length of the data to write.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_PushGPUComputeUniformData"
 "Pushes data to a uniform slot on the command buffer.

Subsequent draw calls will use this uniform data.

The data being pushed must respect std140 layout conventions. In practical
terms this means you must ensure that vec3 and vec4 fields are 16-byte
aligned.

\\param command_buffer a command buffer.
\\param slot_index the uniform slot to push data to.
\\param data client data to write.
\\param length the length of the data to write.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_BeginGPURenderPass" "Begins a render pass on a command buffer.

A render pass consists of a set of texture subresources (or depth slices in
the 3D texture case) which will be rendered to during the render pass,
along with corresponding clear values and load/store operations. All
operations related to graphics pipelines must take place inside of a render
pass. A default viewport and scissor state are automatically set when this
is called. You cannot begin another render pass, or begin a compute pass or
copy pass until you have ended the render pass.

\\param command_buffer a command buffer.
\\param color_target_infos an array of texture subresources with
                          corresponding clear values and load/store ops.
\\param num_color_targets the number of color targets in the
                         color_target_infos array.
\\param depth_stencil_target_info a texture subresource with corresponding
                                 clear value and load/store ops, may be
                                 NULL.
\\returns a render pass handle.

\\since This function is available since SDL 3.2.0.

\\sa SDL_EndGPURenderPass
")
(:FUNCTION "SDL_BindGPUGraphicsPipeline"
 "Binds a graphics pipeline on a render pass to be used in rendering.

A graphics pipeline must be bound before making any draw calls.

\\param render_pass a render pass handle.
\\param graphics_pipeline the graphics pipeline to bind.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SetGPUViewport"
 "Sets the current viewport state on a command buffer.

\\param render_pass a render pass handle.
\\param viewport the viewport to set.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SetGPUScissor"
 "Sets the current scissor state on a command buffer.

\\param render_pass a render pass handle.
\\param scissor the scissor area to set.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SetGPUBlendConstants"
 "Sets the current blend constants on a command buffer.

\\param render_pass a render pass handle.
\\param blend_constants the blend constant color.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GPU_BLENDFACTOR_CONSTANT_COLOR
\\sa SDL_GPU_BLENDFACTOR_ONE_MINUS_CONSTANT_COLOR
")
(:FUNCTION "SDL_SetGPUStencilReference"
 "Sets the current stencil reference value on a command buffer.

\\param render_pass a render pass handle.
\\param reference the stencil reference value to set.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_BindGPUVertexBuffers"
 "Binds vertex buffers on a command buffer for use with subsequent draw
calls.

\\param render_pass a render pass handle.
\\param first_slot the vertex buffer slot to begin binding from.
\\param bindings an array of SDL_GPUBufferBinding structs containing vertex
                buffers and offset values.
\\param num_bindings the number of bindings in the bindings array.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_BindGPUIndexBuffer"
 "Binds an index buffer on a command buffer for use with subsequent draw
calls.

\\param render_pass a render pass handle.
\\param binding a pointer to a struct containing an index buffer and offset.
\\param index_element_size whether the index values in the buffer are 16- or
                          32-bit.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_BindGPUVertexSamplers"
 "Binds texture-sampler pairs for use on the vertex shader.

The textures must have been created with SDL_GPU_TEXTUREUSAGE_SAMPLER.

Be sure your shader is set up according to the requirements documented in
SDL_CreateGPUShader().

\\param render_pass a render pass handle.
\\param first_slot the vertex sampler slot to begin binding from.
\\param texture_sampler_bindings an array of texture-sampler binding
                                structs.
\\param num_bindings the number of texture-sampler pairs to bind from the
                    array.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateGPUShader
")
(:FUNCTION "SDL_BindGPUVertexStorageTextures"
 "Binds storage textures for use on the vertex shader.

These textures must have been created with
SDL_GPU_TEXTUREUSAGE_GRAPHICS_STORAGE_READ.

Be sure your shader is set up according to the requirements documented in
SDL_CreateGPUShader().

\\param render_pass a render pass handle.
\\param first_slot the vertex storage texture slot to begin binding from.
\\param storage_textures an array of storage textures.
\\param num_bindings the number of storage texture to bind from the array.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateGPUShader
")
(:FUNCTION "SDL_BindGPUVertexStorageBuffers"
 "Binds storage buffers for use on the vertex shader.

These buffers must have been created with
SDL_GPU_BUFFERUSAGE_GRAPHICS_STORAGE_READ.

Be sure your shader is set up according to the requirements documented in
SDL_CreateGPUShader().

\\param render_pass a render pass handle.
\\param first_slot the vertex storage buffer slot to begin binding from.
\\param storage_buffers an array of buffers.
\\param num_bindings the number of buffers to bind from the array.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateGPUShader
")
(:FUNCTION "SDL_BindGPUFragmentSamplers"
 "Binds texture-sampler pairs for use on the fragment shader.

The textures must have been created with SDL_GPU_TEXTUREUSAGE_SAMPLER.

Be sure your shader is set up according to the requirements documented in
SDL_CreateGPUShader().

\\param render_pass a render pass handle.
\\param first_slot the fragment sampler slot to begin binding from.
\\param texture_sampler_bindings an array of texture-sampler binding
                                structs.
\\param num_bindings the number of texture-sampler pairs to bind from the
                    array.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateGPUShader
")
(:FUNCTION "SDL_BindGPUFragmentStorageTextures"
 "Binds storage textures for use on the fragment shader.

These textures must have been created with
SDL_GPU_TEXTUREUSAGE_GRAPHICS_STORAGE_READ.

Be sure your shader is set up according to the requirements documented in
SDL_CreateGPUShader().

\\param render_pass a render pass handle.
\\param first_slot the fragment storage texture slot to begin binding from.
\\param storage_textures an array of storage textures.
\\param num_bindings the number of storage textures to bind from the array.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateGPUShader
")
(:FUNCTION "SDL_BindGPUFragmentStorageBuffers"
 "Binds storage buffers for use on the fragment shader.

These buffers must have been created with
SDL_GPU_BUFFERUSAGE_GRAPHICS_STORAGE_READ.

Be sure your shader is set up according to the requirements documented in
SDL_CreateGPUShader().

\\param render_pass a render pass handle.
\\param first_slot the fragment storage buffer slot to begin binding from.
\\param storage_buffers an array of storage buffers.
\\param num_bindings the number of storage buffers to bind from the array.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateGPUShader
")
(:FUNCTION "SDL_DrawGPUIndexedPrimitives"
 "Draws data using bound graphics state with an index buffer and instancing
enabled.

You must not call this function before binding a graphics pipeline.

Note that the `first_vertex` and `first_instance` parameters are NOT
compatible with built-in vertex/instance ID variables in shaders (for
example, SV_VertexID); GPU APIs and shader languages do not define these
built-in variables consistently, so if your shader depends on them, the
only way to keep behavior consistent and portable is to always pass 0 for
the correlating parameter in the draw calls.

\\param render_pass a render pass handle.
\\param num_indices the number of indices to draw per instance.
\\param num_instances the number of instances to draw.
\\param first_index the starting index within the index buffer.
\\param vertex_offset value added to vertex index before indexing into the
                     vertex buffer.
\\param first_instance the ID of the first instance to draw.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_DrawGPUPrimitives" "Draws data using bound graphics state.

You must not call this function before binding a graphics pipeline.

Note that the `first_vertex` and `first_instance` parameters are NOT
compatible with built-in vertex/instance ID variables in shaders (for
example, SV_VertexID); GPU APIs and shader languages do not define these
built-in variables consistently, so if your shader depends on them, the
only way to keep behavior consistent and portable is to always pass 0 for
the correlating parameter in the draw calls.

\\param render_pass a render pass handle.
\\param num_vertices the number of vertices to draw.
\\param num_instances the number of instances that will be drawn.
\\param first_vertex the index of the first vertex to draw.
\\param first_instance the ID of the first instance to draw.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_DrawGPUPrimitivesIndirect"
 "Draws data using bound graphics state and with draw parameters set from a
buffer.

The buffer must consist of tightly-packed draw parameter sets that each
match the layout of SDL_GPUIndirectDrawCommand. You must not call this
function before binding a graphics pipeline.

\\param render_pass a render pass handle.
\\param buffer a buffer containing draw parameters.
\\param offset the offset to start reading from the draw buffer.
\\param draw_count the number of draw parameter sets that should be read
                  from the draw buffer.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_DrawGPUIndexedPrimitivesIndirect"
 "Draws data using bound graphics state with an index buffer enabled and with
draw parameters set from a buffer.

The buffer must consist of tightly-packed draw parameter sets that each
match the layout of SDL_GPUIndexedIndirectDrawCommand. You must not call
this function before binding a graphics pipeline.

\\param render_pass a render pass handle.
\\param buffer a buffer containing draw parameters.
\\param offset the offset to start reading from the draw buffer.
\\param draw_count the number of draw parameter sets that should be read
                  from the draw buffer.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_EndGPURenderPass" "Ends the given render pass.

All bound graphics state on the render pass command buffer is unset. The
render pass handle is now invalid.

\\param render_pass a render pass handle.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_BeginGPUComputePass" "Begins a compute pass on a command buffer.

A compute pass is defined by a set of texture subresources and buffers that
may be written to by compute pipelines. These textures and buffers must
have been created with the COMPUTE_STORAGE_WRITE bit or the
COMPUTE_STORAGE_SIMULTANEOUS_READ_WRITE bit. If you do not create a texture
with COMPUTE_STORAGE_SIMULTANEOUS_READ_WRITE, you must not read from the
texture in the compute pass. All operations related to compute pipelines
must take place inside of a compute pass. You must not begin another
compute pass, or a render pass or copy pass before ending the compute pass.

A VERY IMPORTANT NOTE - Reads and writes in compute passes are NOT
implicitly synchronized. This means you may cause data races by both
reading and writing a resource region in a compute pass, or by writing
multiple times to a resource region. If your compute work depends on
reading the completed output from a previous dispatch, you MUST end the
current compute pass and begin a new one before you can safely access the
data. Otherwise you will receive unexpected results. Reading and writing a
texture in the same compute pass is only supported by specific texture
formats. Make sure you check the format support!

\\param command_buffer a command buffer.
\\param storage_texture_bindings an array of writeable storage texture
                                binding structs.
\\param num_storage_texture_bindings the number of storage textures to bind
                                    from the array.
\\param storage_buffer_bindings an array of writeable storage buffer binding
                               structs.
\\param num_storage_buffer_bindings the number of storage buffers to bind
                                   from the array.
\\returns a compute pass handle.

\\since This function is available since SDL 3.2.0.

\\sa SDL_EndGPUComputePass
")
(:FUNCTION "SDL_BindGPUComputePipeline"
 "Binds a compute pipeline on a command buffer for use in compute dispatch.

\\param compute_pass a compute pass handle.
\\param compute_pipeline a compute pipeline to bind.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_BindGPUComputeSamplers"
 "Binds texture-sampler pairs for use on the compute shader.

The textures must have been created with SDL_GPU_TEXTUREUSAGE_SAMPLER.

Be sure your shader is set up according to the requirements documented in
SDL_CreateGPUShader().

\\param compute_pass a compute pass handle.
\\param first_slot the compute sampler slot to begin binding from.
\\param texture_sampler_bindings an array of texture-sampler binding
                                structs.
\\param num_bindings the number of texture-sampler bindings to bind from the
                    array.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateGPUShader
")
(:FUNCTION "SDL_BindGPUComputeStorageTextures"
 "Binds storage textures as readonly for use on the compute pipeline.

These textures must have been created with
SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_READ.

Be sure your shader is set up according to the requirements documented in
SDL_CreateGPUShader().

\\param compute_pass a compute pass handle.
\\param first_slot the compute storage texture slot to begin binding from.
\\param storage_textures an array of storage textures.
\\param num_bindings the number of storage textures to bind from the array.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateGPUShader
")
(:FUNCTION "SDL_BindGPUComputeStorageBuffers"
 "Binds storage buffers as readonly for use on the compute pipeline.

These buffers must have been created with
SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_READ.

Be sure your shader is set up according to the requirements documented in
SDL_CreateGPUShader().

\\param compute_pass a compute pass handle.
\\param first_slot the compute storage buffer slot to begin binding from.
\\param storage_buffers an array of storage buffer binding structs.
\\param num_bindings the number of storage buffers to bind from the array.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateGPUShader
")
(:FUNCTION "SDL_DispatchGPUCompute" "Dispatches compute work.

You must not call this function before binding a compute pipeline.

A VERY IMPORTANT NOTE If you dispatch multiple times in a compute pass, and
the dispatches write to the same resource region as each other, there is no
guarantee of which order the writes will occur. If the write order matters,
you MUST end the compute pass and begin another one.

\\param compute_pass a compute pass handle.
\\param groupcount_x number of local workgroups to dispatch in the X
                    dimension.
\\param groupcount_y number of local workgroups to dispatch in the Y
                    dimension.
\\param groupcount_z number of local workgroups to dispatch in the Z
                    dimension.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_DispatchGPUComputeIndirect"
 "Dispatches compute work with parameters set from a buffer.

The buffer layout should match the layout of
SDL_GPUIndirectDispatchCommand. You must not call this function before
binding a compute pipeline.

A VERY IMPORTANT NOTE If you dispatch multiple times in a compute pass, and
the dispatches write to the same resource region as each other, there is no
guarantee of which order the writes will occur. If the write order matters,
you MUST end the compute pass and begin another one.

\\param compute_pass a compute pass handle.
\\param buffer a buffer containing dispatch parameters.
\\param offset the offset to start reading from the dispatch buffer.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_EndGPUComputePass" "Ends the current compute pass.

All bound compute state on the command buffer is unset. The compute pass
handle is now invalid.

\\param compute_pass a compute pass handle.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_MapGPUTransferBuffer"
 "Maps a transfer buffer into application address space.

You must unmap the transfer buffer before encoding upload commands. The
memory is owned by the graphics driver - do NOT call SDL_free() on the
returned pointer.

\\param device a GPU context.
\\param transfer_buffer a transfer buffer.
\\param cycle if true, cycles the transfer buffer if it is already bound.
\\returns the address of the mapped transfer buffer memory, or NULL on
         failure; call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_UnmapGPUTransferBuffer"
 "Unmaps a previously mapped transfer buffer.

\\param device a GPU context.
\\param transfer_buffer a previously mapped transfer buffer.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_BeginGPUCopyPass" "Begins a copy pass on a command buffer.

All operations related to copying to or from buffers or textures take place
inside a copy pass. You must not begin another copy pass, or a render pass
or compute pass before ending the copy pass.

\\param command_buffer a command buffer.
\\returns a copy pass handle.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_UploadToGPUTexture"
 "Uploads data from a transfer buffer to a texture.

The upload occurs on the GPU timeline. You may assume that the upload has
finished in subsequent commands.

You must align the data in the transfer buffer to a multiple of the texel
size of the texture format.

\\param copy_pass a copy pass handle.
\\param source the source transfer buffer with image layout information.
\\param destination the destination texture region.
\\param cycle if true, cycles the texture if the texture is bound, otherwise
             overwrites the data.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_UploadToGPUBuffer"
 "Uploads data from a transfer buffer to a buffer.

The upload occurs on the GPU timeline. You may assume that the upload has
finished in subsequent commands.

\\param copy_pass a copy pass handle.
\\param source the source transfer buffer with offset.
\\param destination the destination buffer with offset and size.
\\param cycle if true, cycles the buffer if it is already bound, otherwise
             overwrites the data.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_CopyGPUTextureToTexture" "Performs a texture-to-texture copy.

This copy occurs on the GPU timeline. You may assume the copy has finished
in subsequent commands.

\\param copy_pass a copy pass handle.
\\param source a source texture region.
\\param destination a destination texture region.
\\param w the width of the region to copy.
\\param h the height of the region to copy.
\\param d the depth of the region to copy.
\\param cycle if true, cycles the destination texture if the destination
             texture is bound, otherwise overwrites the data.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_CopyGPUBufferToBuffer" "Performs a buffer-to-buffer copy.

This copy occurs on the GPU timeline. You may assume the copy has finished
in subsequent commands.

\\param copy_pass a copy pass handle.
\\param source the buffer and offset to copy from.
\\param destination the buffer and offset to copy to.
\\param size the length of the buffer to copy.
\\param cycle if true, cycles the destination buffer if it is already bound,
             otherwise overwrites the data.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_DownloadFromGPUTexture"
 "Copies data from a texture to a transfer buffer on the GPU timeline.

This data is not guaranteed to be copied until the command buffer fence is
signaled.

\\param copy_pass a copy pass handle.
\\param source the source texture region.
\\param destination the destination transfer buffer with image layout
                   information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_DownloadFromGPUBuffer"
 "Copies data from a buffer to a transfer buffer on the GPU timeline.

This data is not guaranteed to be copied until the command buffer fence is
signaled.

\\param copy_pass a copy pass handle.
\\param source the source buffer with offset and size.
\\param destination the destination transfer buffer with offset.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_EndGPUCopyPass" "Ends the current copy pass.

\\param copy_pass a copy pass handle.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GenerateMipmapsForGPUTexture"
 "Generates mipmaps for the given texture.

This function must not be called inside of any pass.

\\param command_buffer a command_buffer.
\\param texture a texture with more than 1 mip level.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_BlitGPUTexture"
 "Blits from a source texture region to a destination texture region.

This function must not be called inside of any pass.

\\param command_buffer a command buffer.
\\param info the blit info struct containing the blit parameters.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_WindowSupportsGPUSwapchainComposition"
 "Determines whether a swapchain composition is supported by the window.

The window must be claimed before calling this function.

\\param device a GPU context.
\\param window an SDL_Window.
\\param swapchain_composition the swapchain composition to check.
\\returns true if supported, false if unsupported.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ClaimWindowForGPUDevice
")
(:FUNCTION "SDL_WindowSupportsGPUPresentMode"
 "Determines whether a presentation mode is supported by the window.

The window must be claimed before calling this function.

\\param device a GPU context.
\\param window an SDL_Window.
\\param present_mode the presentation mode to check.
\\returns true if supported, false if unsupported.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ClaimWindowForGPUDevice
")
(:FUNCTION "SDL_ClaimWindowForGPUDevice"
 "Claims a window, creating a swapchain structure for it.

This must be called before SDL_AcquireGPUSwapchainTexture is called using
the window. You should only call this function from the thread that created
the window.

The swapchain will be created with SDL_GPU_SWAPCHAINCOMPOSITION_SDR and
SDL_GPU_PRESENTMODE_VSYNC. If you want to have different swapchain
parameters, you must call SDL_SetGPUSwapchainParameters after claiming the
window.

\\param device a GPU context.
\\param window an SDL_Window.
\\returns true on success, or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called from the thread that
              created the window.

\\since This function is available since SDL 3.2.0.

\\sa SDL_WaitAndAcquireGPUSwapchainTexture
\\sa SDL_ReleaseWindowFromGPUDevice
\\sa SDL_WindowSupportsGPUPresentMode
\\sa SDL_WindowSupportsGPUSwapchainComposition
")
(:FUNCTION "SDL_ReleaseWindowFromGPUDevice"
 "Unclaims a window, destroying its swapchain structure.

\\param device a GPU context.
\\param window an SDL_Window that has been claimed.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ClaimWindowForGPUDevice
")
(:FUNCTION "SDL_SetGPUSwapchainParameters"
 "Changes the swapchain parameters for the given claimed window.

This function will fail if the requested present mode or swapchain
composition are unsupported by the device. Check if the parameters are
supported via SDL_WindowSupportsGPUPresentMode /
SDL_WindowSupportsGPUSwapchainComposition prior to calling this function.

SDL_GPU_PRESENTMODE_VSYNC and SDL_GPU_SWAPCHAINCOMPOSITION_SDR are always
supported.

\\param device a GPU context.
\\param window an SDL_Window that has been claimed.
\\param swapchain_composition the desired composition of the swapchain.
\\param present_mode the desired present mode for the swapchain.
\\returns true if successful, false on error; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_WindowSupportsGPUPresentMode
\\sa SDL_WindowSupportsGPUSwapchainComposition
")
(:FUNCTION "SDL_SetGPUAllowedFramesInFlight"
 "Configures the maximum allowed number of frames in flight.

The default value when the device is created is 2. This means that after
you have submitted 2 frames for presentation, if the GPU has not finished
working on the first frame, SDL_AcquireGPUSwapchainTexture() will fill the
swapchain texture pointer with NULL, and
SDL_WaitAndAcquireGPUSwapchainTexture() will block.

Higher values increase throughput at the expense of visual latency. Lower
values decrease visual latency at the expense of throughput.

Note that calling this function will stall and flush the command queue to
prevent synchronization issues.

The minimum value of allowed frames in flight is 1, and the maximum is 3.

\\param device a GPU context.
\\param allowed_frames_in_flight the maximum number of frames that can be
                                pending on the GPU.
\\returns true if successful, false on error; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetGPUSwapchainTextureFormat"
 "Obtains the texture format of the swapchain for the given window.

Note that this format can change if the swapchain parameters change.

\\param device a GPU context.
\\param window an SDL_Window that has been claimed.
\\returns the texture format of the swapchain.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_AcquireGPUSwapchainTexture"
 "Acquire a texture to use in presentation.

When a swapchain texture is acquired on a command buffer, it will
automatically be submitted for presentation when the command buffer is
submitted. The swapchain texture should only be referenced by the command
buffer used to acquire it.

This function will fill the swapchain texture handle with NULL if too many
frames are in flight. This is not an error.

If you use this function, it is possible to create a situation where many
command buffers are allocated while the rendering context waits for the GPU
to catch up, which will cause memory usage to grow. You should use
SDL_WaitAndAcquireGPUSwapchainTexture() unless you know what you are doing
with timing.

The swapchain texture is managed by the implementation and must not be
freed by the user. You MUST NOT call this function from any thread other
than the one that created the window.

\\param command_buffer a command buffer.
\\param window a window that has been claimed.
\\param swapchain_texture a pointer filled in with a swapchain texture
                         handle.
\\param swapchain_texture_width a pointer filled in with the swapchain
                               texture width, may be NULL.
\\param swapchain_texture_height a pointer filled in with the swapchain
                                texture height, may be NULL.
\\returns true on success, false on error; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called from the thread that
              created the window.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ClaimWindowForGPUDevice
\\sa SDL_SubmitGPUCommandBuffer
\\sa SDL_SubmitGPUCommandBufferAndAcquireFence
\\sa SDL_CancelGPUCommandBuffer
\\sa SDL_GetWindowSizeInPixels
\\sa SDL_WaitForGPUSwapchain
\\sa SDL_WaitAndAcquireGPUSwapchainTexture
\\sa SDL_SetGPUAllowedFramesInFlight
")
(:FUNCTION "SDL_WaitForGPUSwapchain"
 "Blocks the thread until a swapchain texture is available to be acquired.

\\param device a GPU context.
\\param window a window that has been claimed.
\\returns true on success, false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called from the thread that
              created the window.

\\since This function is available since SDL 3.2.0.

\\sa SDL_AcquireGPUSwapchainTexture
\\sa SDL_WaitAndAcquireGPUSwapchainTexture
\\sa SDL_SetGPUAllowedFramesInFlight
")
(:FUNCTION "SDL_WaitAndAcquireGPUSwapchainTexture"
 "Blocks the thread until a swapchain texture is available to be acquired,
and then acquires it.

When a swapchain texture is acquired on a command buffer, it will
automatically be submitted for presentation when the command buffer is
submitted. The swapchain texture should only be referenced by the command
buffer used to acquire it. It is an error to call
SDL_CancelGPUCommandBuffer() after a swapchain texture is acquired.

This function can fill the swapchain texture handle with NULL in certain
cases, for example if the window is minimized. This is not an error. You
should always make sure to check whether the pointer is NULL before
actually using it.

The swapchain texture is managed by the implementation and must not be
freed by the user. You MUST NOT call this function from any thread other
than the one that created the window.

\\param command_buffer a command buffer.
\\param window a window that has been claimed.
\\param swapchain_texture a pointer filled in with a swapchain texture
                         handle.
\\param swapchain_texture_width a pointer filled in with the swapchain
                               texture width, may be NULL.
\\param swapchain_texture_height a pointer filled in with the swapchain
                                texture height, may be NULL.
\\returns true on success, false on error; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called from the thread that
              created the window.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SubmitGPUCommandBuffer
\\sa SDL_SubmitGPUCommandBufferAndAcquireFence
")
(:FUNCTION "SDL_SubmitGPUCommandBuffer"
 "Submits a command buffer so its commands can be processed on the GPU.

It is invalid to use the command buffer after this is called.

This must be called from the thread the command buffer was acquired on.

All commands in the submission are guaranteed to begin executing before any
command in a subsequent submission begins executing.

\\param command_buffer a command buffer.
\\returns true on success, false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_AcquireGPUCommandBuffer
\\sa SDL_WaitAndAcquireGPUSwapchainTexture
\\sa SDL_AcquireGPUSwapchainTexture
\\sa SDL_SubmitGPUCommandBufferAndAcquireFence
")
(:FUNCTION "SDL_SubmitGPUCommandBufferAndAcquireFence"
 "Submits a command buffer so its commands can be processed on the GPU, and
acquires a fence associated with the command buffer.

You must release this fence when it is no longer needed or it will cause a
leak. It is invalid to use the command buffer after this is called.

This must be called from the thread the command buffer was acquired on.

All commands in the submission are guaranteed to begin executing before any
command in a subsequent submission begins executing.

\\param command_buffer a command buffer.
\\returns a fence associated with the command buffer, or NULL on failure;
         call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_AcquireGPUCommandBuffer
\\sa SDL_WaitAndAcquireGPUSwapchainTexture
\\sa SDL_AcquireGPUSwapchainTexture
\\sa SDL_SubmitGPUCommandBuffer
\\sa SDL_ReleaseGPUFence
")
(:FUNCTION "SDL_CancelGPUCommandBuffer" "Cancels a command buffer.

None of the enqueued commands are executed.

It is an error to call this function after a swapchain texture has been
acquired.

This must be called from the thread the command buffer was acquired on.

You must not reference the command buffer after calling this function.

\\param command_buffer a command buffer.
\\returns true on success, false on error; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_WaitAndAcquireGPUSwapchainTexture
\\sa SDL_AcquireGPUCommandBuffer
\\sa SDL_AcquireGPUSwapchainTexture
")
(:FUNCTION "SDL_WaitForGPUIdle"
 "Blocks the thread until the GPU is completely idle.

\\param device a GPU context.
\\returns true on success, false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_WaitForGPUFences
")
(:FUNCTION "SDL_WaitForGPUFences"
 "Blocks the thread until the given fences are signaled.

\\param device a GPU context.
\\param wait_all if 0, wait for any fence to be signaled, if 1, wait for all
                fences to be signaled.
\\param fences an array of fences to wait on.
\\param num_fences the number of fences in the fences array.
\\returns true on success, false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SubmitGPUCommandBufferAndAcquireFence
\\sa SDL_WaitForGPUIdle
")
(:FUNCTION "SDL_QueryGPUFence" "Checks the status of a fence.

\\param device a GPU context.
\\param fence a fence.
\\returns true if the fence is signaled, false if it is not.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SubmitGPUCommandBufferAndAcquireFence
")
(:FUNCTION "SDL_ReleaseGPUFence"
 "Releases a fence obtained from SDL_SubmitGPUCommandBufferAndAcquireFence.

You must not reference the fence after calling this function.

\\param device a GPU context.
\\param fence a fence.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SubmitGPUCommandBufferAndAcquireFence
")
(:FUNCTION "SDL_GPUTextureFormatTexelBlockSize"
 "Obtains the texel block size for a texture format.

\\param format the texture format you want to know the texel size of.
\\returns the texel block size of the texture format.

\\since This function is available since SDL 3.2.0.

\\sa SDL_UploadToGPUTexture
")
(:FUNCTION "SDL_GPUTextureSupportsFormat"
 "Determines whether a texture format is supported for a given type and
usage.

\\param device a GPU context.
\\param format the texture format to check.
\\param type the type of texture (2D, 3D, Cube).
\\param usage a bitmask of all usage scenarios to check.
\\returns whether the texture format is supported for this type and usage.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GPUTextureSupportsSampleCount"
 "Determines if a sample count for a texture format is supported.

\\param device a GPU context.
\\param format the texture format to check.
\\param sample_count the sample count to check.
\\returns a hardware-specific version of min(preferred, possible).

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_CalculateGPUTextureFormatSize"
 "Calculate the size in bytes of a texture format with dimensions.

\\param format a texture format.
\\param width width in pixels.
\\param height height in pixels.
\\param depth_or_layer_count depth for 3D textures or layer count otherwise.
\\returns the size of a texture with this format and dimensions.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GDKSuspendGPU"
 "Call this to suspend GPU operation on Xbox when you receive the
SDL_EVENT_DID_ENTER_BACKGROUND event.

Do NOT call any SDL_GPU functions after calling this function! This must
also be called before calling SDL_GDKSuspendComplete.

\\param device a GPU context.

\\since This function is available since SDL 3.2.0.

\\sa SDL_AddEventWatch
")
(:FUNCTION "SDL_GDKResumeGPU"
 "Call this to resume GPU operation on Xbox when you receive the
SDL_EVENT_WILL_ENTER_FOREGROUND event.

When resuming, this function MUST be called before calling any other
SDL_GPU functions.

\\param device a GPU context.

\\since This function is available since SDL 3.2.0.

\\sa SDL_AddEventWatch
")
(:STRUCT "SDL_GUID"
 "An SDL_GUID is a 128-bit identifier for an input device that identifies
that device across runs of SDL programs on the same platform.

If the device is detached and then re-attached to a different port, or if
the base system is rebooted, the device should still report the same GUID.

GUIDs are as precise as possible but are not guaranteed to distinguish
physically distinct but equivalent devices. For example, two game
controllers from the same vendor with the same product ID and revision may
have the same GUID.

GUIDs may be platform-dependent (i.e., the same device may report different
GUIDs on different operating systems).

\\since This struct is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GUIDToString"
 "Get an ASCII string representation for a given SDL_GUID.

\\param guid the SDL_GUID you wish to convert to string.
\\param pszGUID buffer in which to write the ASCII string.
\\param cbGUID the size of pszGUID, should be at least 33 bytes.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_StringToGUID
")
(:FUNCTION "SDL_StringToGUID" "Convert a GUID string into a SDL_GUID structure.

Performs no error checking. If this function is given a string containing
an invalid GUID, the function will silently succeed, but the GUID generated
will not be useful.

\\param pchGUID string containing an ASCII representation of a GUID.
\\returns a SDL_GUID structure.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GUIDToString
")
(:STRUCT "SDL_Haptic" "The haptic structure used to identify an SDL haptic.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_OpenHaptic
\\sa SDL_OpenHapticFromJoystick
\\sa SDL_CloseHaptic
")
(:STRUCT "SDL_HapticDirection" "Structure that represents a haptic direction.

This is the direction where the force comes from, instead of the direction
in which the force is exerted.

Directions can be specified by:

- SDL_HAPTIC_POLAR : Specified by polar coordinates.
- SDL_HAPTIC_CARTESIAN : Specified by cartesian coordinates.
- SDL_HAPTIC_SPHERICAL : Specified by spherical coordinates.

Cardinal directions of the haptic device are relative to the positioning of
the device. North is considered to be away from the user.

The following diagram represents the cardinal directions:

```
               .--.
               |__| .-------.
               |=.| |.-----.|
               |--| ||     ||
               |  | |'-----'|
               |__|~')_____('
                 [ COMPUTER ]


                   North (0,-1)
                       ^
                       |
                       |
 (-1,0)  West <----[ HAPTIC ]----> East (1,0)
                       |
                       |
                       v
                    South (0,1)


                    [ USER ]
                      \\|||/
                      (o o)
                ---ooO-(_)-Ooo---
```

If type is SDL_HAPTIC_POLAR, direction is encoded by hundredths of a degree
starting north and turning clockwise. SDL_HAPTIC_POLAR only uses the first
`dir` parameter. The cardinal directions would be:

- North: 0 (0 degrees)
- East: 9000 (90 degrees)
- South: 18000 (180 degrees)
- West: 27000 (270 degrees)

If type is SDL_HAPTIC_CARTESIAN, direction is encoded by three positions (X
axis, Y axis and Z axis (with 3 axes)). SDL_HAPTIC_CARTESIAN uses the first
three `dir` parameters. The cardinal directions would be:

- North: 0,-1, 0
- East: 1, 0, 0
- South: 0, 1, 0
- West: -1, 0, 0

The Z axis represents the height of the effect if supported, otherwise it's
unused. In cartesian encoding (1, 2) would be the same as (2, 4), you can
use any multiple you want, only the direction matters.

If type is SDL_HAPTIC_SPHERICAL, direction is encoded by two rotations. The
first two `dir` parameters are used. The `dir` parameters are as follows
(all values are in hundredths of degrees):

- Degrees from (1, 0) rotated towards (0, 1).
- Degrees towards (0, 0, 1) (device needs at least 3 axes).

Example of force coming from the south with all encodings (force coming
from the south means the user will have to pull the stick to counteract):

```c
 SDL_HapticDirection direction;

 // Cartesian directions
 direction.type = SDL_HAPTIC_CARTESIAN; // Using cartesian direction encoding.
 direction.dir[0] = 0; // X position
 direction.dir[1] = 1; // Y position
 // Assuming the device has 2 axes, we don't need to specify third parameter.

 // Polar directions
 direction.type = SDL_HAPTIC_POLAR; // We'll be using polar direction encoding.
 direction.dir[0] = 18000; // Polar only uses first parameter

 // Spherical coordinates
 direction.type = SDL_HAPTIC_SPHERICAL; // Spherical encoding
 direction.dir[0] = 9000; // Since we only have two axes we don't need more parameters.
```

\\since This struct is available since SDL 3.2.0.

\\sa SDL_HAPTIC_POLAR
\\sa SDL_HAPTIC_CARTESIAN
\\sa SDL_HAPTIC_SPHERICAL
\\sa SDL_HAPTIC_STEERING_AXIS
\\sa SDL_HapticEffect
\\sa SDL_GetNumHapticAxes
")
(:STRUCT "SDL_HapticConstant"
 "A structure containing a template for a Constant effect.

This struct is exclusively for the SDL_HAPTIC_CONSTANT effect.

A constant effect applies a constant force in the specified direction to
the joystick.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_HAPTIC_CONSTANT
\\sa SDL_HapticEffect
")
(:STRUCT "SDL_HapticPeriodic"
 "A structure containing a template for a Periodic effect.

The struct handles the following effects:

- SDL_HAPTIC_SINE
- SDL_HAPTIC_SQUARE
- SDL_HAPTIC_TRIANGLE
- SDL_HAPTIC_SAWTOOTHUP
- SDL_HAPTIC_SAWTOOTHDOWN

A periodic effect consists in a wave-shaped effect that repeats itself over
time. The type determines the shape of the wave and the parameters
determine the dimensions of the wave.

Phase is given by hundredth of a degree meaning that giving the phase a
value of 9000 will displace it 25% of its period. Here are sample values:

- 0: No phase displacement.
- 9000: Displaced 25% of its period.
- 18000: Displaced 50% of its period.
- 27000: Displaced 75% of its period.
- 36000: Displaced 100% of its period, same as 0, but 0 is preferred.

Examples:

```
  SDL_HAPTIC_SINE
    __      __      __      __
   /  \\    /  \\    /  \\    /
  /    \\__/    \\__/    \\__/

  SDL_HAPTIC_SQUARE
   __    __    __    __    __
  |  |  |  |  |  |  |  |  |  |
  |  |__|  |__|  |__|  |__|  |

  SDL_HAPTIC_TRIANGLE
    /\\    /\\    /\\    /\\    /\\
   /  \\  /  \\  /  \\  /  \\  /
  /    \\/    \\/    \\/    \\/

  SDL_HAPTIC_SAWTOOTHUP
    /|  /|  /|  /|  /|  /|  /|
   / | / | / | / | / | / | / |
  /  |/  |/  |/  |/  |/  |/  |

  SDL_HAPTIC_SAWTOOTHDOWN
  \\  |\\  |\\  |\\  |\\  |\\  |\\  |
   \\ | \\ | \\ | \\ | \\ | \\ | \\ |
    \\|  \\|  \\|  \\|  \\|  \\|  \\|
```

\\since This struct is available since SDL 3.2.0.

\\sa SDL_HAPTIC_SINE
\\sa SDL_HAPTIC_SQUARE
\\sa SDL_HAPTIC_TRIANGLE
\\sa SDL_HAPTIC_SAWTOOTHUP
\\sa SDL_HAPTIC_SAWTOOTHDOWN
\\sa SDL_HapticEffect
")
(:STRUCT "SDL_HapticCondition"
 "A structure containing a template for a Condition effect.

The struct handles the following effects:

- SDL_HAPTIC_SPRING: Effect based on axes position.
- SDL_HAPTIC_DAMPER: Effect based on axes velocity.
- SDL_HAPTIC_INERTIA: Effect based on axes acceleration.
- SDL_HAPTIC_FRICTION: Effect based on axes movement.

Direction is handled by condition internals instead of a direction member.
The condition effect specific members have three parameters. The first
refers to the X axis, the second refers to the Y axis and the third refers
to the Z axis. The right terms refer to the positive side of the axis and
the left terms refer to the negative side of the axis. Please refer to the
SDL_HapticDirection diagram for which side is positive and which is
negative.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_HapticDirection
\\sa SDL_HAPTIC_SPRING
\\sa SDL_HAPTIC_DAMPER
\\sa SDL_HAPTIC_INERTIA
\\sa SDL_HAPTIC_FRICTION
\\sa SDL_HapticEffect
")
(:STRUCT "SDL_HapticRamp" "A structure containing a template for a Ramp effect.

This struct is exclusively for the SDL_HAPTIC_RAMP effect.

The ramp effect starts at start strength and ends at end strength. It
augments in linear fashion. If you use attack and fade with a ramp the
effects get added to the ramp effect making the effect become quadratic
instead of linear.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_HAPTIC_RAMP
\\sa SDL_HapticEffect
")
(:STRUCT "SDL_HapticLeftRight"
 "A structure containing a template for a Left/Right effect.

This struct is exclusively for the SDL_HAPTIC_LEFTRIGHT effect.

The Left/Right effect is used to explicitly control the large and small
motors, commonly found in modern game controllers. The small (right) motor
is high frequency, and the large (left) motor is low frequency.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_HAPTIC_LEFTRIGHT
\\sa SDL_HapticEffect
")
(:STRUCT "SDL_HapticCustom"
 "A structure containing a template for the SDL_HAPTIC_CUSTOM effect.

This struct is exclusively for the SDL_HAPTIC_CUSTOM effect.

A custom force feedback effect is much like a periodic effect, where the
application can define its exact shape. You will have to allocate the data
yourself. Data should consist of channels * samples Uint16 samples.

If channels is one, the effect is rotated using the defined direction.
Otherwise it uses the samples in data for the different axes.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_HAPTIC_CUSTOM
\\sa SDL_HapticEffect
")
(:BITFIELD "SDL_HapticID"
 "This is a unique ID for a haptic device for the time it is connected to the
system, and is never reused for the lifetime of the application.

If the haptic device is disconnected and reconnected, it will get a new ID.

The value 0 is an invalid ID.

\\since This datatype is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetHaptics" "Get a list of currently connected haptic devices.

\\param count a pointer filled in with the number of haptic devices
             returned, may be NULL.
\\returns a 0 terminated array of haptic device instance IDs or NULL on
         failure; call SDL_GetError() for more information. This should be
         freed with SDL_free() when it is no longer needed.

\\since This function is available since SDL 3.2.0.

\\sa SDL_OpenHaptic
")
(:FUNCTION "SDL_GetHapticNameForID"
 "Get the implementation dependent name of a haptic device.

This can be called before any haptic devices are opened.

\\param instance_id the haptic device instance ID.
\\returns the name of the selected haptic device. If no name can be found,
         this function returns NULL; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetHapticName
\\sa SDL_OpenHaptic
")
(:FUNCTION "SDL_OpenHaptic" "Open a haptic device for use.

The index passed as an argument refers to the N'th haptic device on this
system.

When opening a haptic device, its gain will be set to maximum and
autocenter will be disabled. To modify these values use SDL_SetHapticGain()
and SDL_SetHapticAutocenter().

\\param instance_id the haptic device instance ID.
\\returns the device identifier or NULL on failure; call SDL_GetError() for
         more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CloseHaptic
\\sa SDL_GetHaptics
\\sa SDL_OpenHapticFromJoystick
\\sa SDL_OpenHapticFromMouse
\\sa SDL_SetHapticAutocenter
\\sa SDL_SetHapticGain
")
(:FUNCTION "SDL_GetHapticFromID"
 "Get the SDL_Haptic associated with an instance ID, if it has been opened.

\\param instance_id the instance ID to get the SDL_Haptic for.
\\returns an SDL_Haptic on success or NULL on failure or if it hasn't been
         opened yet; call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetHapticID" "Get the instance ID of an opened haptic device.

\\param haptic the SDL_Haptic device to query.
\\returns the instance ID of the specified haptic device on success or 0 on
         failure; call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetHapticName"
 "Get the implementation dependent name of a haptic device.

\\param haptic the SDL_Haptic obtained from SDL_OpenJoystick().
\\returns the name of the selected haptic device. If no name can be found,
         this function returns NULL; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetHapticNameForID
")
(:FUNCTION "SDL_IsMouseHaptic"
 "Query whether or not the current mouse has haptic capabilities.

\\returns true if the mouse is haptic or false if it isn't.

\\since This function is available since SDL 3.2.0.

\\sa SDL_OpenHapticFromMouse
")
(:FUNCTION "SDL_OpenHapticFromMouse"
 "Try to open a haptic device from the current mouse.

\\returns the haptic device identifier or NULL on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CloseHaptic
\\sa SDL_IsMouseHaptic
")
(:FUNCTION "SDL_IsJoystickHaptic" "Query if a joystick has haptic features.

\\param joystick the SDL_Joystick to test for haptic capabilities.
\\returns true if the joystick is haptic or false if it isn't.

\\since This function is available since SDL 3.2.0.

\\sa SDL_OpenHapticFromJoystick
")
(:FUNCTION "SDL_OpenHapticFromJoystick"
 "Open a haptic device for use from a joystick device.

You must still close the haptic device separately. It will not be closed
with the joystick.

When opened from a joystick you should first close the haptic device before
closing the joystick device. If not, on some implementations the haptic
device will also get unallocated and you'll be unable to use force feedback
on that device.

\\param joystick the SDL_Joystick to create a haptic device from.
\\returns a valid haptic device identifier on success or NULL on failure;
         call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CloseHaptic
\\sa SDL_IsJoystickHaptic
")
(:FUNCTION "SDL_CloseHaptic"
 "Close a haptic device previously opened with SDL_OpenHaptic().

\\param haptic the SDL_Haptic device to close.

\\since This function is available since SDL 3.2.0.

\\sa SDL_OpenHaptic
")
(:FUNCTION "SDL_GetMaxHapticEffects"
 "Get the number of effects a haptic device can store.

On some platforms this isn't fully supported, and therefore is an
approximation. Always check to see if your created effect was actually
created and do not rely solely on SDL_GetMaxHapticEffects().

\\param haptic the SDL_Haptic device to query.
\\returns the number of effects the haptic device can store or a negative
         error code on failure; call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetMaxHapticEffectsPlaying
\\sa SDL_GetHapticFeatures
")
(:FUNCTION "SDL_GetMaxHapticEffectsPlaying"
 "Get the number of effects a haptic device can play at the same time.

This is not supported on all platforms, but will always return a value.

\\param haptic the SDL_Haptic device to query maximum playing effects.
\\returns the number of effects the haptic device can play at the same time
         or -1 on failure; call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetMaxHapticEffects
\\sa SDL_GetHapticFeatures
")
(:FUNCTION "SDL_GetHapticFeatures"
 "Get the haptic device's supported features in bitwise manner.

\\param haptic the SDL_Haptic device to query.
\\returns a list of supported haptic features in bitwise manner (OR'd), or 0
         on failure; call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_HapticEffectSupported
\\sa SDL_GetMaxHapticEffects
")
(:FUNCTION "SDL_GetNumHapticAxes" "Get the number of haptic axes the device has.

The number of haptic axes might be useful if working with the
SDL_HapticDirection effect.

\\param haptic the SDL_Haptic device to query.
\\returns the number of axes on success or -1 on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_HapticEffectSupported"
 "Check to see if an effect is supported by a haptic device.

\\param haptic the SDL_Haptic device to query.
\\param effect the desired effect to query.
\\returns true if the effect is supported or false if it isn't.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateHapticEffect
\\sa SDL_GetHapticFeatures
")
(:FUNCTION "SDL_CreateHapticEffect"
 "Create a new haptic effect on a specified device.

\\param haptic an SDL_Haptic device to create the effect on.
\\param effect an SDL_HapticEffect structure containing the properties of
              the effect to create.
\\returns the ID of the effect on success or -1 on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_DestroyHapticEffect
\\sa SDL_RunHapticEffect
\\sa SDL_UpdateHapticEffect
")
(:FUNCTION "SDL_UpdateHapticEffect" "Update the properties of an effect.

Can be used dynamically, although behavior when dynamically changing
direction may be strange. Specifically the effect may re-upload itself and
start playing from the start. You also cannot change the type either when
running SDL_UpdateHapticEffect().

\\param haptic the SDL_Haptic device that has the effect.
\\param effect the identifier of the effect to update.
\\param data an SDL_HapticEffect structure containing the new effect
            properties to use.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateHapticEffect
\\sa SDL_RunHapticEffect
")
(:FUNCTION "SDL_RunHapticEffect"
 "Run the haptic effect on its associated haptic device.

To repeat the effect over and over indefinitely, set `iterations` to
`SDL_HAPTIC_INFINITY`. (Repeats the envelope - attack and fade.) To make
one instance of the effect last indefinitely (so the effect does not fade),
set the effect's `length` in its structure/union to `SDL_HAPTIC_INFINITY`
instead.

\\param haptic the SDL_Haptic device to run the effect on.
\\param effect the ID of the haptic effect to run.
\\param iterations the number of iterations to run the effect; use
                  `SDL_HAPTIC_INFINITY` to repeat forever.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetHapticEffectStatus
\\sa SDL_StopHapticEffect
\\sa SDL_StopHapticEffects
")
(:FUNCTION "SDL_StopHapticEffect"
 "Stop the haptic effect on its associated haptic device.

\\param haptic the SDL_Haptic device to stop the effect on.
\\param effect the ID of the haptic effect to stop.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RunHapticEffect
\\sa SDL_StopHapticEffects
")
(:FUNCTION "SDL_DestroyHapticEffect" "Destroy a haptic effect on the device.

This will stop the effect if it's running. Effects are automatically
destroyed when the device is closed.

\\param haptic the SDL_Haptic device to destroy the effect on.
\\param effect the ID of the haptic effect to destroy.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateHapticEffect
")
(:FUNCTION "SDL_GetHapticEffectStatus"
 "Get the status of the current effect on the specified haptic device.

Device must support the SDL_HAPTIC_STATUS feature.

\\param haptic the SDL_Haptic device to query for the effect status on.
\\param effect the ID of the haptic effect to query its status.
\\returns true if it is playing, false if it isn't playing or haptic status
         isn't supported.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetHapticFeatures
")
(:FUNCTION "SDL_SetHapticGain"
 "Set the global gain of the specified haptic device.

Device must support the SDL_HAPTIC_GAIN feature.

The user may specify the maximum gain by setting the environment variable
`SDL_HAPTIC_GAIN_MAX` which should be between 0 and 100. All calls to
SDL_SetHapticGain() will scale linearly using `SDL_HAPTIC_GAIN_MAX` as the
maximum.

\\param haptic the SDL_Haptic device to set the gain on.
\\param gain value to set the gain to, should be between 0 and 100 (0 -
            100).
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetHapticFeatures
")
(:FUNCTION "SDL_SetHapticAutocenter" "Set the global autocenter of the device.

Autocenter should be between 0 and 100. Setting it to 0 will disable
autocentering.

Device must support the SDL_HAPTIC_AUTOCENTER feature.

\\param haptic the SDL_Haptic device to set autocentering on.
\\param autocenter value to set autocenter to (0-100).
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetHapticFeatures
")
(:FUNCTION "SDL_PauseHaptic" "Pause a haptic device.

Device must support the `SDL_HAPTIC_PAUSE` feature. Call SDL_ResumeHaptic()
to resume playback.

Do not modify the effects nor add new ones while the device is paused. That
can cause all sorts of weird errors.

\\param haptic the SDL_Haptic device to pause.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ResumeHaptic
")
(:FUNCTION "SDL_ResumeHaptic" "Resume a haptic device.

Call to unpause after SDL_PauseHaptic().

\\param haptic the SDL_Haptic device to unpause.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_PauseHaptic
")
(:FUNCTION "SDL_StopHapticEffects"
 "Stop all the currently playing effects on a haptic device.

\\param haptic the SDL_Haptic device to stop.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RunHapticEffect
\\sa SDL_StopHapticEffects
")
(:FUNCTION "SDL_HapticRumbleSupported"
 "Check whether rumble is supported on a haptic device.

\\param haptic haptic device to check for rumble support.
\\returns true if the effect is supported or false if it isn't.

\\since This function is available since SDL 3.2.0.

\\sa SDL_InitHapticRumble
")
(:FUNCTION "SDL_InitHapticRumble"
 "Initialize a haptic device for simple rumble playback.

\\param haptic the haptic device to initialize for simple rumble playback.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_PlayHapticRumble
\\sa SDL_StopHapticRumble
\\sa SDL_HapticRumbleSupported
")
(:FUNCTION "SDL_PlayHapticRumble"
 "Run a simple rumble effect on a haptic device.

\\param haptic the haptic device to play the rumble effect on.
\\param strength strength of the rumble to play as a 0-1 float value.
\\param length length of the rumble to play in milliseconds.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_InitHapticRumble
\\sa SDL_StopHapticRumble
")
(:FUNCTION "SDL_StopHapticRumble" "Stop the simple rumble on a haptic device.

\\param haptic the haptic device to stop the rumble effect on.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_PlayHapticRumble
")
(:STRUCT "SDL_hid_device" "An opaque handle representing an open HID device.

\\since This struct is available since SDL 3.2.0.
")
(:ENUM "SDL_hid_bus_type" "HID underlying bus types.

\\since This enum is available since SDL 3.2.0.
")
(:STRUCT "SDL_hid_device_info" "")
(:FUNCTION "SDL_hid_init" "Initialize the HIDAPI library.

This function initializes the HIDAPI library. Calling it is not strictly
necessary, as it will be called automatically by SDL_hid_enumerate() and
any of the SDL_hid_open_*() functions if it is needed. This function should
be called at the beginning of execution however, if there is a chance of
HIDAPI handles being opened by different threads simultaneously.

Each call to this function should have a matching call to SDL_hid_exit()

\\returns 0 on success or a negative error code on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_hid_exit
")
(:FUNCTION "SDL_hid_exit" "Finalize the HIDAPI library.

This function frees all of the static data associated with HIDAPI. It
should be called at the end of execution to avoid memory leaks.

\\returns 0 on success or a negative error code on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_hid_init
")
(:FUNCTION "SDL_hid_device_change_count"
 "Check to see if devices may have been added or removed.

Enumerating the HID devices is an expensive operation, so you can call this
to see if there have been any system device changes since the last call to
this function. A change in the counter returned doesn't necessarily mean
that anything has changed, but you can call SDL_hid_enumerate() to get an
updated device list.

Calling this function for the first time may cause a thread or other system
resource to be allocated to track device change notifications.

\\returns a change counter that is incremented with each potential device
         change, or 0 if device change detection isn't available.

\\since This function is available since SDL 3.2.0.

\\sa SDL_hid_enumerate
")
(:FUNCTION "SDL_hid_enumerate" "Enumerate the HID Devices.

This function returns a linked list of all the HID devices attached to the
system which match vendor_id and product_id. If `vendor_id` is set to 0
then any vendor matches. If `product_id` is set to 0 then any product
matches. If `vendor_id` and `product_id` are both set to 0, then all HID
devices will be returned.

By default SDL will only enumerate controllers, to reduce risk of hanging
or crashing on bad drivers, but SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS
can be set to \"0\" to enumerate all HID devices.

\\param vendor_id the Vendor ID (VID) of the types of device to open, or 0
                 to match any vendor.
\\param product_id the Product ID (PID) of the types of device to open, or 0
                  to match any product.
\\returns a pointer to a linked list of type SDL_hid_device_info, containing
         information about the HID devices attached to the system, or NULL
         in the case of failure. Free this linked list by calling
         SDL_hid_free_enumeration().

\\since This function is available since SDL 3.2.0.

\\sa SDL_hid_device_change_count
")
(:FUNCTION "SDL_hid_free_enumeration" "Free an enumeration linked list.

This function frees a linked list created by SDL_hid_enumerate().

\\param devs pointer to a list of struct_device returned from
            SDL_hid_enumerate().

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_hid_open"
 "Open a HID device using a Vendor ID (VID), Product ID (PID) and optionally
a serial number.

If `serial_number` is NULL, the first device with the specified VID and PID
is opened.

\\param vendor_id the Vendor ID (VID) of the device to open.
\\param product_id the Product ID (PID) of the device to open.
\\param serial_number the Serial Number of the device to open (Optionally
                     NULL).
\\returns a pointer to a SDL_hid_device object on success or NULL on
         failure; call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_hid_open_path" "Open a HID device by its path name.

The path name be determined by calling SDL_hid_enumerate(), or a
platform-specific path name can be used (eg: /dev/hidraw0 on Linux).

\\param path the path name of the device to open.
\\returns a pointer to a SDL_hid_device object on success or NULL on
         failure; call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_hid_write" "Write an Output report to a HID device.

The first byte of `data` must contain the Report ID. For devices which only
support a single report, this must be set to 0x0. The remaining bytes
contain the report data. Since the Report ID is mandatory, calls to
SDL_hid_write() will always contain one more byte than the report contains.
For example, if a hid report is 16 bytes long, 17 bytes must be passed to
SDL_hid_write(), the Report ID (or 0x0, for devices with a single report),
followed by the report data (16 bytes). In this example, the length passed
in would be 17.

SDL_hid_write() will send the data on the first OUT endpoint, if one
exists. If it does not, it will send the data through the Control Endpoint
(Endpoint 0).

\\param dev a device handle returned from SDL_hid_open().
\\param data the data to send, including the report number as the first
            byte.
\\param length the length in bytes of the data to send.
\\returns the actual number of bytes written and -1 on on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_hid_read_timeout"
 "Read an Input report from a HID device with timeout.

Input reports are returned to the host through the INTERRUPT IN endpoint.
The first byte will contain the Report number if the device uses numbered
reports.

\\param dev a device handle returned from SDL_hid_open().
\\param data a buffer to put the read data into.
\\param length the number of bytes to read. For devices with multiple
              reports, make sure to read an extra byte for the report
              number.
\\param milliseconds timeout in milliseconds or -1 for blocking wait.
\\returns the actual number of bytes read and -1 on on failure; call
         SDL_GetError() for more information. If no packet was available to
         be read within the timeout period, this function returns 0.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_hid_read" "Read an Input report from a HID device.

Input reports are returned to the host through the INTERRUPT IN endpoint.
The first byte will contain the Report number if the device uses numbered
reports.

\\param dev a device handle returned from SDL_hid_open().
\\param data a buffer to put the read data into.
\\param length the number of bytes to read. For devices with multiple
              reports, make sure to read an extra byte for the report
              number.
\\returns the actual number of bytes read and -1 on failure; call
         SDL_GetError() for more information. If no packet was available to
         be read and the handle is in non-blocking mode, this function
         returns 0.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_hid_set_nonblocking" "Set the device handle to be non-blocking.

In non-blocking mode calls to SDL_hid_read() will return immediately with a
value of 0 if there is no data to be read. In blocking mode, SDL_hid_read()
will wait (block) until there is data to read before returning.

Nonblocking can be turned on and off at any time.

\\param dev a device handle returned from SDL_hid_open().
\\param nonblock enable or not the nonblocking reads - 1 to enable
                nonblocking - 0 to disable nonblocking.
\\returns 0 on success or a negative error code on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_hid_send_feature_report" "Send a Feature report to the device.

Feature reports are sent over the Control endpoint as a Set_Report
transfer. The first byte of `data` must contain the Report ID. For devices
which only support a single report, this must be set to 0x0. The remaining
bytes contain the report data. Since the Report ID is mandatory, calls to
SDL_hid_send_feature_report() will always contain one more byte than the
report contains. For example, if a hid report is 16 bytes long, 17 bytes
must be passed to SDL_hid_send_feature_report(): the Report ID (or 0x0, for
devices which do not use numbered reports), followed by the report data (16
bytes). In this example, the length passed in would be 17.

\\param dev a device handle returned from SDL_hid_open().
\\param data the data to send, including the report number as the first
            byte.
\\param length the length in bytes of the data to send, including the report
              number.
\\returns the actual number of bytes written and -1 on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_hid_get_feature_report" "Get a feature report from a HID device.

Set the first byte of `data` to the Report ID of the report to be read.
Make sure to allow space for this extra byte in `data`. Upon return, the
first byte will still contain the Report ID, and the report data will start
in data[1].

\\param dev a device handle returned from SDL_hid_open().
\\param data a buffer to put the read data into, including the Report ID.
            Set the first byte of `data` to the Report ID of the report to
            be read, or set it to zero if your device does not use numbered
            reports.
\\param length the number of bytes to read, including an extra byte for the
              report ID. The buffer can be longer than the actual report.
\\returns the number of bytes read plus one for the report ID (which is
         still in the first byte), or -1 on on failure; call SDL_GetError()
         for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_hid_get_input_report" "Get an input report from a HID device.

Set the first byte of `data` to the Report ID of the report to be read.
Make sure to allow space for this extra byte in `data`. Upon return, the
first byte will still contain the Report ID, and the report data will start
in data[1].

\\param dev a device handle returned from SDL_hid_open().
\\param data a buffer to put the read data into, including the Report ID.
            Set the first byte of `data` to the Report ID of the report to
            be read, or set it to zero if your device does not use numbered
            reports.
\\param length the number of bytes to read, including an extra byte for the
              report ID. The buffer can be longer than the actual report.
\\returns the number of bytes read plus one for the report ID (which is
         still in the first byte), or -1 on on failure; call SDL_GetError()
         for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_hid_close" "Close a HID device.

\\param dev a device handle returned from SDL_hid_open().
\\returns 0 on success or a negative error code on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_hid_get_manufacturer_string"
 "Get The Manufacturer String from a HID device.

\\param dev a device handle returned from SDL_hid_open().
\\param string a wide string buffer to put the data into.
\\param maxlen the length of the buffer in multiples of wchar_t.
\\returns 0 on success or a negative error code on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_hid_get_product_string"
 "Get The Product String from a HID device.

\\param dev a device handle returned from SDL_hid_open().
\\param string a wide string buffer to put the data into.
\\param maxlen the length of the buffer in multiples of wchar_t.
\\returns 0 on success or a negative error code on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_hid_get_serial_number_string"
 "Get The Serial Number String from a HID device.

\\param dev a device handle returned from SDL_hid_open().
\\param string a wide string buffer to put the data into.
\\param maxlen the length of the buffer in multiples of wchar_t.
\\returns 0 on success or a negative error code on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_hid_get_indexed_string"
 "Get a string from a HID device, based on its string index.

\\param dev a device handle returned from SDL_hid_open().
\\param string_index the index of the string to get.
\\param string a wide string buffer to put the data into.
\\param maxlen the length of the buffer in multiples of wchar_t.
\\returns 0 on success or a negative error code on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_hid_get_device_info" "Get the device info from a HID device.

\\param dev a device handle returned from SDL_hid_open().
\\returns a pointer to the SDL_hid_device_info for this hid_device or NULL
         on failure; call SDL_GetError() for more information. This struct
         is valid until the device is closed with SDL_hid_close().

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_hid_get_report_descriptor"
 "Get a report descriptor from a HID device.

User has to provide a preallocated buffer where descriptor will be copied
to. The recommended size for a preallocated buffer is 4096 bytes.

\\param dev a device handle returned from SDL_hid_open().
\\param buf the buffer to copy descriptor into.
\\param buf_size the size of the buffer in bytes.
\\returns the number of bytes actually copied or -1 on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_hid_ble_scan"
 "Start or stop a BLE scan on iOS and tvOS to pair Steam Controllers.

\\param active true to start the scan, false to stop the scan.

\\since This function is available since SDL 3.2.0.
")
(:ENUM "SDL_HintPriority" "An enumeration of hint priorities.

\\since This enum is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SetHintWithPriority" "Set a hint with a specific priority.

The priority controls the behavior when setting a hint that already has a
value. Hints will replace existing hints of their priority and lower.
Environment variables are considered to have override priority.

\\param name the hint to set.
\\param value the value of the hint variable.
\\param priority the SDL_HintPriority level for the hint.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetHint
\\sa SDL_ResetHint
\\sa SDL_SetHint
")
(:FUNCTION "SDL_SetHint" "Set a hint with normal priority.

Hints will not be set if there is an existing override hint or environment
variable that takes precedence. You can use SDL_SetHintWithPriority() to
set the hint with override priority instead.

\\param name the hint to set.
\\param value the value of the hint variable.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetHint
\\sa SDL_ResetHint
\\sa SDL_SetHintWithPriority
")
(:FUNCTION "SDL_ResetHint" "Reset a hint to the default value.

This will reset a hint to the value of the environment variable, or NULL if
the environment isn't set. Callbacks will be called normally with this
change.

\\param name the hint to set.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetHint
\\sa SDL_ResetHints
")
(:FUNCTION "SDL_ResetHints" "Reset all hints to the default values.

This will reset all hints to the value of the associated environment
variable, or NULL if the environment isn't set. Callbacks will be called
normally with this change.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ResetHint
")
(:FUNCTION "SDL_GetHint" "Get the value of a hint.

\\param name the hint to query.
\\returns the string value of a hint or NULL if the hint isn't set.

\\threadsafety It is safe to call this function from any thread, however the
              return value only remains valid until the hint is changed; if
              another thread might do so, the app should supply locks
              and/or make a copy of the string. Note that using a hint
              callback instead is always thread-safe, as SDL holds a lock
              on the thread subsystem during the callback.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetHint
\\sa SDL_SetHintWithPriority
")
(:FUNCTION "SDL_GetHintBoolean" "Get the boolean value of a hint variable.

\\param name the name of the hint to get the boolean value from.
\\param default_value the value to return if the hint does not exist.
\\returns the boolean value of a hint or the provided default value if the
         hint does not exist.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetHint
\\sa SDL_SetHint
")
(:FUNCTION "void" "A callback used to send notifications of hint value changes.

This is called an initial time during SDL_AddHintCallback with the hint's
current value, and then again each time the hint's value changes.

\\param userdata what was passed as `userdata` to SDL_AddHintCallback().
\\param name what was passed as `name` to SDL_AddHintCallback().
\\param oldValue the previous hint value.
\\param newValue the new value hint is to be set to.

\\threadsafety This callback is fired from whatever thread is setting a new
              hint value. SDL holds a lock on the hint subsystem when
              calling this callback.

\\since This datatype is available since SDL 3.2.0.

\\sa SDL_AddHintCallback
")
(:FUNCTION "SDL_AddHintCallback" "Add a function to watch a particular hint.

The callback function is called _during_ this function, to provide it an
initial value, and again each time the hint's value changes.

\\param name the hint to watch.
\\param callback An SDL_HintCallback function that will be called when the
                hint value changes.
\\param userdata a pointer to pass to the callback function.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RemoveHintCallback
")
(:FUNCTION "SDL_RemoveHintCallback"
 "Remove a function watching a particular hint.

\\param name the hint being watched.
\\param callback an SDL_HintCallback function that will be called when the
                hint value changes.
\\param userdata a pointer being passed to the callback function.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_AddHintCallback
")
(:BITFIELD "SDL_InitFlags"
 "Initialization flags for SDL_Init and/or SDL_InitSubSystem

These are the flags which may be passed to SDL_Init(). You should specify
the subsystems which you will be using in your application.

\\since This datatype is available since SDL 3.2.0.

\\sa SDL_Init
\\sa SDL_Quit
\\sa SDL_InitSubSystem
\\sa SDL_QuitSubSystem
\\sa SDL_WasInit
")
(:ENUM "SDL_AppResult" "Return values for optional main callbacks.

Returning SDL_APP_SUCCESS or SDL_APP_FAILURE from SDL_AppInit,
SDL_AppEvent, or SDL_AppIterate will terminate the program and report
success/failure to the operating system. What that means is
platform-dependent. On Unix, for example, on success, the process error
code will be zero, and on failure it will be 1. This interface doesn't
allow you to return specific exit codes, just whether there was an error
generally or not.

Returning SDL_APP_CONTINUE from these functions will let the app continue
to run.

See
[Main callbacks in SDL3](https://wiki.libsdl.org/SDL3/README/main-functions#main-callbacks-in-sdl3)
for complete details.

\\since This enum is available since SDL 3.2.0.
")
(:FUNCTION "SDL_Init" "Initialize the SDL library.

SDL_Init() simply forwards to calling SDL_InitSubSystem(). Therefore, the
two may be used interchangeably. Though for readability of your code
SDL_InitSubSystem() might be preferred.

The file I/O (for example: SDL_IOFromFile) and threading (SDL_CreateThread)
subsystems are initialized by default. Message boxes
(SDL_ShowSimpleMessageBox) also attempt to work without initializing the
video subsystem, in hopes of being useful in showing an error dialog when
SDL_Init fails. You must specifically initialize other subsystems if you
use them in your application.

Logging (such as SDL_Log) works without initialization, too.

`flags` may be any of the following OR'd together:

- `SDL_INIT_AUDIO`: audio subsystem; automatically initializes the events
  subsystem
- `SDL_INIT_VIDEO`: video subsystem; automatically initializes the events
  subsystem, should be initialized on the main thread.
- `SDL_INIT_JOYSTICK`: joystick subsystem; automatically initializes the
  events subsystem
- `SDL_INIT_HAPTIC`: haptic (force feedback) subsystem
- `SDL_INIT_GAMEPAD`: gamepad subsystem; automatically initializes the
  joystick subsystem
- `SDL_INIT_EVENTS`: events subsystem
- `SDL_INIT_SENSOR`: sensor subsystem; automatically initializes the events
  subsystem
- `SDL_INIT_CAMERA`: camera subsystem; automatically initializes the events
  subsystem

Subsystem initialization is ref-counted, you must call SDL_QuitSubSystem()
for each SDL_InitSubSystem() to correctly shutdown a subsystem manually (or
call SDL_Quit() to force shutdown). If a subsystem is already loaded then
this call will increase the ref-count and return.

Consider reporting some basic metadata about your application before
calling SDL_Init, using either SDL_SetAppMetadata() or
SDL_SetAppMetadataProperty().

\\param flags subsystem initialization flags.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetAppMetadata
\\sa SDL_SetAppMetadataProperty
\\sa SDL_InitSubSystem
\\sa SDL_Quit
\\sa SDL_SetMainReady
\\sa SDL_WasInit
")
(:FUNCTION "SDL_InitSubSystem"
 "Compatibility function to initialize the SDL library.

This function and SDL_Init() are interchangeable.

\\param flags any of the flags used by SDL_Init(); see SDL_Init for details.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_Init
\\sa SDL_Quit
\\sa SDL_QuitSubSystem
")
(:FUNCTION "SDL_QuitSubSystem" "Shut down specific SDL subsystems.

You still need to call SDL_Quit() even if you close all open subsystems
with SDL_QuitSubSystem().

\\param flags any of the flags used by SDL_Init(); see SDL_Init for details.

\\since This function is available since SDL 3.2.0.

\\sa SDL_InitSubSystem
\\sa SDL_Quit
")
(:FUNCTION "SDL_WasInit"
 "Get a mask of the specified subsystems which are currently initialized.

\\param flags any of the flags used by SDL_Init(); see SDL_Init for details.
\\returns a mask of all initialized subsystems if `flags` is 0, otherwise it
         returns the initialization status of the specified subsystems.

\\since This function is available since SDL 3.2.0.

\\sa SDL_Init
\\sa SDL_InitSubSystem
")
(:FUNCTION "SDL_Quit" "Clean up all initialized subsystems.

You should call this function even if you have already shutdown each
initialized subsystem with SDL_QuitSubSystem(). It is safe to call this
function even in the case of errors in initialization.

You can use this function with atexit() to ensure that it is run when your
application is shutdown, but it is not wise to do this from a library or
other dynamically loaded code.

\\since This function is available since SDL 3.2.0.

\\sa SDL_Init
\\sa SDL_QuitSubSystem
")
(:FUNCTION "SDL_IsMainThread" "Return whether this is the main thread.

On Apple platforms, the main thread is the thread that runs your program's
main() entry point. On other platforms, the main thread is the one that
calls SDL_Init(SDL_INIT_VIDEO), which should usually be the one that runs
your program's main() entry point. If you are using the main callbacks,
SDL_AppInit(), SDL_AppIterate(), and SDL_AppQuit() are all called on the
main thread.

\\returns true if this thread is the main thread, or false otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RunOnMainThread
")
(:FUNCTION "SDL_RunOnMainThread"
 "Call a function on the main thread during event processing.

If this is called on the main thread, the callback is executed immediately.
If this is called on another thread, this callback is queued for execution
on the main thread during event processing.

Be careful of deadlocks when using this functionality. You should not have
the main thread wait for the current thread while this function is being
called with `wait_complete` true.

\\param callback the callback to call on the main thread.
\\param userdata a pointer that is passed to `callback`.
\\param wait_complete true to wait for the callback to complete, false to
                     return immediately.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_IsMainThread
")
(:FUNCTION "SDL_SetAppMetadata" "Specify basic metadata about your app.

You can optionally provide metadata about your app to SDL. This is not
required, but strongly encouraged.

There are several locations where SDL can make use of metadata (an \"About\"
box in the macOS menu bar, the name of the app can be shown on some audio
mixers, etc). Any piece of metadata can be left as NULL, if a specific
detail doesn't make sense for the app.

This function should be called as early as possible, before SDL_Init.
Multiple calls to this function are allowed, but various state might not
change once it has been set up with a previous call to this function.

Passing a NULL removes any previous metadata.

This is a simplified interface for the most important information. You can
supply significantly more detailed metadata with
SDL_SetAppMetadataProperty().

\\param appname The name of the application (\"My Game 2: Bad Guy's
               Revenge!\").
\\param appversion The version of the application (\"1.0.0beta5\" or a git
                  hash, or whatever makes sense).
\\param appidentifier A unique string in reverse-domain format that
                     identifies this app (\"com.example.mygame2\").
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetAppMetadataProperty
")
(:FUNCTION "SDL_SetAppMetadataProperty"
 "Specify metadata about your app through a set of properties.

You can optionally provide metadata about your app to SDL. This is not
required, but strongly encouraged.

There are several locations where SDL can make use of metadata (an \"About\"
box in the macOS menu bar, the name of the app can be shown on some audio
mixers, etc). Any piece of metadata can be left out, if a specific detail
doesn't make sense for the app.

This function should be called as early as possible, before SDL_Init.
Multiple calls to this function are allowed, but various state might not
change once it has been set up with a previous call to this function.

Once set, this metadata can be read using SDL_GetAppMetadataProperty().

These are the supported properties:

- `SDL_PROP_APP_METADATA_NAME_STRING`: The human-readable name of the
  application, like \"My Game 2: Bad Guy's Revenge!\". This will show up
  anywhere the OS shows the name of the application separately from window
  titles, such as volume control applets, etc. This defaults to \"SDL
  Application\".
- `SDL_PROP_APP_METADATA_VERSION_STRING`: The version of the app that is
  running; there are no rules on format, so \"1.0.3beta2\" and \"April 22nd,
  2024\" and a git hash are all valid options. This has no default.
- `SDL_PROP_APP_METADATA_IDENTIFIER_STRING`: A unique string that
  identifies this app. This must be in reverse-domain format, like
  \"com.example.mygame2\". This string is used by desktop compositors to
  identify and group windows together, as well as match applications with
  associated desktop settings and icons. If you plan to package your
  application in a container such as Flatpak, the app ID should match the
  name of your Flatpak container as well. This has no default.
- `SDL_PROP_APP_METADATA_CREATOR_STRING`: The human-readable name of the
  creator/developer/maker of this app, like \"MojoWorkshop, LLC\"
- `SDL_PROP_APP_METADATA_COPYRIGHT_STRING`: The human-readable copyright
  notice, like \"Copyright (c) 2024 MojoWorkshop, LLC\" or whatnot. Keep this
  to one line, don't paste a copy of a whole software license in here. This
  has no default.
- `SDL_PROP_APP_METADATA_URL_STRING`: A URL to the app on the web. Maybe a
  product page, or a storefront, or even a GitHub repository, for user's
  further information This has no default.
- `SDL_PROP_APP_METADATA_TYPE_STRING`: The type of application this is.
  Currently this string can be \"game\" for a video game, \"mediaplayer\" for a
  media player, or generically \"application\" if nothing else applies.
  Future versions of SDL might add new types. This defaults to
  \"application\".

\\param name the name of the metadata property to set.
\\param value the value of the property, or NULL to remove that property.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetAppMetadataProperty
\\sa SDL_SetAppMetadata
")
(:FUNCTION "SDL_GetAppMetadataProperty" "Get metadata about your app.

This returns metadata previously set using SDL_SetAppMetadata() or
SDL_SetAppMetadataProperty(). See SDL_SetAppMetadataProperty() for the list
of available properties and their meanings.

\\param name the name of the metadata property to get.
\\returns the current value of the metadata property, or the default if it
         is not set, NULL for properties with no default.

\\threadsafety It is safe to call this function from any thread, although
              the string returned is not protected and could potentially be
              freed if you call SDL_SetAppMetadataProperty() to set that
              property from another thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetAppMetadata
\\sa SDL_SetAppMetadataProperty
")
(:FUNCTION "SDL_TARGETING"
 "A macro to tag a function as targeting a specific CPU architecture.

This is a hint to the compiler that a function should be built with support
for a CPU instruction set that might be different than the rest of the
program.

The particulars of this are explained in the GCC documentation:

https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#index-target-function-attribute

An example of using this feature is to turn on SSE2 support for a specific
function, even if the rest of the source code is not compiled to use SSE2
code:

```c
#ifdef SDL_SSE2_INTRINSICS
static void SDL_TARGETING(\"sse2\") DoSomethingWithSSE2(char *x) {
   ...use SSE2 intrinsic functions, etc...
}
#endif

// later...
#ifdef SDL_SSE2_INTRINSICS
if (SDL_HasSSE2()) {
    DoSomethingWithSSE2(str);
}
#endif
```

The application is, on a whole, built without SSE2 instructions, so it will
run on Intel machines that don't support SSE2. But then at runtime, it
checks if the system supports the instructions, and then calls into a
function that uses SSE2 opcodes. The ifdefs make sure that this code isn't
used on platforms that don't have SSE2 at all.

On compilers without target support, this is defined to nothing.

This symbol is used by SDL internally, but apps and other libraries are
welcome to use it for their own interfaces as well.

\\since This macro is available since SDL 3.2.0.
")
(:ENUM "SDL_IOStatus" "SDL_IOStream status, set by a read or write operation.

\\since This enum is available since SDL 3.2.0.
")
(:ENUM "SDL_IOWhence" "Possible `whence` values for SDL_IOStream seeking.

These map to the same \"whence\" concept that `fseek` or `lseek` use in the
standard C runtime.

\\since This enum is available since SDL 3.2.0.
")
(:STRUCT "SDL_IOStreamInterface"
 "The function pointers that drive an SDL_IOStream.

Applications can provide this struct to SDL_OpenIO() to create their own
implementation of SDL_IOStream. This is not necessarily required, as SDL
already offers several common types of I/O streams, via functions like
SDL_IOFromFile() and SDL_IOFromMem().

This structure should be initialized using SDL_INIT_INTERFACE()

\\since This struct is available since SDL 3.2.0.

\\sa SDL_INIT_INTERFACE
")
(:STRUCT "SDL_IOStream" "The read/write operation structure.

This operates as an opaque handle. There are several APIs to create various
types of I/O streams, or an app can supply an SDL_IOStreamInterface to
SDL_OpenIO() to provide their own stream implementation behind this
struct's abstract interface.

\\since This struct is available since SDL 3.2.0.
")
(:FUNCTION "SDL_IOFromFile"
 "Use this function to create a new SDL_IOStream structure for reading from
and/or writing to a named file.

The `mode` string is treated roughly the same as in a call to the C
library's fopen(), even if SDL doesn't happen to use fopen() behind the
scenes.

Available `mode` strings:

- \"r\": Open a file for reading. The file must exist.
- \"w\": Create an empty file for writing. If a file with the same name
  already exists its content is erased and the file is treated as a new
  empty file.
- \"a\": Append to a file. Writing operations append data at the end of the
  file. The file is created if it does not exist.
- \"r+\": Open a file for update both reading and writing. The file must
  exist.
- \"w+\": Create an empty file for both reading and writing. If a file with
  the same name already exists its content is erased and the file is
  treated as a new empty file.
- \"a+\": Open a file for reading and appending. All writing operations are
  performed at the end of the file, protecting the previous content to be
  overwritten. You can reposition (fseek, rewind) the internal pointer to
  anywhere in the file for reading, but writing operations will move it
  back to the end of file. The file is created if it does not exist.

**NOTE**: In order to open a file as a binary file, a \"b\" character has to
be included in the `mode` string. This additional \"b\" character can either
be appended at the end of the string (thus making the following compound
modes: \"rb\", \"wb\", \"ab\", \"r+b\", \"w+b\", \"a+b\") or be inserted between the
letter and the \"+\" sign for the mixed modes (\"rb+\", \"wb+\", \"ab+\").
Additional characters may follow the sequence, although they should have no
effect. For example, \"t\" is sometimes appended to make explicit the file is
a text file.

This function supports Unicode filenames, but they must be encoded in UTF-8
format, regardless of the underlying operating system.

In Android, SDL_IOFromFile() can be used to open content:// URIs. As a
fallback, SDL_IOFromFile() will transparently open a matching filename in
the app's `assets`.

Closing the SDL_IOStream will close SDL's internal file handle.

The following properties may be set at creation time by SDL:

- `SDL_PROP_IOSTREAM_WINDOWS_HANDLE_POINTER`: a pointer, that can be cast
  to a win32 `HANDLE`, that this SDL_IOStream is using to access the
  filesystem. If the program isn't running on Windows, or SDL used some
  other method to access the filesystem, this property will not be set.
- `SDL_PROP_IOSTREAM_STDIO_FILE_POINTER`: a pointer, that can be cast to a
  stdio `FILE *`, that this SDL_IOStream is using to access the filesystem.
  If SDL used some other method to access the filesystem, this property
  will not be set. PLEASE NOTE that if SDL is using a different C runtime
  than your app, trying to use this pointer will almost certainly result in
  a crash! This is mostly a problem on Windows; make sure you build SDL and
  your app with the same compiler and settings to avoid it.
- `SDL_PROP_IOSTREAM_FILE_DESCRIPTOR_NUMBER`: a file descriptor that this
  SDL_IOStream is using to access the filesystem.
- `SDL_PROP_IOSTREAM_ANDROID_AASSET_POINTER`: a pointer, that can be cast
  to an Android NDK `AAsset *`, that this SDL_IOStream is using to access
  the filesystem. If SDL used some other method to access the filesystem,
  this property will not be set.

\\param file a UTF-8 string representing the filename to open.
\\param mode an ASCII string representing the mode to be used for opening
            the file.
\\returns a pointer to the SDL_IOStream structure that is created or NULL on
         failure; call SDL_GetError() for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CloseIO
\\sa SDL_FlushIO
\\sa SDL_ReadIO
\\sa SDL_SeekIO
\\sa SDL_TellIO
\\sa SDL_WriteIO
")
(:FUNCTION "SDL_IOFromMem"
 "Use this function to prepare a read-write memory buffer for use with
SDL_IOStream.

This function sets up an SDL_IOStream struct based on a memory area of a
certain size, for both read and write access.

This memory buffer is not copied by the SDL_IOStream; the pointer you
provide must remain valid until you close the stream. Closing the stream
will not free the original buffer.

If you need to make sure the SDL_IOStream never writes to the memory
buffer, you should use SDL_IOFromConstMem() with a read-only buffer of
memory instead.

The following properties will be set at creation time by SDL:

- `SDL_PROP_IOSTREAM_MEMORY_POINTER`: this will be the `mem` parameter that
  was passed to this function.
- `SDL_PROP_IOSTREAM_MEMORY_SIZE_NUMBER`: this will be the `size` parameter
  that was passed to this function.

\\param mem a pointer to a buffer to feed an SDL_IOStream stream.
\\param size the buffer size, in bytes.
\\returns a pointer to a new SDL_IOStream structure or NULL on failure; call
         SDL_GetError() for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_IOFromConstMem
\\sa SDL_CloseIO
\\sa SDL_FlushIO
\\sa SDL_ReadIO
\\sa SDL_SeekIO
\\sa SDL_TellIO
\\sa SDL_WriteIO
")
(:FUNCTION "SDL_IOFromConstMem"
 "Use this function to prepare a read-only memory buffer for use with
SDL_IOStream.

This function sets up an SDL_IOStream struct based on a memory area of a
certain size. It assumes the memory area is not writable.

Attempting to write to this SDL_IOStream stream will report an error
without writing to the memory buffer.

This memory buffer is not copied by the SDL_IOStream; the pointer you
provide must remain valid until you close the stream. Closing the stream
will not free the original buffer.

If you need to write to a memory buffer, you should use SDL_IOFromMem()
with a writable buffer of memory instead.

The following properties will be set at creation time by SDL:

- `SDL_PROP_IOSTREAM_MEMORY_POINTER`: this will be the `mem` parameter that
  was passed to this function.
- `SDL_PROP_IOSTREAM_MEMORY_SIZE_NUMBER`: this will be the `size` parameter
  that was passed to this function.

\\param mem a pointer to a read-only buffer to feed an SDL_IOStream stream.
\\param size the buffer size, in bytes.
\\returns a pointer to a new SDL_IOStream structure or NULL on failure; call
         SDL_GetError() for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_IOFromMem
\\sa SDL_CloseIO
\\sa SDL_ReadIO
\\sa SDL_SeekIO
\\sa SDL_TellIO
")
(:FUNCTION "SDL_IOFromDynamicMem"
 "Use this function to create an SDL_IOStream that is backed by dynamically
allocated memory.

This supports the following properties to provide access to the memory and
control over allocations:

- `SDL_PROP_IOSTREAM_DYNAMIC_MEMORY_POINTER`: a pointer to the internal
  memory of the stream. This can be set to NULL to transfer ownership of
  the memory to the application, which should free the memory with
  SDL_free(). If this is done, the next operation on the stream must be
  SDL_CloseIO().
- `SDL_PROP_IOSTREAM_DYNAMIC_CHUNKSIZE_NUMBER`: memory will be allocated in
  multiples of this size, defaulting to 1024.

\\returns a pointer to a new SDL_IOStream structure or NULL on failure; call
         SDL_GetError() for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CloseIO
\\sa SDL_ReadIO
\\sa SDL_SeekIO
\\sa SDL_TellIO
\\sa SDL_WriteIO
")
(:FUNCTION "SDL_OpenIO" "Create a custom SDL_IOStream.

Applications do not need to use this function unless they are providing
their own SDL_IOStream implementation. If you just need an SDL_IOStream to
read/write a common data source, you should use the built-in
implementations in SDL, like SDL_IOFromFile() or SDL_IOFromMem(), etc.

This function makes a copy of `iface` and the caller does not need to keep
it around after this call.

\\param iface the interface that implements this SDL_IOStream, initialized
             using SDL_INIT_INTERFACE().
\\param userdata the pointer that will be passed to the interface functions.
\\returns a pointer to the allocated memory on success or NULL on failure;
         call SDL_GetError() for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CloseIO
\\sa SDL_INIT_INTERFACE
\\sa SDL_IOFromConstMem
\\sa SDL_IOFromFile
\\sa SDL_IOFromMem
")
(:FUNCTION "SDL_CloseIO" "Close and free an allocated SDL_IOStream structure.

SDL_CloseIO() closes and cleans up the SDL_IOStream stream. It releases any
resources used by the stream and frees the SDL_IOStream itself. This
returns true on success, or false if the stream failed to flush to its
output (e.g. to disk).

Note that if this fails to flush the stream for any reason, this function
reports an error, but the SDL_IOStream is still invalid once this function
returns.

This call flushes any buffered writes to the operating system, but there
are no guarantees that those writes have gone to physical media; they might
be in the OS's file cache, waiting to go to disk later. If it's absolutely
crucial that writes go to disk immediately, so they are definitely stored
even if the power fails before the file cache would have caught up, one
should call SDL_FlushIO() before closing. Note that flushing takes time and
makes the system and your app operate less efficiently, so do so sparingly.

\\param context SDL_IOStream structure to close.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.

\\sa SDL_OpenIO
")
(:FUNCTION "SDL_GetIOProperties"
 "Get the properties associated with an SDL_IOStream.

\\param context a pointer to an SDL_IOStream structure.
\\returns a valid property ID on success or 0 on failure; call
         SDL_GetError() for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetIOStatus" "Query the stream status of an SDL_IOStream.

This information can be useful to decide if a short read or write was due
to an error, an EOF, or a non-blocking operation that isn't yet ready to
complete.

An SDL_IOStream's status is only expected to change after a SDL_ReadIO or
SDL_WriteIO call; don't expect it to change if you just call this query
function in a tight loop.

\\param context the SDL_IOStream to query.
\\returns an SDL_IOStatus enum with the current state.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetIOSize"
 "Use this function to get the size of the data stream in an SDL_IOStream.

\\param context the SDL_IOStream to get the size of the data stream from.
\\returns the size of the data stream in the SDL_IOStream on success or a
         negative error code on failure; call SDL_GetError() for more
         information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SeekIO" "Seek within an SDL_IOStream data stream.

This function seeks to byte `offset`, relative to `whence`.

`whence` may be any of the following values:

- `SDL_IO_SEEK_SET`: seek from the beginning of data
- `SDL_IO_SEEK_CUR`: seek relative to current read point
- `SDL_IO_SEEK_END`: seek relative to the end of data

If this stream can not seek, it will return -1.

\\param context a pointer to an SDL_IOStream structure.
\\param offset an offset in bytes, relative to `whence` location; can be
              negative.
\\param whence any of `SDL_IO_SEEK_SET`, `SDL_IO_SEEK_CUR`,
              `SDL_IO_SEEK_END`.
\\returns the final offset in the data stream after the seek or -1 on
         failure; call SDL_GetError() for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.

\\sa SDL_TellIO
")
(:FUNCTION "SDL_TellIO"
 "Determine the current read/write offset in an SDL_IOStream data stream.

SDL_TellIO is actually a wrapper function that calls the SDL_IOStream's
`seek` method, with an offset of 0 bytes from `SDL_IO_SEEK_CUR`, to
simplify application development.

\\param context an SDL_IOStream data stream object from which to get the
               current offset.
\\returns the current offset in the stream, or -1 if the information can not
         be determined.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SeekIO
")
(:FUNCTION "SDL_ReadIO" "Read from a data source.

This function reads up `size` bytes from the data source to the area
pointed at by `ptr`. This function may read less bytes than requested.

This function will return zero when the data stream is completely read, and
SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If zero is returned and
the stream is not at EOF, SDL_GetIOStatus() will return a different error
value and SDL_GetError() will offer a human-readable message.

\\param context a pointer to an SDL_IOStream structure.
\\param ptr a pointer to a buffer to read data into.
\\param size the number of bytes to read from the data source.
\\returns the number of bytes read, or 0 on end of file or other failure;
         call SDL_GetError() for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.

\\sa SDL_WriteIO
\\sa SDL_GetIOStatus
")
(:FUNCTION "SDL_WriteIO" "Write to an SDL_IOStream data stream.

This function writes exactly `size` bytes from the area pointed at by `ptr`
to the stream. If this fails for any reason, it'll return less than `size`
to demonstrate how far the write progressed. On success, it returns `size`.

On error, this function still attempts to write as much as possible, so it
might return a positive value less than the requested write size.

The caller can use SDL_GetIOStatus() to determine if the problem is
recoverable, such as a non-blocking write that can simply be retried later,
or a fatal error.

\\param context a pointer to an SDL_IOStream structure.
\\param ptr a pointer to a buffer containing data to write.
\\param size the number of bytes to write.
\\returns the number of bytes written, which will be less than `size` on
         failure; call SDL_GetError() for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.

\\sa SDL_IOprintf
\\sa SDL_ReadIO
\\sa SDL_SeekIO
\\sa SDL_FlushIO
\\sa SDL_GetIOStatus
")
(:FUNCTION "SDL_IOprintf" "Print to an SDL_IOStream data stream.

This function does formatted printing to the stream.

\\param context a pointer to an SDL_IOStream structure.
\\param fmt a printf() style format string.
\\param ... additional parameters matching % tokens in the `fmt` string, if
           any.
\\returns the number of bytes written or 0 on failure; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.

\\sa SDL_IOvprintf
\\sa SDL_WriteIO
")
(:FUNCTION "SDL_IOvprintf" "Print to an SDL_IOStream data stream.

This function does formatted printing to the stream.

\\param context a pointer to an SDL_IOStream structure.
\\param fmt a printf() style format string.
\\param ap a variable argument list.
\\returns the number of bytes written or 0 on failure; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.

\\sa SDL_IOprintf
\\sa SDL_WriteIO
")
(:FUNCTION "SDL_FlushIO" "Flush any buffered data in the stream.

This function makes sure that any buffered data is written to the stream.
Normally this isn't necessary but if the stream is a pipe or socket it
guarantees that any pending data is sent.

\\param context SDL_IOStream structure to flush.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.

\\sa SDL_OpenIO
\\sa SDL_WriteIO
")
(:FUNCTION "SDL_LoadFile_IO" "Load all the data from an SDL data stream.

The data is allocated with a zero byte at the end (null terminated) for
convenience. This extra byte is not included in the value reported via
`datasize`.

The data should be freed with SDL_free().

\\param src the SDL_IOStream to read all available data from.
\\param datasize a pointer filled in with the number of bytes read, may be
                NULL.
\\param closeio if true, calls SDL_CloseIO() on `src` before returning, even
               in the case of an error.
\\returns the data or NULL on failure; call SDL_GetError() for more
         information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.

\\sa SDL_LoadFile
\\sa SDL_SaveFile_IO
")
(:FUNCTION "SDL_LoadFile" "Load all the data from a file path.

The data is allocated with a zero byte at the end (null terminated) for
convenience. This extra byte is not included in the value reported via
`datasize`.

The data should be freed with SDL_free().

\\param file the path to read all available data from.
\\param datasize if not NULL, will store the number of bytes read.
\\returns the data or NULL on failure; call SDL_GetError() for more
         information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.

\\sa SDL_LoadFile_IO
\\sa SDL_SaveFile
")
(:FUNCTION "SDL_SaveFile_IO" "Save all the data into an SDL data stream.

\\param src the SDL_IOStream to write all data to.
\\param data the data to be written. If datasize is 0, may be NULL or a
            invalid pointer.
\\param datasize the number of bytes to be written.
\\param closeio if true, calls SDL_CloseIO() on `src` before returning, even
               in the case of an error.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SaveFile
\\sa SDL_LoadFile_IO
")
(:FUNCTION "SDL_SaveFile" "Save all the data into a file path.

\\param file the path to write all available data into.
\\param data the data to be written. If datasize is 0, may be NULL or a
            invalid pointer.
\\param datasize the number of bytes to be written.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SaveFile_IO
\\sa SDL_LoadFile
")
(:FUNCTION "SDL_ReadU8" "Use this function to read a byte from an SDL_IOStream.

This function will return false when the data stream is completely read,
and SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If false is returned
and the stream is not at EOF, SDL_GetIOStatus() will return a different
error value and SDL_GetError() will offer a human-readable message.

\\param src the SDL_IOStream to read from.
\\param value a pointer filled in with the data read.
\\returns true on success or false on failure or EOF; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ReadS8"
 "Use this function to read a signed byte from an SDL_IOStream.

This function will return false when the data stream is completely read,
and SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If false is returned
and the stream is not at EOF, SDL_GetIOStatus() will return a different
error value and SDL_GetError() will offer a human-readable message.

\\param src the SDL_IOStream to read from.
\\param value a pointer filled in with the data read.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ReadU16LE"
 "Use this function to read 16 bits of little-endian data from an
SDL_IOStream and return in native format.

SDL byteswaps the data only if necessary, so the data returned will be in
the native byte order.

This function will return false when the data stream is completely read,
and SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If false is returned
and the stream is not at EOF, SDL_GetIOStatus() will return a different
error value and SDL_GetError() will offer a human-readable message.

\\param src the stream from which to read data.
\\param value a pointer filled in with the data read.
\\returns true on successful write or false on failure; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ReadS16LE"
 "Use this function to read 16 bits of little-endian data from an
SDL_IOStream and return in native format.

SDL byteswaps the data only if necessary, so the data returned will be in
the native byte order.

This function will return false when the data stream is completely read,
and SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If false is returned
and the stream is not at EOF, SDL_GetIOStatus() will return a different
error value and SDL_GetError() will offer a human-readable message.

\\param src the stream from which to read data.
\\param value a pointer filled in with the data read.
\\returns true on successful write or false on failure; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ReadU16BE"
 "Use this function to read 16 bits of big-endian data from an SDL_IOStream
and return in native format.

SDL byteswaps the data only if necessary, so the data returned will be in
the native byte order.

This function will return false when the data stream is completely read,
and SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If false is returned
and the stream is not at EOF, SDL_GetIOStatus() will return a different
error value and SDL_GetError() will offer a human-readable message.

\\param src the stream from which to read data.
\\param value a pointer filled in with the data read.
\\returns true on successful write or false on failure; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ReadS16BE"
 "Use this function to read 16 bits of big-endian data from an SDL_IOStream
and return in native format.

SDL byteswaps the data only if necessary, so the data returned will be in
the native byte order.

This function will return false when the data stream is completely read,
and SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If false is returned
and the stream is not at EOF, SDL_GetIOStatus() will return a different
error value and SDL_GetError() will offer a human-readable message.

\\param src the stream from which to read data.
\\param value a pointer filled in with the data read.
\\returns true on successful write or false on failure; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ReadU32LE"
 "Use this function to read 32 bits of little-endian data from an
SDL_IOStream and return in native format.

SDL byteswaps the data only if necessary, so the data returned will be in
the native byte order.

This function will return false when the data stream is completely read,
and SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If false is returned
and the stream is not at EOF, SDL_GetIOStatus() will return a different
error value and SDL_GetError() will offer a human-readable message.

\\param src the stream from which to read data.
\\param value a pointer filled in with the data read.
\\returns true on successful write or false on failure; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ReadS32LE"
 "Use this function to read 32 bits of little-endian data from an
SDL_IOStream and return in native format.

SDL byteswaps the data only if necessary, so the data returned will be in
the native byte order.

This function will return false when the data stream is completely read,
and SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If false is returned
and the stream is not at EOF, SDL_GetIOStatus() will return a different
error value and SDL_GetError() will offer a human-readable message.

\\param src the stream from which to read data.
\\param value a pointer filled in with the data read.
\\returns true on successful write or false on failure; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ReadU32BE"
 "Use this function to read 32 bits of big-endian data from an SDL_IOStream
and return in native format.

SDL byteswaps the data only if necessary, so the data returned will be in
the native byte order.

This function will return false when the data stream is completely read,
and SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If false is returned
and the stream is not at EOF, SDL_GetIOStatus() will return a different
error value and SDL_GetError() will offer a human-readable message.

\\param src the stream from which to read data.
\\param value a pointer filled in with the data read.
\\returns true on successful write or false on failure; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ReadS32BE"
 "Use this function to read 32 bits of big-endian data from an SDL_IOStream
and return in native format.

SDL byteswaps the data only if necessary, so the data returned will be in
the native byte order.

This function will return false when the data stream is completely read,
and SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If false is returned
and the stream is not at EOF, SDL_GetIOStatus() will return a different
error value and SDL_GetError() will offer a human-readable message.

\\param src the stream from which to read data.
\\param value a pointer filled in with the data read.
\\returns true on successful write or false on failure; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ReadU64LE"
 "Use this function to read 64 bits of little-endian data from an
SDL_IOStream and return in native format.

SDL byteswaps the data only if necessary, so the data returned will be in
the native byte order.

This function will return false when the data stream is completely read,
and SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If false is returned
and the stream is not at EOF, SDL_GetIOStatus() will return a different
error value and SDL_GetError() will offer a human-readable message.

\\param src the stream from which to read data.
\\param value a pointer filled in with the data read.
\\returns true on successful write or false on failure; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ReadS64LE"
 "Use this function to read 64 bits of little-endian data from an
SDL_IOStream and return in native format.

SDL byteswaps the data only if necessary, so the data returned will be in
the native byte order.

This function will return false when the data stream is completely read,
and SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If false is returned
and the stream is not at EOF, SDL_GetIOStatus() will return a different
error value and SDL_GetError() will offer a human-readable message.

\\param src the stream from which to read data.
\\param value a pointer filled in with the data read.
\\returns true on successful write or false on failure; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ReadU64BE"
 "Use this function to read 64 bits of big-endian data from an SDL_IOStream
and return in native format.

SDL byteswaps the data only if necessary, so the data returned will be in
the native byte order.

This function will return false when the data stream is completely read,
and SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If false is returned
and the stream is not at EOF, SDL_GetIOStatus() will return a different
error value and SDL_GetError() will offer a human-readable message.

\\param src the stream from which to read data.
\\param value a pointer filled in with the data read.
\\returns true on successful write or false on failure; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ReadS64BE"
 "Use this function to read 64 bits of big-endian data from an SDL_IOStream
and return in native format.

SDL byteswaps the data only if necessary, so the data returned will be in
the native byte order.

This function will return false when the data stream is completely read,
and SDL_GetIOStatus() will return SDL_IO_STATUS_EOF. If false is returned
and the stream is not at EOF, SDL_GetIOStatus() will return a different
error value and SDL_GetError() will offer a human-readable message.

\\param src the stream from which to read data.
\\param value a pointer filled in with the data read.
\\returns true on successful write or false on failure; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_WriteU8" "Use this function to write a byte to an SDL_IOStream.

\\param dst the SDL_IOStream to write to.
\\param value the byte value to write.
\\returns true on successful write or false on failure; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_WriteS8"
 "Use this function to write a signed byte to an SDL_IOStream.

\\param dst the SDL_IOStream to write to.
\\param value the byte value to write.
\\returns true on successful write or false on failure; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_WriteU16LE"
 "Use this function to write 16 bits in native format to an SDL_IOStream as
little-endian data.

SDL byteswaps the data only if necessary, so the application always
specifies native format, and the data written will be in little-endian
format.

\\param dst the stream to which data will be written.
\\param value the data to be written, in native format.
\\returns true on successful write or false on failure; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_WriteS16LE"
 "Use this function to write 16 bits in native format to an SDL_IOStream as
little-endian data.

SDL byteswaps the data only if necessary, so the application always
specifies native format, and the data written will be in little-endian
format.

\\param dst the stream to which data will be written.
\\param value the data to be written, in native format.
\\returns true on successful write or false on failure; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_WriteU16BE"
 "Use this function to write 16 bits in native format to an SDL_IOStream as
big-endian data.

SDL byteswaps the data only if necessary, so the application always
specifies native format, and the data written will be in big-endian format.

\\param dst the stream to which data will be written.
\\param value the data to be written, in native format.
\\returns true on successful write or false on failure; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_WriteS16BE"
 "Use this function to write 16 bits in native format to an SDL_IOStream as
big-endian data.

SDL byteswaps the data only if necessary, so the application always
specifies native format, and the data written will be in big-endian format.

\\param dst the stream to which data will be written.
\\param value the data to be written, in native format.
\\returns true on successful write or false on failure; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_WriteU32LE"
 "Use this function to write 32 bits in native format to an SDL_IOStream as
little-endian data.

SDL byteswaps the data only if necessary, so the application always
specifies native format, and the data written will be in little-endian
format.

\\param dst the stream to which data will be written.
\\param value the data to be written, in native format.
\\returns true on successful write or false on failure; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_WriteS32LE"
 "Use this function to write 32 bits in native format to an SDL_IOStream as
little-endian data.

SDL byteswaps the data only if necessary, so the application always
specifies native format, and the data written will be in little-endian
format.

\\param dst the stream to which data will be written.
\\param value the data to be written, in native format.
\\returns true on successful write or false on failure; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_WriteU32BE"
 "Use this function to write 32 bits in native format to an SDL_IOStream as
big-endian data.

SDL byteswaps the data only if necessary, so the application always
specifies native format, and the data written will be in big-endian format.

\\param dst the stream to which data will be written.
\\param value the data to be written, in native format.
\\returns true on successful write or false on failure; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_WriteS32BE"
 "Use this function to write 32 bits in native format to an SDL_IOStream as
big-endian data.

SDL byteswaps the data only if necessary, so the application always
specifies native format, and the data written will be in big-endian format.

\\param dst the stream to which data will be written.
\\param value the data to be written, in native format.
\\returns true on successful write or false on failure; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_WriteU64LE"
 "Use this function to write 64 bits in native format to an SDL_IOStream as
little-endian data.

SDL byteswaps the data only if necessary, so the application always
specifies native format, and the data written will be in little-endian
format.

\\param dst the stream to which data will be written.
\\param value the data to be written, in native format.
\\returns true on successful write or false on failure; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_WriteS64LE"
 "Use this function to write 64 bits in native format to an SDL_IOStream as
little-endian data.

SDL byteswaps the data only if necessary, so the application always
specifies native format, and the data written will be in little-endian
format.

\\param dst the stream to which data will be written.
\\param value the data to be written, in native format.
\\returns true on successful write or false on failure; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_WriteU64BE"
 "Use this function to write 64 bits in native format to an SDL_IOStream as
big-endian data.

SDL byteswaps the data only if necessary, so the application always
specifies native format, and the data written will be in big-endian format.

\\param dst the stream to which data will be written.
\\param value the data to be written, in native format.
\\returns true on successful write or false on failure; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_WriteS64BE"
 "Use this function to write 64 bits in native format to an SDL_IOStream as
big-endian data.

SDL byteswaps the data only if necessary, so the application always
specifies native format, and the data written will be in big-endian format.

\\param dst the stream to which data will be written.
\\param value the data to be written, in native format.
\\returns true on successful write or false on failure; call SDL_GetError()
         for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.
")
(:STRUCT "SDL_Joystick"
 "The joystick structure used to identify an SDL joystick.

This is opaque data.

\\since This struct is available since SDL 3.2.0.
")
(:BITFIELD "SDL_JoystickID"
 "This is a unique ID for a joystick for the time it is connected to the
system, and is never reused for the lifetime of the application.

If the joystick is disconnected and reconnected, it will get a new ID.

The value 0 is an invalid ID.

\\since This datatype is available since SDL 3.2.0.
")
(:ENUM "SDL_JoystickType" "An enum of some common joystick types.

In some cases, SDL can identify a low-level joystick as being a certain
type of device, and will report it through SDL_GetJoystickType (or
SDL_GetJoystickTypeForID).

This is by no means a complete list of everything that can be plugged into
a computer.

\\since This enum is available since SDL 3.2.0.
")
(:ENUM "SDL_JoystickConnectionState"
 "Possible connection states for a joystick device.

This is used by SDL_GetJoystickConnectionState to report how a device is
connected to the system.

\\since This enum is available since SDL 3.2.0.
")
(:FUNCTION "SDL_LockJoysticks" "Locking for atomic access to the joystick API.

The SDL joystick functions are thread-safe, however you can lock the
joysticks while processing to guarantee that the joystick list won't change
and joystick and gamepad events will not be delivered.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_UnlockJoysticks"
 "Unlocking for atomic access to the joystick API.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_HasJoystick" "Return whether a joystick is currently connected.

\\returns true if a joystick is connected, false otherwise.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetJoysticks
")
(:FUNCTION "SDL_GetJoysticks" "Get a list of currently connected joysticks.

\\param count a pointer filled in with the number of joysticks returned, may
             be NULL.
\\returns a 0 terminated array of joystick instance IDs or NULL on failure;
         call SDL_GetError() for more information. This should be freed
         with SDL_free() when it is no longer needed.

\\since This function is available since SDL 3.2.0.

\\sa SDL_HasJoystick
\\sa SDL_OpenJoystick
")
(:FUNCTION "SDL_GetJoystickNameForID"
 "Get the implementation dependent name of a joystick.

This can be called before any joysticks are opened.

\\param instance_id the joystick instance ID.
\\returns the name of the selected joystick. If no name can be found, this
         function returns NULL; call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetJoystickName
\\sa SDL_GetJoysticks
")
(:FUNCTION "SDL_GetJoystickPathForID"
 "Get the implementation dependent path of a joystick.

This can be called before any joysticks are opened.

\\param instance_id the joystick instance ID.
\\returns the path of the selected joystick. If no path can be found, this
         function returns NULL; call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetJoystickPath
\\sa SDL_GetJoysticks
")
(:FUNCTION "SDL_GetJoystickPlayerIndexForID"
 "Get the player index of a joystick.

This can be called before any joysticks are opened.

\\param instance_id the joystick instance ID.
\\returns the player index of a joystick, or -1 if it's not available.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetJoystickPlayerIndex
\\sa SDL_GetJoysticks
")
(:FUNCTION "SDL_GetJoystickGUIDForID"
 "Get the implementation-dependent GUID of a joystick.

This can be called before any joysticks are opened.

\\param instance_id the joystick instance ID.
\\returns the GUID of the selected joystick. If called with an invalid
         instance_id, this function returns a zero GUID.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetJoystickGUID
\\sa SDL_GUIDToString
")
(:FUNCTION "SDL_GetJoystickVendorForID"
 "Get the USB vendor ID of a joystick, if available.

This can be called before any joysticks are opened. If the vendor ID isn't
available this function returns 0.

\\param instance_id the joystick instance ID.
\\returns the USB vendor ID of the selected joystick. If called with an
         invalid instance_id, this function returns 0.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetJoystickVendor
\\sa SDL_GetJoysticks
")
(:FUNCTION "SDL_GetJoystickProductForID"
 "Get the USB product ID of a joystick, if available.

This can be called before any joysticks are opened. If the product ID isn't
available this function returns 0.

\\param instance_id the joystick instance ID.
\\returns the USB product ID of the selected joystick. If called with an
         invalid instance_id, this function returns 0.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetJoystickProduct
\\sa SDL_GetJoysticks
")
(:FUNCTION "SDL_GetJoystickProductVersionForID"
 "Get the product version of a joystick, if available.

This can be called before any joysticks are opened. If the product version
isn't available this function returns 0.

\\param instance_id the joystick instance ID.
\\returns the product version of the selected joystick. If called with an
         invalid instance_id, this function returns 0.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetJoystickProductVersion
\\sa SDL_GetJoysticks
")
(:FUNCTION "SDL_GetJoystickTypeForID" "Get the type of a joystick, if available.

This can be called before any joysticks are opened.

\\param instance_id the joystick instance ID.
\\returns the SDL_JoystickType of the selected joystick. If called with an
         invalid instance_id, this function returns
         `SDL_JOYSTICK_TYPE_UNKNOWN`.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetJoystickType
\\sa SDL_GetJoysticks
")
(:FUNCTION "SDL_OpenJoystick" "Open a joystick for use.

The joystick subsystem must be initialized before a joystick can be opened
for use.

\\param instance_id the joystick instance ID.
\\returns a joystick identifier or NULL on failure; call SDL_GetError() for
         more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CloseJoystick
")
(:FUNCTION "SDL_GetJoystickFromID"
 "Get the SDL_Joystick associated with an instance ID, if it has been opened.

\\param instance_id the instance ID to get the SDL_Joystick for.
\\returns an SDL_Joystick on success or NULL on failure or if it hasn't been
         opened yet; call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetJoystickFromPlayerIndex"
 "Get the SDL_Joystick associated with a player index.

\\param player_index the player index to get the SDL_Joystick for.
\\returns an SDL_Joystick on success or NULL on failure; call SDL_GetError()
         for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetJoystickPlayerIndex
\\sa SDL_SetJoystickPlayerIndex
")
(:STRUCT "SDL_VirtualJoystickTouchpadDesc"
 "The structure that describes a virtual joystick touchpad.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_VirtualJoystickDesc
")
(:STRUCT "SDL_VirtualJoystickSensorDesc"
 "The structure that describes a virtual joystick sensor.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_VirtualJoystickDesc
")
(:STRUCT "SDL_VirtualJoystickDesc"
 "The structure that describes a virtual joystick.

This structure should be initialized using SDL_INIT_INTERFACE(). All
elements of this structure are optional.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_AttachVirtualJoystick
\\sa SDL_INIT_INTERFACE
\\sa SDL_VirtualJoystickSensorDesc
\\sa SDL_VirtualJoystickTouchpadDesc
")
(:FUNCTION "SDL_AttachVirtualJoystick" "Attach a new virtual joystick.

\\param desc joystick description, initialized using SDL_INIT_INTERFACE().
\\returns the joystick instance ID, or 0 on failure; call SDL_GetError() for
         more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_DetachVirtualJoystick
")
(:FUNCTION "SDL_DetachVirtualJoystick" "Detach a virtual joystick.

\\param instance_id the joystick instance ID, previously returned from
                   SDL_AttachVirtualJoystick().
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_AttachVirtualJoystick
")
(:FUNCTION "SDL_IsJoystickVirtual" "Query whether or not a joystick is virtual.

\\param instance_id the joystick instance ID.
\\returns true if the joystick is virtual, false otherwise.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SetJoystickVirtualAxis"
 "Set the state of an axis on an opened virtual joystick.

Please note that values set here will not be applied until the next call to
SDL_UpdateJoysticks, which can either be called directly, or can be called
indirectly through various other SDL APIs, including, but not limited to
the following: SDL_PollEvent, SDL_PumpEvents, SDL_WaitEventTimeout,
SDL_WaitEvent.

Note that when sending trigger axes, you should scale the value to the full
range of Sint16. For example, a trigger at rest would have the value of
`SDL_JOYSTICK_AXIS_MIN`.

\\param joystick the virtual joystick on which to set state.
\\param axis the index of the axis on the virtual joystick to update.
\\param value the new value for the specified axis.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SetJoystickVirtualBall"
 "Generate ball motion on an opened virtual joystick.

Please note that values set here will not be applied until the next call to
SDL_UpdateJoysticks, which can either be called directly, or can be called
indirectly through various other SDL APIs, including, but not limited to
the following: SDL_PollEvent, SDL_PumpEvents, SDL_WaitEventTimeout,
SDL_WaitEvent.

\\param joystick the virtual joystick on which to set state.
\\param ball the index of the ball on the virtual joystick to update.
\\param xrel the relative motion on the X axis.
\\param yrel the relative motion on the Y axis.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SetJoystickVirtualButton"
 "Set the state of a button on an opened virtual joystick.

Please note that values set here will not be applied until the next call to
SDL_UpdateJoysticks, which can either be called directly, or can be called
indirectly through various other SDL APIs, including, but not limited to
the following: SDL_PollEvent, SDL_PumpEvents, SDL_WaitEventTimeout,
SDL_WaitEvent.

\\param joystick the virtual joystick on which to set state.
\\param button the index of the button on the virtual joystick to update.
\\param down true if the button is pressed, false otherwise.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SetJoystickVirtualHat"
 "Set the state of a hat on an opened virtual joystick.

Please note that values set here will not be applied until the next call to
SDL_UpdateJoysticks, which can either be called directly, or can be called
indirectly through various other SDL APIs, including, but not limited to
the following: SDL_PollEvent, SDL_PumpEvents, SDL_WaitEventTimeout,
SDL_WaitEvent.

\\param joystick the virtual joystick on which to set state.
\\param hat the index of the hat on the virtual joystick to update.
\\param value the new value for the specified hat.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SetJoystickVirtualTouchpad"
 "Set touchpad finger state on an opened virtual joystick.

Please note that values set here will not be applied until the next call to
SDL_UpdateJoysticks, which can either be called directly, or can be called
indirectly through various other SDL APIs, including, but not limited to
the following: SDL_PollEvent, SDL_PumpEvents, SDL_WaitEventTimeout,
SDL_WaitEvent.

\\param joystick the virtual joystick on which to set state.
\\param touchpad the index of the touchpad on the virtual joystick to
                update.
\\param finger the index of the finger on the touchpad to set.
\\param down true if the finger is pressed, false if the finger is released.
\\param x the x coordinate of the finger on the touchpad, normalized 0 to 1,
         with the origin in the upper left.
\\param y the y coordinate of the finger on the touchpad, normalized 0 to 1,
         with the origin in the upper left.
\\param pressure the pressure of the finger.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SendJoystickVirtualSensorData"
 "Send a sensor update for an opened virtual joystick.

Please note that values set here will not be applied until the next call to
SDL_UpdateJoysticks, which can either be called directly, or can be called
indirectly through various other SDL APIs, including, but not limited to
the following: SDL_PollEvent, SDL_PumpEvents, SDL_WaitEventTimeout,
SDL_WaitEvent.

\\param joystick the virtual joystick on which to set state.
\\param type the type of the sensor on the virtual joystick to update.
\\param sensor_timestamp a 64-bit timestamp in nanoseconds associated with
                        the sensor reading.
\\param data the data associated with the sensor reading.
\\param num_values the number of values pointed to by `data`.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetJoystickProperties"
 "Get the properties associated with a joystick.

The following read-only properties are provided by SDL:

- `SDL_PROP_JOYSTICK_CAP_MONO_LED_BOOLEAN`: true if this joystick has an
  LED that has adjustable brightness
- `SDL_PROP_JOYSTICK_CAP_RGB_LED_BOOLEAN`: true if this joystick has an LED
  that has adjustable color
- `SDL_PROP_JOYSTICK_CAP_PLAYER_LED_BOOLEAN`: true if this joystick has a
  player LED
- `SDL_PROP_JOYSTICK_CAP_RUMBLE_BOOLEAN`: true if this joystick has
  left/right rumble
- `SDL_PROP_JOYSTICK_CAP_TRIGGER_RUMBLE_BOOLEAN`: true if this joystick has
  simple trigger rumble

\\param joystick the SDL_Joystick obtained from SDL_OpenJoystick().
\\returns a valid property ID on success or 0 on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetJoystickName"
 "Get the implementation dependent name of a joystick.

\\param joystick the SDL_Joystick obtained from SDL_OpenJoystick().
\\returns the name of the selected joystick. If no name can be found, this
         function returns NULL; call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetJoystickNameForID
")
(:FUNCTION "SDL_GetJoystickPath"
 "Get the implementation dependent path of a joystick.

\\param joystick the SDL_Joystick obtained from SDL_OpenJoystick().
\\returns the path of the selected joystick. If no path can be found, this
         function returns NULL; call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetJoystickPathForID
")
(:FUNCTION "SDL_GetJoystickPlayerIndex"
 "Get the player index of an opened joystick.

For XInput controllers this returns the XInput user index. Many joysticks
will not be able to supply this information.

\\param joystick the SDL_Joystick obtained from SDL_OpenJoystick().
\\returns the player index, or -1 if it's not available.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetJoystickPlayerIndex
")
(:FUNCTION "SDL_SetJoystickPlayerIndex"
 "Set the player index of an opened joystick.

\\param joystick the SDL_Joystick obtained from SDL_OpenJoystick().
\\param player_index player index to assign to this joystick, or -1 to clear
                    the player index and turn off player LEDs.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetJoystickPlayerIndex
")
(:FUNCTION "SDL_GetJoystickGUID"
 "Get the implementation-dependent GUID for the joystick.

This function requires an open joystick.

\\param joystick the SDL_Joystick obtained from SDL_OpenJoystick().
\\returns the GUID of the given joystick. If called on an invalid index,
         this function returns a zero GUID; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetJoystickGUIDForID
\\sa SDL_GUIDToString
")
(:FUNCTION "SDL_GetJoystickVendor"
 "Get the USB vendor ID of an opened joystick, if available.

If the vendor ID isn't available this function returns 0.

\\param joystick the SDL_Joystick obtained from SDL_OpenJoystick().
\\returns the USB vendor ID of the selected joystick, or 0 if unavailable.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetJoystickVendorForID
")
(:FUNCTION "SDL_GetJoystickProduct"
 "Get the USB product ID of an opened joystick, if available.

If the product ID isn't available this function returns 0.

\\param joystick the SDL_Joystick obtained from SDL_OpenJoystick().
\\returns the USB product ID of the selected joystick, or 0 if unavailable.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetJoystickProductForID
")
(:FUNCTION "SDL_GetJoystickProductVersion"
 "Get the product version of an opened joystick, if available.

If the product version isn't available this function returns 0.

\\param joystick the SDL_Joystick obtained from SDL_OpenJoystick().
\\returns the product version of the selected joystick, or 0 if unavailable.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetJoystickProductVersionForID
")
(:FUNCTION "SDL_GetJoystickFirmwareVersion"
 "Get the firmware version of an opened joystick, if available.

If the firmware version isn't available this function returns 0.

\\param joystick the SDL_Joystick obtained from SDL_OpenJoystick().
\\returns the firmware version of the selected joystick, or 0 if
         unavailable.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetJoystickSerial"
 "Get the serial number of an opened joystick, if available.

Returns the serial number of the joystick, or NULL if it is not available.

\\param joystick the SDL_Joystick obtained from SDL_OpenJoystick().
\\returns the serial number of the selected joystick, or NULL if
         unavailable.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetJoystickType" "Get the type of an opened joystick.

\\param joystick the SDL_Joystick obtained from SDL_OpenJoystick().
\\returns the SDL_JoystickType of the selected joystick.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetJoystickTypeForID
")
(:FUNCTION "SDL_GetJoystickGUIDInfo"
 "Get the device information encoded in a SDL_GUID structure.

\\param guid the SDL_GUID you wish to get info about.
\\param vendor a pointer filled in with the device VID, or 0 if not
              available.
\\param product a pointer filled in with the device PID, or 0 if not
               available.
\\param version a pointer filled in with the device version, or 0 if not
               available.
\\param crc16 a pointer filled in with a CRC used to distinguish different
             products with the same VID/PID, or 0 if not available.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetJoystickGUIDForID
")
(:FUNCTION "SDL_JoystickConnected" "Get the status of a specified joystick.

\\param joystick the joystick to query.
\\returns true if the joystick has been opened, false if it has not; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetJoystickID" "Get the instance ID of an opened joystick.

\\param joystick an SDL_Joystick structure containing joystick information.
\\returns the instance ID of the specified joystick on success or 0 on
         failure; call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetNumJoystickAxes"
 "Get the number of general axis controls on a joystick.

Often, the directional pad on a game controller will either look like 4
separate buttons or a POV hat, and not axes, but all of this is up to the
device and platform.

\\param joystick an SDL_Joystick structure containing joystick information.
\\returns the number of axis controls/number of axes on success or -1 on
         failure; call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetJoystickAxis
\\sa SDL_GetNumJoystickBalls
\\sa SDL_GetNumJoystickButtons
\\sa SDL_GetNumJoystickHats
")
(:FUNCTION "SDL_GetNumJoystickBalls"
 "Get the number of trackballs on a joystick.

Joystick trackballs have only relative motion events associated with them
and their state cannot be polled.

Most joysticks do not have trackballs.

\\param joystick an SDL_Joystick structure containing joystick information.
\\returns the number of trackballs on success or -1 on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetJoystickBall
\\sa SDL_GetNumJoystickAxes
\\sa SDL_GetNumJoystickButtons
\\sa SDL_GetNumJoystickHats
")
(:FUNCTION "SDL_GetNumJoystickHats" "Get the number of POV hats on a joystick.

\\param joystick an SDL_Joystick structure containing joystick information.
\\returns the number of POV hats on success or -1 on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetJoystickHat
\\sa SDL_GetNumJoystickAxes
\\sa SDL_GetNumJoystickBalls
\\sa SDL_GetNumJoystickButtons
")
(:FUNCTION "SDL_GetNumJoystickButtons" "Get the number of buttons on a joystick.

\\param joystick an SDL_Joystick structure containing joystick information.
\\returns the number of buttons on success or -1 on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetJoystickButton
\\sa SDL_GetNumJoystickAxes
\\sa SDL_GetNumJoystickBalls
\\sa SDL_GetNumJoystickHats
")
(:FUNCTION "SDL_SetJoystickEventsEnabled"
 "Set the state of joystick event processing.

If joystick events are disabled, you must call SDL_UpdateJoysticks()
yourself and check the state of the joystick when you want joystick
information.

\\param enabled whether to process joystick events or not.

\\since This function is available since SDL 3.2.0.

\\sa SDL_JoystickEventsEnabled
\\sa SDL_UpdateJoysticks
")
(:FUNCTION "SDL_JoystickEventsEnabled"
 "Query the state of joystick event processing.

If joystick events are disabled, you must call SDL_UpdateJoysticks()
yourself and check the state of the joystick when you want joystick
information.

\\returns true if joystick events are being processed, false otherwise.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetJoystickEventsEnabled
")
(:FUNCTION "SDL_UpdateJoysticks"
 "Update the current state of the open joysticks.

This is called automatically by the event loop if any joystick events are
enabled.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetJoystickAxis"
 "Get the current state of an axis control on a joystick.

SDL makes no promises about what part of the joystick any given axis refers
to. Your game should have some sort of configuration UI to let users
specify what each axis should be bound to. Alternately, SDL's higher-level
Game Controller API makes a great effort to apply order to this lower-level
interface, so you know that a specific axis is the \"left thumb stick,\" etc.

The value returned by SDL_GetJoystickAxis() is a signed integer (-32768 to
32767) representing the current position of the axis. It may be necessary
to impose certain tolerances on these values to account for jitter.

\\param joystick an SDL_Joystick structure containing joystick information.
\\param axis the axis to query; the axis indices start at index 0.
\\returns a 16-bit signed integer representing the current position of the
         axis or 0 on failure; call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetNumJoystickAxes
")
(:FUNCTION "SDL_GetJoystickAxisInitialState"
 "Get the initial state of an axis control on a joystick.

The state is a value ranging from -32768 to 32767.

The axis indices start at index 0.

\\param joystick an SDL_Joystick structure containing joystick information.
\\param axis the axis to query; the axis indices start at index 0.
\\param state upon return, the initial value is supplied here.
\\returns true if this axis has any initial value, or false if not.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetJoystickBall" "Get the ball axis change since the last poll.

Trackballs can only return relative motion since the last call to
SDL_GetJoystickBall(), these motion deltas are placed into `dx` and `dy`.

Most joysticks do not have trackballs.

\\param joystick the SDL_Joystick to query.
\\param ball the ball index to query; ball indices start at index 0.
\\param dx stores the difference in the x axis position since the last poll.
\\param dy stores the difference in the y axis position since the last poll.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetNumJoystickBalls
")
(:FUNCTION "SDL_GetJoystickHat"
 "Get the current state of a POV hat on a joystick.

The returned value will be one of the `SDL_HAT_*` values.

\\param joystick an SDL_Joystick structure containing joystick information.
\\param hat the hat index to get the state from; indices start at index 0.
\\returns the current hat position.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetNumJoystickHats
")
(:FUNCTION "SDL_GetJoystickButton"
 "Get the current state of a button on a joystick.

\\param joystick an SDL_Joystick structure containing joystick information.
\\param button the button index to get the state from; indices start at
              index 0.
\\returns true if the button is pressed, false otherwise.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetNumJoystickButtons
")
(:FUNCTION "SDL_RumbleJoystick" "Start a rumble effect.

Each call to this function cancels any previous rumble effect, and calling
it with 0 intensity stops any rumbling.

This function requires you to process SDL events or call
SDL_UpdateJoysticks() to update rumble state.

\\param joystick the joystick to vibrate.
\\param low_frequency_rumble the intensity of the low frequency (left)
                            rumble motor, from 0 to 0xFFFF.
\\param high_frequency_rumble the intensity of the high frequency (right)
                             rumble motor, from 0 to 0xFFFF.
\\param duration_ms the duration of the rumble effect, in milliseconds.
\\returns true, or false if rumble isn't supported on this joystick.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_RumbleJoystickTriggers"
 "Start a rumble effect in the joystick's triggers.

Each call to this function cancels any previous trigger rumble effect, and
calling it with 0 intensity stops any rumbling.

Note that this is rumbling of the _triggers_ and not the game controller as
a whole. This is currently only supported on Xbox One controllers. If you
want the (more common) whole-controller rumble, use SDL_RumbleJoystick()
instead.

This function requires you to process SDL events or call
SDL_UpdateJoysticks() to update rumble state.

\\param joystick the joystick to vibrate.
\\param left_rumble the intensity of the left trigger rumble motor, from 0
                   to 0xFFFF.
\\param right_rumble the intensity of the right trigger rumble motor, from 0
                    to 0xFFFF.
\\param duration_ms the duration of the rumble effect, in milliseconds.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RumbleJoystick
")
(:FUNCTION "SDL_SetJoystickLED" "Update a joystick's LED color.

An example of a joystick LED is the light on the back of a PlayStation 4's
DualShock 4 controller.

For joysticks with a single color LED, the maximum of the RGB values will
be used as the LED brightness.

\\param joystick the joystick to update.
\\param red the intensity of the red LED.
\\param green the intensity of the green LED.
\\param blue the intensity of the blue LED.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SendJoystickEffect" "Send a joystick specific effect packet.

\\param joystick the joystick to affect.
\\param data the data to send to the joystick.
\\param size the size of the data to send to the joystick.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_CloseJoystick"
 "Close a joystick previously opened with SDL_OpenJoystick().

\\param joystick the joystick device to close.

\\since This function is available since SDL 3.2.0.

\\sa SDL_OpenJoystick
")
(:FUNCTION "SDL_GetJoystickConnectionState"
 "Get the connection state of a joystick.

\\param joystick the joystick to query.
\\returns the connection state on success or
         `SDL_JOYSTICK_CONNECTION_INVALID` on failure; call SDL_GetError()
         for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetJoystickPowerInfo" "Get the battery state of a joystick.

You should never take a battery status as absolute truth. Batteries
(especially failing batteries) are delicate hardware, and the values
reported here are best estimates based on what that hardware reports. It's
not uncommon for older batteries to lose stored power much faster than it
reports, or completely drain when reporting it has 20 percent left, etc.

\\param joystick the joystick to query.
\\param percent a pointer filled in with the percentage of battery life
               left, between 0 and 100, or NULL to ignore. This will be
               filled in with -1 we can't determine a value or there is no
               battery.
\\returns the current battery state or `SDL_POWERSTATE_ERROR` on failure;
         call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:BITFIELD "SDL_KeyboardID"
 "This is a unique ID for a keyboard for the time it is connected to the
system, and is never reused for the lifetime of the application.

If the keyboard is disconnected and reconnected, it will get a new ID.

The value 0 is an invalid ID.

\\since This datatype is available since SDL 3.2.0.
")
(:FUNCTION "SDL_HasKeyboard" "Return whether a keyboard is currently connected.

\\returns true if a keyboard is connected, false otherwise.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetKeyboards
")
(:FUNCTION "SDL_GetKeyboards" "Get a list of currently connected keyboards.

Note that this will include any device or virtual driver that includes
keyboard functionality, including some mice, KVM switches, motherboard
power buttons, etc. You should wait for input from a device before you
consider it actively in use.

\\param count a pointer filled in with the number of keyboards returned, may
             be NULL.
\\returns a 0 terminated array of keyboards instance IDs or NULL on failure;
         call SDL_GetError() for more information. This should be freed
         with SDL_free() when it is no longer needed.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetKeyboardNameForID
\\sa SDL_HasKeyboard
")
(:FUNCTION "SDL_GetKeyboardNameForID" "Get the name of a keyboard.

This function returns \"\" if the keyboard doesn't have a name.

\\param instance_id the keyboard instance ID.
\\returns the name of the selected keyboard or NULL on failure; call
         SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetKeyboards
")
(:FUNCTION "SDL_GetKeyboardFocus"
 "Query the window which currently has keyboard focus.

\\returns the window with keyboard focus.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetKeyboardState"
 "Get a snapshot of the current state of the keyboard.

The pointer returned is a pointer to an internal SDL array. It will be
valid for the whole lifetime of the application and should not be freed by
the caller.

A array element with a value of true means that the key is pressed and a
value of false means that it is not. Indexes into this array are obtained
by using SDL_Scancode values.

Use SDL_PumpEvents() to update the state array.

This function gives you the current state after all events have been
processed, so if a key or button has been pressed and released before you
process events, then the pressed state will never show up in the
SDL_GetKeyboardState() calls.

Note: This function doesn't take into account whether shift has been
pressed or not.

\\param numkeys if non-NULL, receives the length of the returned array.
\\returns a pointer to an array of key states.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_PumpEvents
\\sa SDL_ResetKeyboard
")
(:FUNCTION "SDL_ResetKeyboard" "Clear the state of the keyboard.

This function will generate key up events for all pressed keys.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetKeyboardState
")
(:FUNCTION "SDL_GetModState"
 "Get the current key modifier state for the keyboard.

\\returns an OR'd combination of the modifier keys for the keyboard. See
         SDL_Keymod for details.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetKeyboardState
\\sa SDL_SetModState
")
(:FUNCTION "SDL_SetModState"
 "Set the current key modifier state for the keyboard.

The inverse of SDL_GetModState(), SDL_SetModState() allows you to impose
modifier key states on your application. Simply pass your desired modifier
states into `modstate`. This value may be a bitwise, OR'd combination of
SDL_Keymod values.

This does not change the keyboard state, only the key modifier flags that
SDL reports.

\\param modstate the desired SDL_Keymod for the keyboard.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetModState
")
(:FUNCTION "SDL_GetKeyFromScancode"
 "Get the key code corresponding to the given scancode according to the
current keyboard layout.

If you want to get the keycode as it would be delivered in key events,
including options specified in SDL_HINT_KEYCODE_OPTIONS, then you should
pass `key_event` as true. Otherwise this function simply translates the
scancode based on the given modifier state.

\\param scancode the desired SDL_Scancode to query.
\\param modstate the modifier state to use when translating the scancode to
                a keycode.
\\param key_event true if the keycode will be used in key events.
\\returns the SDL_Keycode that corresponds to the given SDL_Scancode.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetKeyName
\\sa SDL_GetScancodeFromKey
")
(:FUNCTION "SDL_GetScancodeFromKey"
 "Get the scancode corresponding to the given key code according to the
current keyboard layout.

Note that there may be multiple scancode+modifier states that can generate
this keycode, this will just return the first one found.

\\param key the desired SDL_Keycode to query.
\\param modstate a pointer to the modifier state that would be used when the
                scancode generates this key, may be NULL.
\\returns the SDL_Scancode that corresponds to the given SDL_Keycode.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetKeyFromScancode
\\sa SDL_GetScancodeName
")
(:FUNCTION "SDL_SetScancodeName" "Set a human-readable name for a scancode.

\\param scancode the desired SDL_Scancode.
\\param name the name to use for the scancode, encoded as UTF-8. The string
            is not copied, so the pointer given to this function must stay
            valid while SDL is being used.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetScancodeName
")
(:FUNCTION "SDL_GetScancodeName" "Get a human-readable name for a scancode.

**Warning**: The returned name is by design not stable across platforms,
e.g. the name for `SDL_SCANCODE_LGUI` is \"Left GUI\" under Linux but \"Left
Windows\" under Microsoft Windows, and some scancodes like
`SDL_SCANCODE_NONUSBACKSLASH` don't have any name at all. There are even
scancodes that share names, e.g. `SDL_SCANCODE_RETURN` and
`SDL_SCANCODE_RETURN2` (both called \"Return\"). This function is therefore
unsuitable for creating a stable cross-platform two-way mapping between
strings and scancodes.

\\param scancode the desired SDL_Scancode to query.
\\returns a pointer to the name for the scancode. If the scancode doesn't
         have a name this function returns an empty string (\"\").

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetScancodeFromKey
\\sa SDL_GetScancodeFromName
\\sa SDL_SetScancodeName
")
(:FUNCTION "SDL_GetScancodeFromName" "Get a scancode from a human-readable name.

\\param name the human-readable scancode name.
\\returns the SDL_Scancode, or `SDL_SCANCODE_UNKNOWN` if the name wasn't
         recognized; call SDL_GetError() for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetKeyFromName
\\sa SDL_GetScancodeFromKey
\\sa SDL_GetScancodeName
")
(:FUNCTION "SDL_GetKeyName" "Get a human-readable name for a key.

If the key doesn't have a name, this function returns an empty string (\"\").

Letters will be presented in their uppercase form, if applicable.

\\param key the desired SDL_Keycode to query.
\\returns a UTF-8 encoded string of the key name.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetKeyFromName
\\sa SDL_GetKeyFromScancode
\\sa SDL_GetScancodeFromKey
")
(:FUNCTION "SDL_GetKeyFromName" "Get a key code from a human-readable name.

\\param name the human-readable key name.
\\returns key code, or `SDLK_UNKNOWN` if the name wasn't recognized; call
         SDL_GetError() for more information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetKeyFromScancode
\\sa SDL_GetKeyName
\\sa SDL_GetScancodeFromName
")
(:FUNCTION "SDL_StartTextInput"
 "Start accepting Unicode text input events in a window.

This function will enable text input (SDL_EVENT_TEXT_INPUT and
SDL_EVENT_TEXT_EDITING events) in the specified window. Please use this
function paired with SDL_StopTextInput().

Text input events are not received by default.

On some platforms using this function shows the screen keyboard and/or
activates an IME, which can prevent some key press events from being passed
through.

\\param window the window to enable text input.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetTextInputArea
\\sa SDL_StartTextInputWithProperties
\\sa SDL_StopTextInput
\\sa SDL_TextInputActive
")
(:ENUM "SDL_TextInputType" "Text input type.

These are the valid values for SDL_PROP_TEXTINPUT_TYPE_NUMBER. Not every
value is valid on every platform, but where a value isn't supported, a
reasonable fallback will be used.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_StartTextInputWithProperties
")
(:ENUM "SDL_Capitalization" "Auto capitalization type.

These are the valid values for SDL_PROP_TEXTINPUT_CAPITALIZATION_NUMBER.
Not every value is valid on every platform, but where a value isn't
supported, a reasonable fallback will be used.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_StartTextInputWithProperties
")
(:FUNCTION "SDL_StartTextInputWithProperties"
 "Start accepting Unicode text input events in a window, with properties
describing the input.

This function will enable text input (SDL_EVENT_TEXT_INPUT and
SDL_EVENT_TEXT_EDITING events) in the specified window. Please use this
function paired with SDL_StopTextInput().

Text input events are not received by default.

On some platforms using this function shows the screen keyboard and/or
activates an IME, which can prevent some key press events from being passed
through.

These are the supported properties:

- `SDL_PROP_TEXTINPUT_TYPE_NUMBER` - an SDL_TextInputType value that
  describes text being input, defaults to SDL_TEXTINPUT_TYPE_TEXT.
- `SDL_PROP_TEXTINPUT_CAPITALIZATION_NUMBER` - an SDL_Capitalization value
  that describes how text should be capitalized, defaults to
  SDL_CAPITALIZE_SENTENCES for normal text entry, SDL_CAPITALIZE_WORDS for
  SDL_TEXTINPUT_TYPE_TEXT_NAME, and SDL_CAPITALIZE_NONE for e-mail
  addresses, usernames, and passwords.
- `SDL_PROP_TEXTINPUT_AUTOCORRECT_BOOLEAN` - true to enable auto completion
  and auto correction, defaults to true.
- `SDL_PROP_TEXTINPUT_MULTILINE_BOOLEAN` - true if multiple lines of text
  are allowed. This defaults to true if SDL_HINT_RETURN_KEY_HIDES_IME is
  \"0\" or is not set, and defaults to false if SDL_HINT_RETURN_KEY_HIDES_IME
  is \"1\".

On Android you can directly specify the input type:

- `SDL_PROP_TEXTINPUT_ANDROID_INPUTTYPE_NUMBER` - the text input type to
  use, overriding other properties. This is documented at
  https://developer.android.com/reference/android/text/InputType

\\param window the window to enable text input.
\\param props the properties to use.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetTextInputArea
\\sa SDL_StartTextInput
\\sa SDL_StopTextInput
\\sa SDL_TextInputActive
")
(:FUNCTION "SDL_TextInputActive"
 "Check whether or not Unicode text input events are enabled for a window.

\\param window the window to check.
\\returns true if text input events are enabled else false.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_StartTextInput
")
(:FUNCTION "SDL_StopTextInput"
 "Stop receiving any text input events in a window.

If SDL_StartTextInput() showed the screen keyboard, this function will hide
it.

\\param window the window to disable text input.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_StartTextInput
")
(:FUNCTION "SDL_ClearComposition"
 "Dismiss the composition window/IME without disabling the subsystem.

\\param window the window to affect.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_StartTextInput
\\sa SDL_StopTextInput
")
(:FUNCTION "SDL_SetTextInputArea" "Set the area used to type Unicode text input.

Native input methods may place a window with word suggestions near the
cursor, without covering the text being entered.

\\param window the window for which to set the text input area.
\\param rect the SDL_Rect representing the text input area, in window
            coordinates, or NULL to clear it.
\\param cursor the offset of the current cursor location relative to
              `rect->x`, in window coordinates.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetTextInputArea
\\sa SDL_StartTextInput
")
(:FUNCTION "SDL_GetTextInputArea" "Get the area used to type Unicode text input.

This returns the values previously set by SDL_SetTextInputArea().

\\param window the window for which to query the text input area.
\\param rect a pointer to an SDL_Rect filled in with the text input area,
            may be NULL.
\\param cursor a pointer to the offset of the current cursor location
              relative to `rect->x`, may be NULL.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetTextInputArea
")
(:FUNCTION "SDL_HasScreenKeyboardSupport"
 "Check whether the platform has screen keyboard support.

\\returns true if the platform has some screen keyboard support or false if
         not.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_StartTextInput
\\sa SDL_ScreenKeyboardShown
")
(:FUNCTION "SDL_ScreenKeyboardShown"
 "Check whether the screen keyboard is shown for given window.

\\param window the window for which screen keyboard should be queried.
\\returns true if screen keyboard is shown or false if not.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_HasScreenKeyboardSupport
")
(:BITFIELD "SDL_Keycode" "The SDL virtual key representation.

Values of this type are used to represent keyboard keys using the current
layout of the keyboard. These values include Unicode values representing
the unmodified character that would be generated by pressing the key, or an
`SDLK_*` constant for those keys that do not generate characters.

A special exception is the number keys at the top of the keyboard which map
to SDLK_0...SDLK_9 on AZERTY layouts.

Keys with the `SDLK_EXTENDED_MASK` bit set do not map to a scancode or
unicode code point.

\\since This datatype is available since SDL 3.2.0.
")
(:TYPEDEF "SDL_Keymod" "Valid key modifiers (possibly OR'd together).

\\since This datatype is available since SDL 3.2.0.
")
(:STRUCT "SDL_SharedObject"
 "An opaque datatype that represents a loaded shared object.

\\since This datatype is available since SDL 3.2.0.

\\sa SDL_LoadObject
\\sa SDL_LoadFunction
\\sa SDL_UnloadObject
")
(:FUNCTION "SDL_LoadObject" "Dynamically load a shared object.

\\param sofile a system-dependent name of the object file.
\\returns an opaque pointer to the object handle or NULL on failure; call
         SDL_GetError() for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_LoadFunction
\\sa SDL_UnloadObject
")
(:FUNCTION "SDL_LoadFunction"
 "Look up the address of the named function in a shared object.

This function pointer is no longer valid after calling SDL_UnloadObject().

This function can only look up C function names. Other languages may have
name mangling and intrinsic language support that varies from compiler to
compiler.

Make sure you declare your function pointers with the same calling
convention as the actual library function. Your code will crash
mysteriously if you do not do this.

If the requested function doesn't exist, NULL is returned.

\\param handle a valid shared object handle returned by SDL_LoadObject().
\\param name the name of the function to look up.
\\returns a pointer to the function or NULL on failure; call SDL_GetError()
         for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_LoadObject
")
(:FUNCTION "SDL_UnloadObject" "Unload a shared object from memory.

Note that any pointers from this object looked up through
SDL_LoadFunction() will no longer be valid.

\\param handle a valid shared object handle returned by SDL_LoadObject().

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_LoadObject
")
(:STRUCT "SDL_Locale" "A struct to provide locale data.

Locale data is split into a spoken language, like English, and an optional
country, like Canada. The language will be in ISO-639 format (so English
would be \"en\"), and the country, if not NULL, will be an ISO-3166 country
code (so Canada would be \"CA\").

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetPreferredLocales
")
(:FUNCTION "SDL_GetPreferredLocales" "Report the user's preferred locale.

Returned language strings are in the format xx, where 'xx' is an ISO-639
language specifier (such as \"en\" for English, \"de\" for German, etc).
Country strings are in the format YY, where \"YY\" is an ISO-3166 country
code (such as \"US\" for the United States, \"CA\" for Canada, etc). Country
might be NULL if there's no specific guidance on them (so you might get {
\"en\", \"US\" } for American English, but { \"en\", NULL } means \"English
language, generically\"). Language strings are never NULL, except to
terminate the array.

Please note that not all of these strings are 2 characters; some are three
or more.

The returned list of locales are in the order of the user's preference. For
example, a German citizen that is fluent in US English and knows enough
Japanese to navigate around Tokyo might have a list like: { \"de\", \"en_US\",
\"jp\", NULL }. Someone from England might prefer British English (where
\"color\" is spelled \"colour\", etc), but will settle for anything like it: {
\"en_GB\", \"en\", NULL }.

This function returns NULL on error, including when the platform does not
supply this information at all.

This might be a \"slow\" call that has to query the operating system. It's
best to ask for this once and save the results. However, this list can
change, usually because the user has changed a system preference outside of
your program; SDL will send an SDL_EVENT_LOCALE_CHANGED event in this case,
if possible, and you can call this function again to get an updated copy of
preferred locales.

\\param count a pointer filled in with the number of locales returned, may
             be NULL.
\\returns a NULL terminated array of locale pointers, or NULL on failure;
         call SDL_GetError() for more information. This is a single
         allocation that should be freed with SDL_free() when it is no
         longer needed.

\\since This function is available since SDL 3.2.0.
")
(:ENUM "SDL_LogCategory" "The predefined log categories

By default the application and gpu categories are enabled at the INFO
level, the assert category is enabled at the WARN level, test is enabled at
the VERBOSE level and all other categories are enabled at the ERROR level.

\\since This enum is available since SDL 3.2.0.
")
(:ENUM "SDL_LogPriority" "The predefined log priorities

\\since This enum is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SetLogPriorities" "Set the priority of all log categories.

\\param priority the SDL_LogPriority to assign.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ResetLogPriorities
\\sa SDL_SetLogPriority
")
(:FUNCTION "SDL_SetLogPriority" "Set the priority of a particular log category.

\\param category the category to assign a priority to.
\\param priority the SDL_LogPriority to assign.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetLogPriority
\\sa SDL_ResetLogPriorities
\\sa SDL_SetLogPriorities
")
(:FUNCTION "SDL_GetLogPriority" "Get the priority of a particular log category.

\\param category the category to query.
\\returns the SDL_LogPriority for the requested category.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetLogPriority
")
(:FUNCTION "SDL_ResetLogPriorities" "Reset all priorities to default.

This is called by SDL_Quit().

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetLogPriorities
\\sa SDL_SetLogPriority
")
(:FUNCTION "SDL_SetLogPriorityPrefix"
 "Set the text prepended to log messages of a given priority.

By default SDL_LOG_PRIORITY_INFO and below have no prefix, and
SDL_LOG_PRIORITY_WARN and higher have a prefix showing their priority, e.g.
\"WARNING: \".

\\param priority the SDL_LogPriority to modify.
\\param prefix the prefix to use for that log priority, or NULL to use no
              prefix.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetLogPriorities
\\sa SDL_SetLogPriority
")
(:FUNCTION "SDL_Log" "Compute the natural logarithm of `x`.

Domain: `0 < x <= INF`

Range: `-INF <= y <= INF`

It is an error for `x` to be less than or equal to 0.

This function operates on double-precision floating point values, use
SDL_logf for single-precision floats.

This function may use a different approximation across different versions,
platforms and configurations. i.e, it can return a different value given
the same input on different machines or operating systems, or if SDL is
updated.

\\param x floating point value. Must be greater than 0.
\\returns the natural logarithm of `x`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_logf
\\sa SDL_log10
\\sa SDL_exp
")
(:FUNCTION "SDL_LogTrace" "Log a message with SDL_LOG_PRIORITY_TRACE.

\\param category the category of the message.
\\param fmt a printf() style message format string.
\\param ... additional parameters matching % tokens in the **fmt** string,
           if any.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_Log
\\sa SDL_LogCritical
\\sa SDL_LogDebug
\\sa SDL_LogError
\\sa SDL_LogInfo
\\sa SDL_LogMessage
\\sa SDL_LogMessageV
\\sa SDL_LogTrace
\\sa SDL_LogVerbose
\\sa SDL_LogWarn
")
(:FUNCTION "SDL_LogVerbose" "Log a message with SDL_LOG_PRIORITY_VERBOSE.

\\param category the category of the message.
\\param fmt a printf() style message format string.
\\param ... additional parameters matching % tokens in the **fmt** string,
           if any.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_Log
\\sa SDL_LogCritical
\\sa SDL_LogDebug
\\sa SDL_LogError
\\sa SDL_LogInfo
\\sa SDL_LogMessage
\\sa SDL_LogMessageV
\\sa SDL_LogWarn
")
(:FUNCTION "SDL_LogDebug" "Log a message with SDL_LOG_PRIORITY_DEBUG.

\\param category the category of the message.
\\param fmt a printf() style message format string.
\\param ... additional parameters matching % tokens in the **fmt** string,
           if any.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_Log
\\sa SDL_LogCritical
\\sa SDL_LogError
\\sa SDL_LogInfo
\\sa SDL_LogMessage
\\sa SDL_LogMessageV
\\sa SDL_LogTrace
\\sa SDL_LogVerbose
\\sa SDL_LogWarn
")
(:FUNCTION "SDL_LogInfo" "Log a message with SDL_LOG_PRIORITY_INFO.

\\param category the category of the message.
\\param fmt a printf() style message format string.
\\param ... additional parameters matching % tokens in the **fmt** string,
           if any.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_Log
\\sa SDL_LogCritical
\\sa SDL_LogDebug
\\sa SDL_LogError
\\sa SDL_LogMessage
\\sa SDL_LogMessageV
\\sa SDL_LogTrace
\\sa SDL_LogVerbose
\\sa SDL_LogWarn
")
(:FUNCTION "SDL_LogWarn" "Log a message with SDL_LOG_PRIORITY_WARN.

\\param category the category of the message.
\\param fmt a printf() style message format string.
\\param ... additional parameters matching % tokens in the **fmt** string,
           if any.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_Log
\\sa SDL_LogCritical
\\sa SDL_LogDebug
\\sa SDL_LogError
\\sa SDL_LogInfo
\\sa SDL_LogMessage
\\sa SDL_LogMessageV
\\sa SDL_LogTrace
\\sa SDL_LogVerbose
")
(:FUNCTION "SDL_LogError" "Log a message with SDL_LOG_PRIORITY_ERROR.

\\param category the category of the message.
\\param fmt a printf() style message format string.
\\param ... additional parameters matching % tokens in the **fmt** string,
           if any.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_Log
\\sa SDL_LogCritical
\\sa SDL_LogDebug
\\sa SDL_LogInfo
\\sa SDL_LogMessage
\\sa SDL_LogMessageV
\\sa SDL_LogTrace
\\sa SDL_LogVerbose
\\sa SDL_LogWarn
")
(:FUNCTION "SDL_LogCritical" "Log a message with SDL_LOG_PRIORITY_CRITICAL.

\\param category the category of the message.
\\param fmt a printf() style message format string.
\\param ... additional parameters matching % tokens in the **fmt** string,
           if any.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_Log
\\sa SDL_LogDebug
\\sa SDL_LogError
\\sa SDL_LogInfo
\\sa SDL_LogMessage
\\sa SDL_LogMessageV
\\sa SDL_LogTrace
\\sa SDL_LogVerbose
\\sa SDL_LogWarn
")
(:FUNCTION "SDL_LogMessage"
 "Log a message with the specified category and priority.

\\param category the category of the message.
\\param priority the priority of the message.
\\param fmt a printf() style message format string.
\\param ... additional parameters matching % tokens in the **fmt** string,
           if any.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_Log
\\sa SDL_LogCritical
\\sa SDL_LogDebug
\\sa SDL_LogError
\\sa SDL_LogInfo
\\sa SDL_LogMessageV
\\sa SDL_LogTrace
\\sa SDL_LogVerbose
\\sa SDL_LogWarn
")
(:FUNCTION "SDL_LogMessageV"
 "Log a message with the specified category and priority.

\\param category the category of the message.
\\param priority the priority of the message.
\\param fmt a printf() style message format string.
\\param ap a variable argument list.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_Log
\\sa SDL_LogCritical
\\sa SDL_LogDebug
\\sa SDL_LogError
\\sa SDL_LogInfo
\\sa SDL_LogMessage
\\sa SDL_LogTrace
\\sa SDL_LogVerbose
\\sa SDL_LogWarn
")
(:FUNCTION "SDL_GetDefaultLogOutputFunction"
 "Get the default log output function.

\\returns the default log output callback.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetLogOutputFunction
\\sa SDL_GetLogOutputFunction
")
(:FUNCTION "SDL_GetLogOutputFunction" "Get the current log output function.

\\param callback an SDL_LogOutputFunction filled in with the current log
                callback.
\\param userdata a pointer filled in with the pointer that is passed to
                `callback`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetDefaultLogOutputFunction
\\sa SDL_SetLogOutputFunction
")
(:FUNCTION "SDL_SetLogOutputFunction"
 "Replace the default log output function with one of your own.

\\param callback an SDL_LogOutputFunction to call instead of the default.
\\param userdata a pointer that is passed to `callback`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetDefaultLogOutputFunction
\\sa SDL_GetLogOutputFunction
")
(:FUNCTION "SDL_AppInit"
 "App-implemented initial entry point for SDL_MAIN_USE_CALLBACKS apps.

Apps implement this function when using SDL_MAIN_USE_CALLBACKS. If using a
standard \"main\" function, you should not supply this.

This function is called by SDL once, at startup. The function should
initialize whatever is necessary, possibly create windows and open audio
devices, etc. The `argc` and `argv` parameters work like they would with a
standard \"main\" function.

This function should not go into an infinite mainloop; it should do any
one-time setup it requires and then return.

The app may optionally assign a pointer to `*appstate`. This pointer will
be provided on every future call to the other entry points, to allow
application state to be preserved between functions without the app needing
to use a global variable. If this isn't set, the pointer will be NULL in
future entry points.

If this function returns SDL_APP_CONTINUE, the app will proceed to normal
operation, and will begin receiving repeated calls to SDL_AppIterate and
SDL_AppEvent for the life of the program. If this function returns
SDL_APP_FAILURE, SDL will call SDL_AppQuit and terminate the process with
an exit code that reports an error to the platform. If it returns
SDL_APP_SUCCESS, SDL calls SDL_AppQuit and terminates with an exit code
that reports success to the platform.

This function is called by SDL on the main thread.

\\param appstate a place where the app can optionally store a pointer for
                future use.
\\param argc the standard ANSI C main's argc; number of elements in `argv`.
\\param argv the standard ANSI C main's argv; array of command line
            arguments.
\\returns SDL_APP_FAILURE to terminate with an error, SDL_APP_SUCCESS to
         terminate with success, SDL_APP_CONTINUE to continue.

\\since This function is available since SDL 3.2.0.

\\sa SDL_AppIterate
\\sa SDL_AppEvent
\\sa SDL_AppQuit
")
(:FUNCTION "SDL_AppIterate"
 "App-implemented iteration entry point for SDL_MAIN_USE_CALLBACKS apps.

Apps implement this function when using SDL_MAIN_USE_CALLBACKS. If using a
standard \"main\" function, you should not supply this.

This function is called repeatedly by SDL after SDL_AppInit returns 0. The
function should operate as a single iteration the program's primary loop;
it should update whatever state it needs and draw a new frame of video,
usually.

On some platforms, this function will be called at the refresh rate of the
display (which might change during the life of your app!). There are no
promises made about what frequency this function might run at. You should
use SDL's timer functions if you need to see how much time has passed since
the last iteration.

There is no need to process the SDL event queue during this function; SDL
will send events as they arrive in SDL_AppEvent, and in most cases the
event queue will be empty when this function runs anyhow.

This function should not go into an infinite mainloop; it should do one
iteration of whatever the program does and return.

The `appstate` parameter is an optional pointer provided by the app during
SDL_AppInit(). If the app never provided a pointer, this will be NULL.

If this function returns SDL_APP_CONTINUE, the app will continue normal
operation, receiving repeated calls to SDL_AppIterate and SDL_AppEvent for
the life of the program. If this function returns SDL_APP_FAILURE, SDL will
call SDL_AppQuit and terminate the process with an exit code that reports
an error to the platform. If it returns SDL_APP_SUCCESS, SDL calls
SDL_AppQuit and terminates with an exit code that reports success to the
platform.

This function is called by SDL on the main thread.

\\param appstate an optional pointer, provided by the app in SDL_AppInit.
\\returns SDL_APP_FAILURE to terminate with an error, SDL_APP_SUCCESS to
         terminate with success, SDL_APP_CONTINUE to continue.

\\threadsafety This function may get called concurrently with SDL_AppEvent()
              for events not pushed on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_AppInit
\\sa SDL_AppEvent
")
(:FUNCTION "SDL_AppEvent"
 "App-implemented event entry point for SDL_MAIN_USE_CALLBACKS apps.

Apps implement this function when using SDL_MAIN_USE_CALLBACKS. If using a
standard \"main\" function, you should not supply this.

This function is called as needed by SDL after SDL_AppInit returns
SDL_APP_CONTINUE. It is called once for each new event.

There is (currently) no guarantee about what thread this will be called
from; whatever thread pushes an event onto SDL's queue will trigger this
function. SDL is responsible for pumping the event queue between each call
to SDL_AppIterate, so in normal operation one should only get events in a
serial fashion, but be careful if you have a thread that explicitly calls
SDL_PushEvent. SDL itself will push events to the queue on the main thread.

Events sent to this function are not owned by the app; if you need to save
the data, you should copy it.

This function should not go into an infinite mainloop; it should handle the
provided event appropriately and return.

The `appstate` parameter is an optional pointer provided by the app during
SDL_AppInit(). If the app never provided a pointer, this will be NULL.

If this function returns SDL_APP_CONTINUE, the app will continue normal
operation, receiving repeated calls to SDL_AppIterate and SDL_AppEvent for
the life of the program. If this function returns SDL_APP_FAILURE, SDL will
call SDL_AppQuit and terminate the process with an exit code that reports
an error to the platform. If it returns SDL_APP_SUCCESS, SDL calls
SDL_AppQuit and terminates with an exit code that reports success to the
platform.

\\param appstate an optional pointer, provided by the app in SDL_AppInit.
\\param event the new event for the app to examine.
\\returns SDL_APP_FAILURE to terminate with an error, SDL_APP_SUCCESS to
         terminate with success, SDL_APP_CONTINUE to continue.

\\threadsafety This function may get called concurrently with
              SDL_AppIterate() or SDL_AppQuit() for events not pushed from
              the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_AppInit
\\sa SDL_AppIterate
")
(:FUNCTION "SDL_AppQuit"
 "App-implemented deinit entry point for SDL_MAIN_USE_CALLBACKS apps.

Apps implement this function when using SDL_MAIN_USE_CALLBACKS. If using a
standard \"main\" function, you should not supply this.

This function is called once by SDL before terminating the program.

This function will be called no matter what, even if SDL_AppInit requests
termination.

This function should not go into an infinite mainloop; it should
deinitialize any resources necessary, perform whatever shutdown activities,
and return.

You do not need to call SDL_Quit() in this function, as SDL will call it
after this function returns and before the process terminates, but it is
safe to do so.

The `appstate` parameter is an optional pointer provided by the app during
SDL_AppInit(). If the app never provided a pointer, this will be NULL. This
function call is the last time this pointer will be provided, so any
resources to it should be cleaned up here.

This function is called by SDL on the main thread.

\\param appstate an optional pointer, provided by the app in SDL_AppInit.
\\param result the result code that terminated the app (success or failure).

\\threadsafety SDL_AppEvent() may get called concurrently with this function
              if other threads that push events are still active.

\\since This function is available since SDL 3.2.0.

\\sa SDL_AppInit
")
(:FUNCTION "SDL_main" "An app-supplied function for program entry.

Apps do not directly create this function; they should create a standard
ANSI-C `main` function instead. If SDL needs to insert some startup code
before `main` runs, or the platform doesn't actually _use_ a function
called \"main\", SDL will do some macro magic to redefine `main` to
`SDL_main` and provide its own `main`.

Apps should include `SDL_main.h` in the same file as their `main` function,
and they should not use that symbol for anything else in that file, as it
might get redefined.

This function is only provided by the app if it isn't using
SDL_MAIN_USE_CALLBACKS.

Program startup is a surprisingly complex topic. Please see
[README/main-functions](README/main-functions), (or
docs/README-main-functions.md in the source tree) for a more detailed
explanation.

\\param argc an ANSI-C style main function's argc.
\\param argv an ANSI-C style main function's argv.
\\returns an ANSI-C main return code; generally 0 is considered successful
         program completion, and small non-zero values are considered
         errors.

\\threadsafety This is the program entry point.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SetMainReady"
 "Circumvent failure of SDL_Init() when not using SDL_main() as an entry
point.

This function is defined in SDL_main.h, along with the preprocessor rule to
redefine main() as SDL_main(). Thus to ensure that your main() function
will not be changed it is necessary to define SDL_MAIN_HANDLED before
including SDL.h.

\\since This function is available since SDL 3.2.0.

\\sa SDL_Init
")
(:FUNCTION "SDL_RunApp"
 "Initializes and launches an SDL application, by doing platform-specific
initialization before calling your mainFunction and cleanups after it
returns, if that is needed for a specific platform, otherwise it just calls
mainFunction.

You can use this if you want to use your own main() implementation without
using SDL_main (like when using SDL_MAIN_HANDLED). When using this, you do
*not* need SDL_SetMainReady().

\\param argc the argc parameter from the application's main() function, or 0
            if the platform's main-equivalent has no argc.
\\param argv the argv parameter from the application's main() function, or
            NULL if the platform's main-equivalent has no argv.
\\param mainFunction your SDL app's C-style main(). NOT the function you're
                    calling this from! Its name doesn't matter; it doesn't
                    literally have to be `main`.
\\param reserved should be NULL (reserved for future use, will probably be
                platform-specific then).
\\returns the return value from mainFunction: 0 on success, otherwise
         failure; SDL_GetError() might have more information on the
         failure.

\\threadsafety Generally this is called once, near startup, from the
              process's initial thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_EnterAppMainCallbacks"
 "An entry point for SDL's use in SDL_MAIN_USE_CALLBACKS.

Generally, you should not call this function directly. This only exists to
hand off work into SDL as soon as possible, where it has a lot more control
and functionality available, and make the inline code in SDL_main.h as
small as possible.

Not all platforms use this, it's actual use is hidden in a magic
header-only library, and you should not call this directly unless you
_really_ know what you're doing.

\\param argc standard Unix main argc.
\\param argv standard Unix main argv.
\\param appinit the application's SDL_AppInit function.
\\param appiter the application's SDL_AppIterate function.
\\param appevent the application's SDL_AppEvent function.
\\param appquit the application's SDL_AppQuit function.
\\returns standard Unix main return value.

\\threadsafety It is not safe to call this anywhere except as the only
              function call in SDL_main.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_RegisterApp" "Register a win32 window class for SDL's use.

This can be called to set the application window class at startup. It is
safe to call this multiple times, as long as every call is eventually
paired with a call to SDL_UnregisterApp, but a second registration attempt
while a previous registration is still active will be ignored, other than
to increment a counter.

Most applications do not need to, and should not, call this directly; SDL
will call it when initializing the video subsystem.

\\param name the window class name, in UTF-8 encoding. If NULL, SDL
            currently uses \"SDL_app\" but this isn't guaranteed.
\\param style the value to use in WNDCLASSEX::style. If `name` is NULL, SDL
             currently uses `(CS_BYTEALIGNCLIENT | CS_OWNDC)` regardless of
             what is specified here.
\\param hInst the HINSTANCE to use in WNDCLASSEX::hInstance. If zero, SDL
             will use `GetModuleHandle(NULL)` instead.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_UnregisterApp"
 "Deregister the win32 window class from an SDL_RegisterApp call.

This can be called to undo the effects of SDL_RegisterApp.

Most applications do not need to, and should not, call this directly; SDL
will call it when deinitializing the video subsystem.

It is safe to call this multiple times, as long as every call is eventually
paired with a prior call to SDL_RegisterApp. The window class will only be
deregistered when the registration counter in SDL_RegisterApp decrements to
zero through calls to this function.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GDKSuspendComplete"
 "Callback from the application to let the suspend continue.

This function is only needed for Xbox GDK support; all other platforms will
do nothing and set an \"unsupported\" error message.

\\since This function is available since SDL 3.2.0.
")
(:BITFIELD "SDL_MessageBoxFlags" "Message box flags.

If supported will display warning icon, etc.

\\since This datatype is available since SDL 3.2.0.
")
(:BITFIELD "SDL_MessageBoxButtonFlags" "SDL_MessageBoxButtonData flags.

\\since This datatype is available since SDL 3.2.0.
")
(:STRUCT "SDL_MessageBoxButtonData" "Individual button data.

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_MessageBoxColor" "RGB value used in a message box color scheme

\\since This struct is available since SDL 3.2.0.
")
(:ENUM "SDL_MessageBoxColorType"
 "An enumeration of indices inside the colors array of
SDL_MessageBoxColorScheme.
")
(:STRUCT "SDL_MessageBoxColorScheme"
 "A set of colors to use for message box dialogs

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_MessageBoxData"
 "MessageBox structure containing title, text, window, etc.

\\since This struct is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ShowMessageBox" "Create a modal message box.

If your needs aren't complex, it might be easier to use
SDL_ShowSimpleMessageBox.

This function should be called on the thread that created the parent
window, or on the main thread if the messagebox has no parent. It will
block execution of that thread until the user clicks a button or closes the
messagebox.

This function may be called at any time, even before SDL_Init(). This makes
it useful for reporting errors like a failure to create a renderer or
OpenGL context.

On X11, SDL rolls its own dialog box with X11 primitives instead of a
formal toolkit like GTK+ or Qt.

Note that if SDL_Init() would fail because there isn't any available video
target, this function is likely to fail for the same reasons. If this is a
concern, check the return value from this function and fall back to writing
to stderr if you can.

\\param messageboxdata the SDL_MessageBoxData structure with title, text and
                      other options.
\\param buttonid the pointer to which user id of hit button should be
                copied.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ShowSimpleMessageBox
")
(:FUNCTION "SDL_ShowSimpleMessageBox" "Display a simple modal message box.

If your needs aren't complex, this function is preferred over
SDL_ShowMessageBox.

`flags` may be any of the following:

- `SDL_MESSAGEBOX_ERROR`: error dialog
- `SDL_MESSAGEBOX_WARNING`: warning dialog
- `SDL_MESSAGEBOX_INFORMATION`: informational dialog

This function should be called on the thread that created the parent
window, or on the main thread if the messagebox has no parent. It will
block execution of that thread until the user clicks a button or closes the
messagebox.

This function may be called at any time, even before SDL_Init(). This makes
it useful for reporting errors like a failure to create a renderer or
OpenGL context.

On X11, SDL rolls its own dialog box with X11 primitives instead of a
formal toolkit like GTK+ or Qt.

Note that if SDL_Init() would fail because there isn't any available video
target, this function is likely to fail for the same reasons. If this is a
concern, check the return value from this function and fall back to writing
to stderr if you can.

\\param flags an SDL_MessageBoxFlags value.
\\param title UTF-8 title text.
\\param message UTF-8 message text.
\\param window the parent window, or NULL for no parent.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ShowMessageBox
")
(:TYPEDEF "SDL_MetalView"
 "A handle to a CAMetalLayer-backed NSView (macOS) or UIView (iOS/tvOS).

\\since This datatype is available since SDL 3.2.0.
")
(:FUNCTION "SDL_Metal_CreateView"
 "Create a CAMetalLayer-backed NSView/UIView and attach it to the specified
window.

On macOS, this does *not* associate a MTLDevice with the CAMetalLayer on
its own. It is up to user code to do that.

The returned handle can be casted directly to a NSView or UIView. To access
the backing CAMetalLayer, call SDL_Metal_GetLayer().

\\param window the window.
\\returns handle NSView or UIView.

\\since This function is available since SDL 3.2.0.

\\sa SDL_Metal_DestroyView
\\sa SDL_Metal_GetLayer
")
(:FUNCTION "SDL_Metal_DestroyView" "Destroy an existing SDL_MetalView object.

This should be called before SDL_DestroyWindow, if SDL_Metal_CreateView was
called after SDL_CreateWindow.

\\param view the SDL_MetalView object.

\\since This function is available since SDL 3.2.0.

\\sa SDL_Metal_CreateView
")
(:FUNCTION "SDL_Metal_GetLayer"
 "Get a pointer to the backing CAMetalLayer for the given view.

\\param view the SDL_MetalView object.
\\returns a pointer.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_OpenURL"
 "Open a URL/URI in the browser or other appropriate external application.

Open a URL in a separate, system-provided application. How this works will
vary wildly depending on the platform. This will likely launch what makes
sense to handle a specific URL's protocol (a web browser for `http://`,
etc), but it might also be able to launch file managers for directories and
other things.

What happens when you open a URL varies wildly as well: your game window
may lose focus (and may or may not lose focus if your game was fullscreen
or grabbing input at the time). On mobile devices, your app will likely
move to the background or your process might be paused. Any given platform
may or may not handle a given URL.

If this is unimplemented (or simply unavailable) for a platform, this will
fail with an error. A successful result does not mean the URL loaded, just
that we launched _something_ to handle it (or at least believe we did).

All this to say: this function can be useful, but you should definitely
test it on every platform you target.

\\param url a valid URL/URI to open. Use `file:///full/path/to/file` for
           local files, if supported.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:BITFIELD "SDL_MouseID"
 "This is a unique ID for a mouse for the time it is connected to the system,
and is never reused for the lifetime of the application.

If the mouse is disconnected and reconnected, it will get a new ID.

The value 0 is an invalid ID.

\\since This datatype is available since SDL 3.2.0.
")
(:STRUCT "SDL_Cursor" "The structure used to identify an SDL cursor.

This is opaque data.

\\since This struct is available since SDL 3.2.0.
")
(:ENUM "SDL_SystemCursor" "Cursor types for SDL_CreateSystemCursor().

\\since This enum is available since SDL 3.2.0.
")
(:ENUM "SDL_MouseWheelDirection" "Scroll direction types for the Scroll event

\\since This enum is available since SDL 3.2.0.
")
(:BITFIELD "SDL_MouseButtonFlags"
 "A bitmask of pressed mouse buttons, as reported by SDL_GetMouseState, etc.

- Button 1: Left mouse button
- Button 2: Middle mouse button
- Button 3: Right mouse button
- Button 4: Side mouse button 1
- Button 5: Side mouse button 2

\\since This datatype is available since SDL 3.2.0.

\\sa SDL_GetMouseState
\\sa SDL_GetGlobalMouseState
\\sa SDL_GetRelativeMouseState
")
(:FUNCTION "SDL_HasMouse" "Return whether a mouse is currently connected.

\\returns true if a mouse is connected, false otherwise.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetMice
")
(:FUNCTION "SDL_GetMice" "Get a list of currently connected mice.

Note that this will include any device or virtual driver that includes
mouse functionality, including some game controllers, KVM switches, etc.
You should wait for input from a device before you consider it actively in
use.

\\param count a pointer filled in with the number of mice returned, may be
             NULL.
\\returns a 0 terminated array of mouse instance IDs or NULL on failure;
         call SDL_GetError() for more information. This should be freed
         with SDL_free() when it is no longer needed.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetMouseNameForID
\\sa SDL_HasMouse
")
(:FUNCTION "SDL_GetMouseNameForID" "Get the name of a mouse.

This function returns \"\" if the mouse doesn't have a name.

\\param instance_id the mouse instance ID.
\\returns the name of the selected mouse, or NULL on failure; call
         SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetMice
")
(:FUNCTION "SDL_GetMouseFocus" "Get the window which currently has mouse focus.

\\returns the window with mouse focus.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetMouseState"
 "Query SDL's cache for the synchronous mouse button state and the
window-relative SDL-cursor position.

This function returns the cached synchronous state as SDL understands it
from the last pump of the event queue.

To query the platform for immediate asynchronous state, use
SDL_GetGlobalMouseState.

Passing non-NULL pointers to `x` or `y` will write the destination with
respective x or y coordinates relative to the focused window.

In Relative Mode, the SDL-cursor's position usually contradicts the
platform-cursor's position as manually calculated from
SDL_GetGlobalMouseState() and SDL_GetWindowPosition.

\\param x a pointer to receive the SDL-cursor's x-position from the focused
         window's top left corner, can be NULL if unused.
\\param y a pointer to receive the SDL-cursor's y-position from the focused
         window's top left corner, can be NULL if unused.
\\returns a 32-bit bitmask of the button state that can be bitwise-compared
         against the SDL_BUTTON_MASK(X) macro.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGlobalMouseState
\\sa SDL_GetRelativeMouseState
")
(:FUNCTION "SDL_GetGlobalMouseState"
 "Query the platform for the asynchronous mouse button state and the
desktop-relative platform-cursor position.

This function immediately queries the platform for the most recent
asynchronous state, more costly than retrieving SDL's cached state in
SDL_GetMouseState().

Passing non-NULL pointers to `x` or `y` will write the destination with
respective x or y coordinates relative to the desktop.

In Relative Mode, the platform-cursor's position usually contradicts the
SDL-cursor's position as manually calculated from SDL_GetMouseState() and
SDL_GetWindowPosition.

This function can be useful if you need to track the mouse outside of a
specific window and SDL_CaptureMouse() doesn't fit your needs. For example,
it could be useful if you need to track the mouse while dragging a window,
where coordinates relative to a window might not be in sync at all times.

\\param x a pointer to receive the platform-cursor's x-position from the
         desktop's top left corner, can be NULL if unused.
\\param y a pointer to receive the platform-cursor's y-position from the
         desktop's top left corner, can be NULL if unused.
\\returns a 32-bit bitmask of the button state that can be bitwise-compared
         against the SDL_BUTTON_MASK(X) macro.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CaptureMouse
\\sa SDL_GetMouseState
\\sa SDL_GetGlobalMouseState
")
(:FUNCTION "SDL_GetRelativeMouseState"
 "Query SDL's cache for the synchronous mouse button state and accumulated
mouse delta since last call.

This function returns the cached synchronous state as SDL understands it
from the last pump of the event queue.

To query the platform for immediate asynchronous state, use
SDL_GetGlobalMouseState.

Passing non-NULL pointers to `x` or `y` will write the destination with
respective x or y deltas accumulated since the last call to this function
(or since event initialization).

This function is useful for reducing overhead by processing relative mouse
inputs in one go per-frame instead of individually per-event, at the
expense of losing the order between events within the frame (e.g. quickly
pressing and releasing a button within the same frame).

\\param x a pointer to receive the x mouse delta accumulated since last
         call, can be NULL if unused.
\\param y a pointer to receive the y mouse delta accumulated since last
         call, can be NULL if unused.
\\returns a 32-bit bitmask of the button state that can be bitwise-compared
         against the SDL_BUTTON_MASK(X) macro.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetMouseState
\\sa SDL_GetGlobalMouseState
")
(:FUNCTION "SDL_WarpMouseInWindow"
 "Move the mouse cursor to the given position within the window.

This function generates a mouse motion event if relative mode is not
enabled. If relative mode is enabled, you can force mouse events for the
warp by setting the SDL_HINT_MOUSE_RELATIVE_WARP_MOTION hint.

Note that this function will appear to succeed, but not actually move the
mouse when used over Microsoft Remote Desktop.

\\param window the window to move the mouse into, or NULL for the current
              mouse focus.
\\param x the x coordinate within the window.
\\param y the y coordinate within the window.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_WarpMouseGlobal
")
(:FUNCTION "SDL_WarpMouseGlobal"
 "Move the mouse to the given position in global screen space.

This function generates a mouse motion event.

A failure of this function usually means that it is unsupported by a
platform.

Note that this function will appear to succeed, but not actually move the
mouse when used over Microsoft Remote Desktop.

\\param x the x coordinate.
\\param y the y coordinate.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_WarpMouseInWindow
")
(:FUNCTION "SDL_SetWindowRelativeMouseMode"
 "Set relative mouse mode for a window.

While the window has focus and relative mouse mode is enabled, the cursor
is hidden, the mouse position is constrained to the window, and SDL will
report continuous relative mouse motion even if the mouse is at the edge of
the window.

If you'd like to keep the mouse position fixed while in relative mode you
can use SDL_SetWindowMouseRect(). If you'd like the cursor to be at a
specific location when relative mode ends, you should use
SDL_WarpMouseInWindow() before disabling relative mode.

This function will flush any pending mouse motion for this window.

\\param window the window to change.
\\param enabled true to enable relative mode, false to disable.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowRelativeMouseMode
")
(:FUNCTION "SDL_GetWindowRelativeMouseMode"
 "Query whether relative mouse mode is enabled for a window.

\\param window the window to query.
\\returns true if relative mode is enabled for a window or false otherwise.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetWindowRelativeMouseMode
")
(:FUNCTION "SDL_CaptureMouse"
 "Capture the mouse and to track input outside an SDL window.

Capturing enables your app to obtain mouse events globally, instead of just
within your window. Not all video targets support this function. When
capturing is enabled, the current window will get all mouse events, but
unlike relative mode, no change is made to the cursor and it is not
restrained to your window.

This function may also deny mouse input to other windows--both those in
your application and others on the system--so you should use this function
sparingly, and in small bursts. For example, you might want to track the
mouse while the user is dragging something, until the user releases a mouse
button. It is not recommended that you capture the mouse for long periods
of time, such as the entire time your app is running. For that, you should
probably use SDL_SetWindowRelativeMouseMode() or SDL_SetWindowMouseGrab(),
depending on your goals.

While captured, mouse events still report coordinates relative to the
current (foreground) window, but those coordinates may be outside the
bounds of the window (including negative values). Capturing is only allowed
for the foreground window. If the window loses focus while capturing, the
capture will be disabled automatically.

While capturing is enabled, the current window will have the
`SDL_WINDOW_MOUSE_CAPTURE` flag set.

Please note that SDL will attempt to \"auto capture\" the mouse while the
user is pressing a button; this is to try and make mouse behavior more
consistent between platforms, and deal with the common case of a user
dragging the mouse outside of the window. This means that if you are
calling SDL_CaptureMouse() only to deal with this situation, you do not
have to (although it is safe to do so). If this causes problems for your
app, you can disable auto capture by setting the
`SDL_HINT_MOUSE_AUTO_CAPTURE` hint to zero.

\\param enabled true to enable capturing, false to disable.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetGlobalMouseState
")
(:FUNCTION "SDL_CreateCursor"
 "Create a cursor using the specified bitmap data and mask (in MSB format).

`mask` has to be in MSB (Most Significant Bit) format.

The cursor width (`w`) must be a multiple of 8 bits.

The cursor is created in black and white according to the following:

- data=0, mask=1: white
- data=1, mask=1: black
- data=0, mask=0: transparent
- data=1, mask=0: inverted color if possible, black if not.

Cursors created with this function must be freed with SDL_DestroyCursor().

If you want to have a color cursor, or create your cursor from an
SDL_Surface, you should use SDL_CreateColorCursor(). Alternately, you can
hide the cursor and draw your own as part of your game's rendering, but it
will be bound to the framerate.

Also, SDL_CreateSystemCursor() is available, which provides several
readily-available system cursors to pick from.

\\param data the color value for each pixel of the cursor.
\\param mask the mask value for each pixel of the cursor.
\\param w the width of the cursor.
\\param h the height of the cursor.
\\param hot_x the x-axis offset from the left of the cursor image to the
             mouse x position, in the range of 0 to `w` - 1.
\\param hot_y the y-axis offset from the top of the cursor image to the
             mouse y position, in the range of 0 to `h` - 1.
\\returns a new cursor with the specified parameters on success or NULL on
         failure; call SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateColorCursor
\\sa SDL_CreateSystemCursor
\\sa SDL_DestroyCursor
\\sa SDL_SetCursor
")
(:FUNCTION "SDL_CreateColorCursor" "Create a color cursor.

If this function is passed a surface with alternate representations, the
surface will be interpreted as the content to be used for 100% display
scale, and the alternate representations will be used for high DPI
situations. For example, if the original surface is 32x32, then on a 2x
macOS display or 200% display scale on Windows, a 64x64 version of the
image will be used, if available. If a matching version of the image isn't
available, the closest larger size image will be downscaled to the
appropriate size and be used instead, if available. Otherwise, the closest
smaller image will be upscaled and be used instead.

\\param surface an SDL_Surface structure representing the cursor image.
\\param hot_x the x position of the cursor hot spot.
\\param hot_y the y position of the cursor hot spot.
\\returns the new cursor on success or NULL on failure; call SDL_GetError()
         for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateCursor
\\sa SDL_CreateSystemCursor
\\sa SDL_DestroyCursor
\\sa SDL_SetCursor
")
(:FUNCTION "SDL_CreateSystemCursor" "Create a system cursor.

\\param id an SDL_SystemCursor enum value.
\\returns a cursor on success or NULL on failure; call SDL_GetError() for
         more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_DestroyCursor
")
(:FUNCTION "SDL_SetCursor" "Set the active cursor.

This function sets the currently active cursor to the specified one. If the
cursor is currently visible, the change will be immediately represented on
the display. SDL_SetCursor(NULL) can be used to force cursor redraw, if
this is desired for any reason.

\\param cursor a cursor to make active.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetCursor
")
(:FUNCTION "SDL_GetCursor" "Get the active cursor.

This function returns a pointer to the current cursor which is owned by the
library. It is not necessary to free the cursor with SDL_DestroyCursor().

\\returns the active cursor or NULL if there is no mouse.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetCursor
")
(:FUNCTION "SDL_GetDefaultCursor" "Get the default cursor.

You do not have to call SDL_DestroyCursor() on the return value, but it is
safe to do so.

\\returns the default cursor on success or NULL on failuree; call
         SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_DestroyCursor" "Free a previously-created cursor.

Use this function to free cursor resources created with SDL_CreateCursor(),
SDL_CreateColorCursor() or SDL_CreateSystemCursor().

\\param cursor the cursor to free.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateColorCursor
\\sa SDL_CreateCursor
\\sa SDL_CreateSystemCursor
")
(:FUNCTION "SDL_ShowCursor" "Show the cursor.

\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CursorVisible
\\sa SDL_HideCursor
")
(:FUNCTION "SDL_HideCursor" "Hide the cursor.

\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CursorVisible
\\sa SDL_ShowCursor
")
(:FUNCTION "SDL_CursorVisible"
 "Return whether the cursor is currently being shown.

\\returns `true` if the cursor is being shown, or `false` if the cursor is
         hidden.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_HideCursor
\\sa SDL_ShowCursor
")
(:FUNCTION "SDL_THREAD_ANNOTATION_ATTRIBUTE__"
 "Enable thread safety attributes, only with clang.

The attributes can be safely erased when compiling with other compilers.

To enable analysis, set these environment variables before running cmake:

```bash
export CC=clang
export CFLAGS=\"-DSDL_THREAD_SAFETY_ANALYSIS -Wthread-safety\"
```
")
(:FUNCTION "SDL_CAPABILITY"
 "Wrapper around Clang thread safety analysis annotations.

Please see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GUARDED_BY"
 "Wrapper around Clang thread safety analysis annotations.

Please see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_PT_GUARDED_BY"
 "Wrapper around Clang thread safety analysis annotations.

Please see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ACQUIRED_BEFORE"
 "Wrapper around Clang thread safety analysis annotations.

Please see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ACQUIRED_AFTER"
 "Wrapper around Clang thread safety analysis annotations.

Please see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_REQUIRES"
 "Wrapper around Clang thread safety analysis annotations.

Please see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_REQUIRES_SHARED"
 "Wrapper around Clang thread safety analysis annotations.

Please see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ACQUIRE"
 "Wrapper around Clang thread safety analysis annotations.

Please see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ACQUIRE_SHARED"
 "Wrapper around Clang thread safety analysis annotations.

Please see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_RELEASE"
 "Wrapper around Clang thread safety analysis annotations.

Please see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_RELEASE_SHARED"
 "Wrapper around Clang thread safety analysis annotations.

Please see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_RELEASE_GENERIC"
 "Wrapper around Clang thread safety analysis annotations.

Please see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_TRY_ACQUIRE"
 "Wrapper around Clang thread safety analysis annotations.

Please see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_TRY_ACQUIRE_SHARED"
 "Wrapper around Clang thread safety analysis annotations.

Please see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_EXCLUDES"
 "Wrapper around Clang thread safety analysis annotations.

Please see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ASSERT_CAPABILITY"
 "Wrapper around Clang thread safety analysis annotations.

Please see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ASSERT_SHARED_CAPABILITY"
 "Wrapper around Clang thread safety analysis annotations.

Please see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_RETURN_CAPABILITY"
 "Wrapper around Clang thread safety analysis annotations.

Please see https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#mutex-h

\\since This macro is available since SDL 3.2.0.
")
(:STRUCT "SDL_Mutex" "A means to serialize access to a resource between threads.

Mutexes (short for \"mutual exclusion\") are a synchronization primitive that
allows exactly one thread to proceed at a time.

Wikipedia has a thorough explanation of the concept:

https://en.wikipedia.org/wiki/Mutex

\\since This struct is available since SDL 3.2.0.
")
(:FUNCTION "SDL_CreateMutex" "Create a new mutex.

All newly-created mutexes begin in the _unlocked_ state.

Calls to SDL_LockMutex() will not return while the mutex is locked by
another thread. See SDL_TryLockMutex() to attempt to lock without blocking.

SDL mutexes are reentrant.

\\returns the initialized and unlocked mutex or NULL on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_DestroyMutex
\\sa SDL_LockMutex
\\sa SDL_TryLockMutex
\\sa SDL_UnlockMutex
")
(:FUNCTION "SDL_LockMutex" "Lock the mutex.

This will block until the mutex is available, which is to say it is in the
unlocked state and the OS has chosen the caller as the next thread to lock
it. Of all threads waiting to lock the mutex, only one may do so at a time.

It is legal for the owning thread to lock an already-locked mutex. It must
unlock it the same number of times before it is actually made available for
other threads in the system (this is known as a \"recursive mutex\").

This function does not fail; if mutex is NULL, it will return immediately
having locked nothing. If the mutex is valid, this function will always
block until it can lock the mutex, and return with it locked.

\\param mutex the mutex to lock.

\\since This function is available since SDL 3.2.0.

\\sa SDL_TryLockMutex
\\sa SDL_UnlockMutex
")
(:FUNCTION "SDL_TryLockMutex" "Try to lock a mutex without blocking.

This works just like SDL_LockMutex(), but if the mutex is not available,
this function returns false immediately.

This technique is useful if you need exclusive access to a resource but
don't want to wait for it, and will return to it to try again later.

This function returns true if passed a NULL mutex.

\\param mutex the mutex to try to lock.
\\returns true on success, false if the mutex would block.

\\since This function is available since SDL 3.2.0.

\\sa SDL_LockMutex
\\sa SDL_UnlockMutex
")
(:FUNCTION "SDL_UnlockMutex" "Unlock the mutex.

It is legal for the owning thread to lock an already-locked mutex. It must
unlock it the same number of times before it is actually made available for
other threads in the system (this is known as a \"recursive mutex\").

It is illegal to unlock a mutex that has not been locked by the current
thread, and doing so results in undefined behavior.

\\param mutex the mutex to unlock.

\\since This function is available since SDL 3.2.0.

\\sa SDL_LockMutex
\\sa SDL_TryLockMutex
")
(:FUNCTION "SDL_DestroyMutex" "Destroy a mutex created with SDL_CreateMutex().

This function must be called on any mutex that is no longer needed. Failure
to destroy a mutex will result in a system memory or resource leak. While
it is safe to destroy a mutex that is _unlocked_, it is not safe to attempt
to destroy a locked mutex, and may result in undefined behavior depending
on the platform.

\\param mutex the mutex to destroy.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateMutex
")
(:STRUCT "SDL_RWLock" "A mutex that allows read-only threads to run in parallel.

A rwlock is roughly the same concept as SDL_Mutex, but allows threads that
request read-only access to all hold the lock at the same time. If a thread
requests write access, it will block until all read-only threads have
released the lock, and no one else can hold the thread (for reading or
writing) at the same time as the writing thread.

This can be more efficient in cases where several threads need to access
data frequently, but changes to that data are rare.

There are other rules that apply to rwlocks that don't apply to mutexes,
about how threads are scheduled and when they can be recursively locked.
These are documented in the other rwlock functions.

\\since This struct is available since SDL 3.2.0.
")
(:FUNCTION "SDL_CreateRWLock" "Create a new read/write lock.

A read/write lock is useful for situations where you have multiple threads
trying to access a resource that is rarely updated. All threads requesting
a read-only lock will be allowed to run in parallel; if a thread requests a
write lock, it will be provided exclusive access. This makes it safe for
multiple threads to use a resource at the same time if they promise not to
change it, and when it has to be changed, the rwlock will serve as a
gateway to make sure those changes can be made safely.

In the right situation, a rwlock can be more efficient than a mutex, which
only lets a single thread proceed at a time, even if it won't be modifying
the data.

All newly-created read/write locks begin in the _unlocked_ state.

Calls to SDL_LockRWLockForReading() and SDL_LockRWLockForWriting will not
return while the rwlock is locked _for writing_ by another thread. See
SDL_TryLockRWLockForReading() and SDL_TryLockRWLockForWriting() to attempt
to lock without blocking.

SDL read/write locks are only recursive for read-only locks! They are not
guaranteed to be fair, or provide access in a FIFO manner! They are not
guaranteed to favor writers. You may not lock a rwlock for both read-only
and write access at the same time from the same thread (so you can't
promote your read-only lock to a write lock without unlocking first).

\\returns the initialized and unlocked read/write lock or NULL on failure;
         call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_DestroyRWLock
\\sa SDL_LockRWLockForReading
\\sa SDL_LockRWLockForWriting
\\sa SDL_TryLockRWLockForReading
\\sa SDL_TryLockRWLockForWriting
\\sa SDL_UnlockRWLock
")
(:FUNCTION "SDL_LockRWLockForReading"
 "Lock the read/write lock for _read only_ operations.

This will block until the rwlock is available, which is to say it is not
locked for writing by any other thread. Of all threads waiting to lock the
rwlock, all may do so at the same time as long as they are requesting
read-only access; if a thread wants to lock for writing, only one may do so
at a time, and no other threads, read-only or not, may hold the lock at the
same time.

It is legal for the owning thread to lock an already-locked rwlock for
reading. It must unlock it the same number of times before it is actually
made available for other threads in the system (this is known as a
\"recursive rwlock\").

Note that locking for writing is not recursive (this is only available to
read-only locks).

It is illegal to request a read-only lock from a thread that already holds
the write lock. Doing so results in undefined behavior. Unlock the write
lock before requesting a read-only lock. (But, of course, if you have the
write lock, you don't need further locks to read in any case.)

This function does not fail; if rwlock is NULL, it will return immediately
having locked nothing. If the rwlock is valid, this function will always
block until it can lock the mutex, and return with it locked.

\\param rwlock the read/write lock to lock.

\\since This function is available since SDL 3.2.0.

\\sa SDL_LockRWLockForWriting
\\sa SDL_TryLockRWLockForReading
\\sa SDL_UnlockRWLock
")
(:FUNCTION "SDL_LockRWLockForWriting"
 "Lock the read/write lock for _write_ operations.

This will block until the rwlock is available, which is to say it is not
locked for reading or writing by any other thread. Only one thread may hold
the lock when it requests write access; all other threads, whether they
also want to write or only want read-only access, must wait until the
writer thread has released the lock.

It is illegal for the owning thread to lock an already-locked rwlock for
writing (read-only may be locked recursively, writing can not). Doing so
results in undefined behavior.

It is illegal to request a write lock from a thread that already holds a
read-only lock. Doing so results in undefined behavior. Unlock the
read-only lock before requesting a write lock.

This function does not fail; if rwlock is NULL, it will return immediately
having locked nothing. If the rwlock is valid, this function will always
block until it can lock the mutex, and return with it locked.

\\param rwlock the read/write lock to lock.

\\since This function is available since SDL 3.2.0.

\\sa SDL_LockRWLockForReading
\\sa SDL_TryLockRWLockForWriting
\\sa SDL_UnlockRWLock
")
(:FUNCTION "SDL_TryLockRWLockForReading"
 "Try to lock a read/write lock _for reading_ without blocking.

This works just like SDL_LockRWLockForReading(), but if the rwlock is not
available, then this function returns false immediately.

This technique is useful if you need access to a resource but don't want to
wait for it, and will return to it to try again later.

Trying to lock for read-only access can succeed if other threads are
holding read-only locks, as this won't prevent access.

This function returns true if passed a NULL rwlock.

\\param rwlock the rwlock to try to lock.
\\returns true on success, false if the lock would block.

\\since This function is available since SDL 3.2.0.

\\sa SDL_LockRWLockForReading
\\sa SDL_TryLockRWLockForWriting
\\sa SDL_UnlockRWLock
")
(:FUNCTION "SDL_TryLockRWLockForWriting"
 "Try to lock a read/write lock _for writing_ without blocking.

This works just like SDL_LockRWLockForWriting(), but if the rwlock is not
available, then this function returns false immediately.

This technique is useful if you need exclusive access to a resource but
don't want to wait for it, and will return to it to try again later.

It is illegal for the owning thread to lock an already-locked rwlock for
writing (read-only may be locked recursively, writing can not). Doing so
results in undefined behavior.

It is illegal to request a write lock from a thread that already holds a
read-only lock. Doing so results in undefined behavior. Unlock the
read-only lock before requesting a write lock.

This function returns true if passed a NULL rwlock.

\\param rwlock the rwlock to try to lock.
\\returns true on success, false if the lock would block.

\\since This function is available since SDL 3.2.0.

\\sa SDL_LockRWLockForWriting
\\sa SDL_TryLockRWLockForReading
\\sa SDL_UnlockRWLock
")
(:FUNCTION "SDL_UnlockRWLock" "Unlock the read/write lock.

Use this function to unlock the rwlock, whether it was locked for read-only
or write operations.

It is legal for the owning thread to lock an already-locked read-only lock.
It must unlock it the same number of times before it is actually made
available for other threads in the system (this is known as a \"recursive
rwlock\").

It is illegal to unlock a rwlock that has not been locked by the current
thread, and doing so results in undefined behavior.

\\param rwlock the rwlock to unlock.

\\since This function is available since SDL 3.2.0.

\\sa SDL_LockRWLockForReading
\\sa SDL_LockRWLockForWriting
\\sa SDL_TryLockRWLockForReading
\\sa SDL_TryLockRWLockForWriting
")
(:FUNCTION "SDL_DestroyRWLock"
 "Destroy a read/write lock created with SDL_CreateRWLock().

This function must be called on any read/write lock that is no longer
needed. Failure to destroy a rwlock will result in a system memory or
resource leak. While it is safe to destroy a rwlock that is _unlocked_, it
is not safe to attempt to destroy a locked rwlock, and may result in
undefined behavior depending on the platform.

\\param rwlock the rwlock to destroy.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateRWLock
")
(:STRUCT "SDL_Semaphore"
 "A means to manage access to a resource, by count, between threads.

Semaphores (specifically, \"counting semaphores\"), let X number of threads
request access at the same time, each thread granted access decrementing a
counter. When the counter reaches zero, future requests block until a prior
thread releases their request, incrementing the counter again.

Wikipedia has a thorough explanation of the concept:

https://en.wikipedia.org/wiki/Semaphore_(programming)

\\since This struct is available since SDL 3.2.0.
")
(:FUNCTION "SDL_CreateSemaphore" "Create a semaphore.

This function creates a new semaphore and initializes it with the value
`initial_value`. Each wait operation on the semaphore will atomically
decrement the semaphore value and potentially block if the semaphore value
is 0. Each post operation will atomically increment the semaphore value and
wake waiting threads and allow them to retry the wait operation.

\\param initial_value the starting value of the semaphore.
\\returns a new semaphore or NULL on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_DestroySemaphore
\\sa SDL_SignalSemaphore
\\sa SDL_TryWaitSemaphore
\\sa SDL_GetSemaphoreValue
\\sa SDL_WaitSemaphore
\\sa SDL_WaitSemaphoreTimeout
")
(:FUNCTION "SDL_DestroySemaphore" "Destroy a semaphore.

It is not safe to destroy a semaphore if there are threads currently
waiting on it.

\\param sem the semaphore to destroy.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateSemaphore
")
(:FUNCTION "SDL_WaitSemaphore"
 "Wait until a semaphore has a positive value and then decrements it.

This function suspends the calling thread until the semaphore pointed to by
`sem` has a positive value, and then atomically decrement the semaphore
value.

This function is the equivalent of calling SDL_WaitSemaphoreTimeout() with
a time length of -1.

\\param sem the semaphore wait on.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SignalSemaphore
\\sa SDL_TryWaitSemaphore
\\sa SDL_WaitSemaphoreTimeout
")
(:FUNCTION "SDL_TryWaitSemaphore"
 "See if a semaphore has a positive value and decrement it if it does.

This function checks to see if the semaphore pointed to by `sem` has a
positive value and atomically decrements the semaphore value if it does. If
the semaphore doesn't have a positive value, the function immediately
returns false.

\\param sem the semaphore to wait on.
\\returns true if the wait succeeds, false if the wait would block.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SignalSemaphore
\\sa SDL_WaitSemaphore
\\sa SDL_WaitSemaphoreTimeout
")
(:FUNCTION "SDL_WaitSemaphoreTimeout"
 "Wait until a semaphore has a positive value and then decrements it.

This function suspends the calling thread until either the semaphore
pointed to by `sem` has a positive value or the specified time has elapsed.
If the call is successful it will atomically decrement the semaphore value.

\\param sem the semaphore to wait on.
\\param timeoutMS the length of the timeout, in milliseconds, or -1 to wait
                 indefinitely.
\\returns true if the wait succeeds or false if the wait times out.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SignalSemaphore
\\sa SDL_TryWaitSemaphore
\\sa SDL_WaitSemaphore
")
(:FUNCTION "SDL_SignalSemaphore"
 "Atomically increment a semaphore's value and wake waiting threads.

\\param sem the semaphore to increment.

\\since This function is available since SDL 3.2.0.

\\sa SDL_TryWaitSemaphore
\\sa SDL_WaitSemaphore
\\sa SDL_WaitSemaphoreTimeout
")
(:FUNCTION "SDL_GetSemaphoreValue" "Get the current value of a semaphore.

\\param sem the semaphore to query.
\\returns the current value of the semaphore.

\\since This function is available since SDL 3.2.0.
")
(:STRUCT "SDL_Condition"
 "A means to block multiple threads until a condition is satisfied.

Condition variables, paired with an SDL_Mutex, let an app halt multiple
threads until a condition has occurred, at which time the app can release
one or all waiting threads.

Wikipedia has a thorough explanation of the concept:

https://en.wikipedia.org/wiki/Condition_variable

\\since This struct is available since SDL 3.2.0.
")
(:FUNCTION "SDL_CreateCondition" "Create a condition variable.

\\returns a new condition variable or NULL on failure; call SDL_GetError()
         for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_BroadcastCondition
\\sa SDL_SignalCondition
\\sa SDL_WaitCondition
\\sa SDL_WaitConditionTimeout
\\sa SDL_DestroyCondition
")
(:FUNCTION "SDL_DestroyCondition" "Destroy a condition variable.

\\param cond the condition variable to destroy.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateCondition
")
(:FUNCTION "SDL_SignalCondition"
 "Restart one of the threads that are waiting on the condition variable.

\\param cond the condition variable to signal.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_BroadcastCondition
\\sa SDL_WaitCondition
\\sa SDL_WaitConditionTimeout
")
(:FUNCTION "SDL_BroadcastCondition"
 "Restart all threads that are waiting on the condition variable.

\\param cond the condition variable to signal.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SignalCondition
\\sa SDL_WaitCondition
\\sa SDL_WaitConditionTimeout
")
(:FUNCTION "SDL_WaitCondition" "Wait until a condition variable is signaled.

This function unlocks the specified `mutex` and waits for another thread to
call SDL_SignalCondition() or SDL_BroadcastCondition() on the condition
variable `cond`. Once the condition variable is signaled, the mutex is
re-locked and the function returns.

The mutex must be locked before calling this function. Locking the mutex
recursively (more than once) is not supported and leads to undefined
behavior.

This function is the equivalent of calling SDL_WaitConditionTimeout() with
a time length of -1.

\\param cond the condition variable to wait on.
\\param mutex the mutex used to coordinate thread access.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_BroadcastCondition
\\sa SDL_SignalCondition
\\sa SDL_WaitConditionTimeout
")
(:FUNCTION "SDL_WaitConditionTimeout"
 "Wait until a condition variable is signaled or a certain time has passed.

This function unlocks the specified `mutex` and waits for another thread to
call SDL_SignalCondition() or SDL_BroadcastCondition() on the condition
variable `cond`, or for the specified time to elapse. Once the condition
variable is signaled or the time elapsed, the mutex is re-locked and the
function returns.

The mutex must be locked before calling this function. Locking the mutex
recursively (more than once) is not supported and leads to undefined
behavior.

\\param cond the condition variable to wait on.
\\param mutex the mutex used to coordinate thread access.
\\param timeoutMS the maximum time to wait, in milliseconds, or -1 to wait
                 indefinitely.
\\returns true if the condition variable is signaled, false if the condition
         is not signaled in the allotted time.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_BroadcastCondition
\\sa SDL_SignalCondition
\\sa SDL_WaitCondition
")
(:ENUM "SDL_InitStatus" "The current status of an SDL_InitState structure.

\\since This enum is available since SDL 3.2.0.
")
(:STRUCT "SDL_InitState"
 "A structure used for thread-safe initialization and shutdown.

Here is an example of using this:

```c
   static SDL_AtomicInitState init;

   bool InitSystem(void)
   {
       if (!SDL_ShouldInit(&init)) {
           // The system is initialized
           return true;
       }

       // At this point, you should not leave this function without calling SDL_SetInitialized()

       bool initialized = DoInitTasks();
       SDL_SetInitialized(&init, initialized);
       return initialized;
   }

   bool UseSubsystem(void)
   {
       if (SDL_ShouldInit(&init)) {
           // Error, the subsystem isn't initialized
           SDL_SetInitialized(&init, false);
           return false;
       }

       // Do work using the initialized subsystem

       return true;
   }

   void QuitSystem(void)
   {
       if (!SDL_ShouldQuit(&init)) {
           // The system is not initialized
           return;
       }

       // At this point, you should not leave this function without calling SDL_SetInitialized()

       DoQuitTasks();
       SDL_SetInitialized(&init, false);
   }
```

Note that this doesn't protect any resources created during initialization,
or guarantee that nobody is using those resources during cleanup. You
should use other mechanisms to protect those, if that's a concern for your
code.

\\since This struct is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ShouldInit" "Return whether initialization should be done.

This function checks the passed in state and if initialization should be
done, sets the status to `SDL_INIT_STATUS_INITIALIZING` and returns true.
If another thread is already modifying this state, it will wait until
that's done before returning.

If this function returns true, the calling code must call
SDL_SetInitialized() to complete the initialization.

\\param state the initialization state to check.
\\returns true if initialization needs to be done, false otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetInitialized
\\sa SDL_ShouldQuit
")
(:FUNCTION "SDL_ShouldQuit" "Return whether cleanup should be done.

This function checks the passed in state and if cleanup should be done,
sets the status to `SDL_INIT_STATUS_UNINITIALIZING` and returns true.

If this function returns true, the calling code must call
SDL_SetInitialized() to complete the cleanup.

\\param state the initialization state to check.
\\returns true if cleanup needs to be done, false otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetInitialized
\\sa SDL_ShouldInit
")
(:FUNCTION "SDL_SetInitialized" "Finish an initialization state transition.

This function sets the status of the passed in state to
`SDL_INIT_STATUS_INITIALIZED` or `SDL_INIT_STATUS_UNINITIALIZED` and allows
any threads waiting for the status to proceed.

\\param state the initialization state to check.
\\param initialized the new initialization state.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ShouldInit
\\sa SDL_ShouldQuit
")
(:BITFIELD "SDL_PenID" "SDL pen instance IDs.

Zero is used to signify an invalid/null device.

These show up in pen events when SDL sees input from them. They remain
consistent as long as SDL can recognize a tool to be the same pen; but if a
pen physically leaves the area and returns, it might get a new ID.

\\since This datatype is available since SDL 3.2.0.
")
(:BITFIELD "SDL_PenInputFlags"
 "Pen input flags, as reported by various pen events' `pen_state` field.

\\since This datatype is available since SDL 3.2.0.
")
(:ENUM "SDL_PenAxis" "Pen axis indices.

These are the valid values for the `axis` field in SDL_PenAxisEvent. All
axes are either normalised to 0..1 or report a (positive or negative) angle
in degrees, with 0.0 representing the centre. Not all pens/backends support
all axes: unsupported axes are always zero.

To convert angles for tilt and rotation into vector representation, use
SDL_sinf on the XTILT, YTILT, or ROTATION component, for example:

`SDL_sinf(xtilt * SDL_PI_F / 180.0)`.

\\since This enum is available since SDL 3.2.0.
")
(:ENUM "SDL_PixelType" "Pixel type.

\\since This enum is available since SDL 3.2.0.
")
(:ENUM "SDL_BitmapOrder" "Bitmap pixel order, high bit -> low bit.

\\since This enum is available since SDL 3.2.0.
")
(:ENUM "SDL_PackedOrder" "Packed component order, high bit -> low bit.

\\since This enum is available since SDL 3.2.0.
")
(:ENUM "SDL_ArrayOrder" "Array component order, low byte -> high byte.

\\since This enum is available since SDL 3.2.0.
")
(:ENUM "SDL_PackedLayout" "Packed component layout.

\\since This enum is available since SDL 3.2.0.
")
(:FUNCTION "SDL_DEFINE_PIXELFOURCC"
 "A macro for defining custom FourCC pixel formats.

For example, defining SDL_PIXELFORMAT_YV12 looks like this:

```c
SDL_DEFINE_PIXELFOURCC('Y', 'V', '1', '2')
```

\\param A the first character of the FourCC code.
\\param B the second character of the FourCC code.
\\param C the third character of the FourCC code.
\\param D the fourth character of the FourCC code.
\\returns a format value in the style of SDL_PixelFormat.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_DEFINE_PIXELFORMAT"
 "A macro for defining custom non-FourCC pixel formats.

For example, defining SDL_PIXELFORMAT_RGBA8888 looks like this:

```c
SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_RGBA, SDL_PACKEDLAYOUT_8888, 32, 4)
```

\\param type the type of the new format, probably a SDL_PixelType value.
\\param order the order of the new format, probably a SDL_BitmapOrder,
             SDL_PackedOrder, or SDL_ArrayOrder value.
\\param layout the layout of the new format, probably an SDL_PackedLayout
              value or zero.
\\param bits the number of bits per pixel of the new format.
\\param bytes the number of bytes per pixel of the new format.
\\returns a format value in the style of SDL_PixelFormat.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_PIXELFLAG" "A macro to retrieve the flags of an SDL_PixelFormat.

This macro is generally not needed directly by an app, which should use
specific tests, like SDL_ISPIXELFORMAT_FOURCC, instead.

\\param format an SDL_PixelFormat to check.
\\returns the flags of `format`.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_PIXELTYPE" "A macro to retrieve the type of an SDL_PixelFormat.

This is usually a value from the SDL_PixelType enumeration.

\\param format an SDL_PixelFormat to check.
\\returns the type of `format`.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_PIXELORDER"
 "A macro to retrieve the order of an SDL_PixelFormat.

This is usually a value from the SDL_BitmapOrder, SDL_PackedOrder, or
SDL_ArrayOrder enumerations, depending on the format type.

\\param format an SDL_PixelFormat to check.
\\returns the order of `format`.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_PIXELLAYOUT"
 "A macro to retrieve the layout of an SDL_PixelFormat.

This is usually a value from the SDL_PackedLayout enumeration, or zero if a
layout doesn't make sense for the format type.

\\param format an SDL_PixelFormat to check.
\\returns the layout of `format`.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_BITSPERPIXEL"
 "A macro to determine an SDL_PixelFormat's bits per pixel.

Note that this macro double-evaluates its parameter, so do not use
expressions with side-effects here.

FourCC formats will report zero here, as it rarely makes sense to measure
them per-pixel.

\\param format an SDL_PixelFormat to check.
\\returns the bits-per-pixel of `format`.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.

\\sa SDL_BYTESPERPIXEL
")
(:FUNCTION "SDL_BYTESPERPIXEL"
 "A macro to determine an SDL_PixelFormat's bytes per pixel.

Note that this macro double-evaluates its parameter, so do not use
expressions with side-effects here.

FourCC formats do their best here, but many of them don't have a meaningful
measurement of bytes per pixel.

\\param format an SDL_PixelFormat to check.
\\returns the bytes-per-pixel of `format`.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.

\\sa SDL_BITSPERPIXEL
")
(:FUNCTION "SDL_ISPIXELFORMAT_INDEXED"
 "A macro to determine if an SDL_PixelFormat is an indexed format.

Note that this macro double-evaluates its parameter, so do not use
expressions with side-effects here.

\\param format an SDL_PixelFormat to check.
\\returns true if the format is indexed, false otherwise.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ISPIXELFORMAT_PACKED"
 "A macro to determine if an SDL_PixelFormat is a packed format.

Note that this macro double-evaluates its parameter, so do not use
expressions with side-effects here.

\\param format an SDL_PixelFormat to check.
\\returns true if the format is packed, false otherwise.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ISPIXELFORMAT_ARRAY"
 "A macro to determine if an SDL_PixelFormat is an array format.

Note that this macro double-evaluates its parameter, so do not use
expressions with side-effects here.

\\param format an SDL_PixelFormat to check.
\\returns true if the format is an array, false otherwise.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ISPIXELFORMAT_10BIT"
 "A macro to determine if an SDL_PixelFormat is a 10-bit format.

Note that this macro double-evaluates its parameter, so do not use
expressions with side-effects here.

\\param format an SDL_PixelFormat to check.
\\returns true if the format is 10-bit, false otherwise.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ISPIXELFORMAT_FLOAT"
 "A macro to determine if an SDL_PixelFormat is a floating point format.

Note that this macro double-evaluates its parameter, so do not use
expressions with side-effects here.

\\param format an SDL_PixelFormat to check.
\\returns true if the format is 10-bit, false otherwise.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ISPIXELFORMAT_ALPHA"
 "A macro to determine if an SDL_PixelFormat has an alpha channel.

Note that this macro double-evaluates its parameter, so do not use
expressions with side-effects here.

\\param format an SDL_PixelFormat to check.
\\returns true if the format has alpha, false otherwise.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ISPIXELFORMAT_FOURCC"
 "A macro to determine if an SDL_PixelFormat is a \"FourCC\" format.

This covers custom and other unusual formats.

Note that this macro double-evaluates its parameter, so do not use
expressions with side-effects here.

\\param format an SDL_PixelFormat to check.
\\returns true if the format has alpha, false otherwise.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:ENUM "SDL_PixelFormat" "Pixel format.

SDL's pixel formats have the following naming convention:

- Names with a list of components and a single bit count, such as RGB24 and
  ABGR32, define a platform-independent encoding into bytes in the order
  specified. For example, in RGB24 data, each pixel is encoded in 3 bytes
  (red, green, blue) in that order, and in ABGR32 data, each pixel is
  encoded in 4 bytes alpha, blue, green, red) in that order. Use these
  names if the property of a format that is important to you is the order
  of the bytes in memory or on disk.
- Names with a bit count per component, such as ARGB8888 and XRGB1555, are
  \"packed\" into an appropriately-sized integer in the platform's native
  endianness. For example, ARGB8888 is a sequence of 32-bit integers; in
  each integer, the most significant bits are alpha, and the least
  significant bits are blue. On a little-endian CPU such as x86, the least
  significant bits of each integer are arranged first in memory, but on a
  big-endian CPU such as s390x, the most significant bits are arranged
  first. Use these names if the property of a format that is important to
  you is the meaning of each bit position within a native-endianness
  integer.
- In indexed formats such as INDEX4LSB, each pixel is represented by
  encoding an index into the palette into the indicated number of bits,
  with multiple pixels packed into each byte if appropriate. In LSB
  formats, the first (leftmost) pixel is stored in the least-significant
  bits of the byte; in MSB formats, it's stored in the most-significant
  bits. INDEX8 does not need LSB/MSB variants, because each pixel exactly
  fills one byte.

The 32-bit byte-array encodings such as RGBA32 are aliases for the
appropriate 8888 encoding for the current platform. For example, RGBA32 is
an alias for ABGR8888 on little-endian CPUs like x86, or an alias for
RGBA8888 on big-endian CPUs.

\\since This enum is available since SDL 3.2.0.
")
(:ENUM "SDL_ColorType" "Colorspace color type.

\\since This enum is available since SDL 3.2.0.
")
(:ENUM "SDL_ColorRange" "Colorspace color range, as described by
https://www.itu.int/rec/R-REC-BT.2100-2-201807-I/en

\\since This enum is available since SDL 3.2.0.
")
(:ENUM "SDL_ColorPrimaries" "Colorspace color primaries, as described by
https://www.itu.int/rec/T-REC-H.273-201612-S/en

\\since This enum is available since SDL 3.2.0.
")
(:ENUM "SDL_TransferCharacteristics" "Colorspace transfer characteristics.

These are as described by https://www.itu.int/rec/T-REC-H.273-201612-S/en

\\since This enum is available since SDL 3.2.0.
")
(:ENUM "SDL_MatrixCoefficients" "Colorspace matrix coefficients.

These are as described by https://www.itu.int/rec/T-REC-H.273-201612-S/en

\\since This enum is available since SDL 3.2.0.
")
(:ENUM "SDL_ChromaLocation" "Colorspace chroma sample location.

\\since This enum is available since SDL 3.2.0.
")
(:FUNCTION "SDL_DEFINE_COLORSPACE"
 "A macro for defining custom SDL_Colorspace formats.

For example, defining SDL_COLORSPACE_SRGB looks like this:

```c
SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_RGB,
                      SDL_COLOR_RANGE_FULL,
                      SDL_COLOR_PRIMARIES_BT709,
                      SDL_TRANSFER_CHARACTERISTICS_SRGB,
                      SDL_MATRIX_COEFFICIENTS_IDENTITY,
                      SDL_CHROMA_LOCATION_NONE)
```

\\param type the type of the new format, probably an SDL_ColorType value.
\\param range the range of the new format, probably a SDL_ColorRange value.
\\param primaries the primaries of the new format, probably an
                 SDL_ColorPrimaries value.
\\param transfer the transfer characteristics of the new format, probably an
                SDL_TransferCharacteristics value.
\\param matrix the matrix coefficients of the new format, probably an
              SDL_MatrixCoefficients value.
\\param chroma the chroma sample location of the new format, probably an
              SDL_ChromaLocation value.
\\returns a format value in the style of SDL_Colorspace.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_COLORSPACETYPE"
 "A macro to retrieve the type of an SDL_Colorspace.

\\param cspace an SDL_Colorspace to check.
\\returns the SDL_ColorType for `cspace`.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_COLORSPACERANGE"
 "A macro to retrieve the range of an SDL_Colorspace.

\\param cspace an SDL_Colorspace to check.
\\returns the SDL_ColorRange of `cspace`.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_COLORSPACECHROMA"
 "A macro to retrieve the chroma sample location of an SDL_Colorspace.

\\param cspace an SDL_Colorspace to check.
\\returns the SDL_ChromaLocation of `cspace`.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_COLORSPACEPRIMARIES"
 "A macro to retrieve the primaries of an SDL_Colorspace.

\\param cspace an SDL_Colorspace to check.
\\returns the SDL_ColorPrimaries of `cspace`.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_COLORSPACETRANSFER"
 "A macro to retrieve the transfer characteristics of an SDL_Colorspace.

\\param cspace an SDL_Colorspace to check.
\\returns the SDL_TransferCharacteristics of `cspace`.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_COLORSPACEMATRIX"
 "A macro to retrieve the matrix coefficients of an SDL_Colorspace.

\\param cspace an SDL_Colorspace to check.
\\returns the SDL_MatrixCoefficients of `cspace`.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ISCOLORSPACE_MATRIX_BT601"
 "A macro to determine if an SDL_Colorspace uses BT601 (or BT470BG) matrix
coefficients.

Note that this macro double-evaluates its parameter, so do not use
expressions with side-effects here.

\\param cspace an SDL_Colorspace to check.
\\returns true if BT601 or BT470BG, false otherwise.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ISCOLORSPACE_MATRIX_BT709"
 "A macro to determine if an SDL_Colorspace uses BT709 matrix coefficients.

\\param cspace an SDL_Colorspace to check.
\\returns true if BT709, false otherwise.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ISCOLORSPACE_MATRIX_BT2020_NCL"
 "A macro to determine if an SDL_Colorspace uses BT2020_NCL matrix
coefficients.

\\param cspace an SDL_Colorspace to check.
\\returns true if BT2020_NCL, false otherwise.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ISCOLORSPACE_LIMITED_RANGE"
 "A macro to determine if an SDL_Colorspace has a limited range.

\\param cspace an SDL_Colorspace to check.
\\returns true if limited range, false otherwise.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ISCOLORSPACE_FULL_RANGE"
 "A macro to determine if an SDL_Colorspace has a full range.

\\param cspace an SDL_Colorspace to check.
\\returns true if full range, false otherwise.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:ENUM "SDL_Colorspace" "Colorspace definitions.

Since similar colorspaces may vary in their details (matrix, transfer
function, etc.), this is not an exhaustive list, but rather a
representative sample of the kinds of colorspaces supported in SDL.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_ColorPrimaries
\\sa SDL_ColorRange
\\sa SDL_ColorType
\\sa SDL_MatrixCoefficients
\\sa SDL_TransferCharacteristics
")
(:STRUCT "SDL_Color" "A structure that represents a color as RGBA components.

The bits of this structure can be directly reinterpreted as an
integer-packed color which uses the SDL_PIXELFORMAT_RGBA32 format
(SDL_PIXELFORMAT_ABGR8888 on little-endian systems and
SDL_PIXELFORMAT_RGBA8888 on big-endian systems).

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_FColor"
 "The bits of this structure can be directly reinterpreted as a float-packed
color which uses the SDL_PIXELFORMAT_RGBA128_FLOAT format

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_Palette" "A set of indexed colors representing a palette.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_SetPaletteColors
")
(:STRUCT "SDL_PixelFormatDetails" "Details about the format of a pixel.

\\since This struct is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetPixelFormatName"
 "Get the human readable name of a pixel format.

\\param format the pixel format to query.
\\returns the human readable name of the specified pixel format or
         \"SDL_PIXELFORMAT_UNKNOWN\" if the format isn't recognized.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetMasksForPixelFormat"
 "Convert one of the enumerated pixel formats to a bpp value and RGBA masks.

\\param format one of the SDL_PixelFormat values.
\\param bpp a bits per pixel value; usually 15, 16, or 32.
\\param Rmask a pointer filled in with the red mask for the format.
\\param Gmask a pointer filled in with the green mask for the format.
\\param Bmask a pointer filled in with the blue mask for the format.
\\param Amask a pointer filled in with the alpha mask for the format.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetPixelFormatForMasks
")
(:FUNCTION "SDL_GetPixelFormatForMasks"
 "Convert a bpp value and RGBA masks to an enumerated pixel format.

This will return `SDL_PIXELFORMAT_UNKNOWN` if the conversion wasn't
possible.

\\param bpp a bits per pixel value; usually 15, 16, or 32.
\\param Rmask the red mask for the format.
\\param Gmask the green mask for the format.
\\param Bmask the blue mask for the format.
\\param Amask the alpha mask for the format.
\\returns the SDL_PixelFormat value corresponding to the format masks, or
         SDL_PIXELFORMAT_UNKNOWN if there isn't a match.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetMasksForPixelFormat
")
(:FUNCTION "SDL_GetPixelFormatDetails"
 "Create an SDL_PixelFormatDetails structure corresponding to a pixel format.

Returned structure may come from a shared global cache (i.e. not newly
allocated), and hence should not be modified, especially the palette. Weird
errors such as `Blit combination not supported` may occur.

\\param format one of the SDL_PixelFormat values.
\\returns a pointer to a SDL_PixelFormatDetails structure or NULL on
         failure; call SDL_GetError() for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_CreatePalette"
 "Create a palette structure with the specified number of color entries.

The palette entries are initialized to white.

\\param ncolors represents the number of color entries in the color palette.
\\returns a new SDL_Palette structure on success or NULL on failure (e.g. if
         there wasn't enough memory); call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_DestroyPalette
\\sa SDL_SetPaletteColors
\\sa SDL_SetSurfacePalette
")
(:FUNCTION "SDL_SetPaletteColors" "Set a range of colors in a palette.

\\param palette the SDL_Palette structure to modify.
\\param colors an array of SDL_Color structures to copy into the palette.
\\param firstcolor the index of the first palette entry to modify.
\\param ncolors the number of entries to modify.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread, as long as
              the palette is not modified or destroyed in another thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_DestroyPalette"
 "Free a palette created with SDL_CreatePalette().

\\param palette the SDL_Palette structure to be freed.

\\threadsafety It is safe to call this function from any thread, as long as
              the palette is not modified or destroyed in another thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreatePalette
")
(:FUNCTION "SDL_MapRGB"
 "Map an RGB triple to an opaque pixel value for a given pixel format.

This function maps the RGB color value to the specified pixel format and
returns the pixel value best approximating the given RGB color value for
the given pixel format.

If the format has a palette (8-bit) the index of the closest matching color
in the palette will be returned.

If the specified pixel format has an alpha component it will be returned as
all 1 bits (fully opaque).

If the pixel format bpp (color depth) is less than 32-bpp then the unused
upper bits of the return value can safely be ignored (e.g., with a 16-bpp
format the return value can be assigned to a Uint16, and similarly a Uint8
for an 8-bpp format).

\\param format a pointer to SDL_PixelFormatDetails describing the pixel
              format.
\\param palette an optional palette for indexed formats, may be NULL.
\\param r the red component of the pixel in the range 0-255.
\\param g the green component of the pixel in the range 0-255.
\\param b the blue component of the pixel in the range 0-255.
\\returns a pixel value.

\\threadsafety It is safe to call this function from any thread, as long as
              the palette is not modified.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetPixelFormatDetails
\\sa SDL_GetRGB
\\sa SDL_MapRGBA
\\sa SDL_MapSurfaceRGB
")
(:FUNCTION "SDL_MapRGBA"
 "Map an RGBA quadruple to a pixel value for a given pixel format.

This function maps the RGBA color value to the specified pixel format and
returns the pixel value best approximating the given RGBA color value for
the given pixel format.

If the specified pixel format has no alpha component the alpha value will
be ignored (as it will be in formats with a palette).

If the format has a palette (8-bit) the index of the closest matching color
in the palette will be returned.

If the pixel format bpp (color depth) is less than 32-bpp then the unused
upper bits of the return value can safely be ignored (e.g., with a 16-bpp
format the return value can be assigned to a Uint16, and similarly a Uint8
for an 8-bpp format).

\\param format a pointer to SDL_PixelFormatDetails describing the pixel
              format.
\\param palette an optional palette for indexed formats, may be NULL.
\\param r the red component of the pixel in the range 0-255.
\\param g the green component of the pixel in the range 0-255.
\\param b the blue component of the pixel in the range 0-255.
\\param a the alpha component of the pixel in the range 0-255.
\\returns a pixel value.

\\threadsafety It is safe to call this function from any thread, as long as
              the palette is not modified.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetPixelFormatDetails
\\sa SDL_GetRGBA
\\sa SDL_MapRGB
\\sa SDL_MapSurfaceRGBA
")
(:FUNCTION "SDL_GetRGB" "Get RGB values from a pixel in the specified format.

This function uses the entire 8-bit [0..255] range when converting color
components from pixel formats with less than 8-bits per RGB component
(e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
0xff, 0xff] not [0xf8, 0xfc, 0xf8]).

\\param pixel a pixel value.
\\param format a pointer to SDL_PixelFormatDetails describing the pixel
              format.
\\param palette an optional palette for indexed formats, may be NULL.
\\param r a pointer filled in with the red component, may be NULL.
\\param g a pointer filled in with the green component, may be NULL.
\\param b a pointer filled in with the blue component, may be NULL.

\\threadsafety It is safe to call this function from any thread, as long as
              the palette is not modified.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetPixelFormatDetails
\\sa SDL_GetRGBA
\\sa SDL_MapRGB
\\sa SDL_MapRGBA
")
(:FUNCTION "SDL_GetRGBA" "Get RGBA values from a pixel in the specified format.

This function uses the entire 8-bit [0..255] range when converting color
components from pixel formats with less than 8-bits per RGB component
(e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
0xff, 0xff] not [0xf8, 0xfc, 0xf8]).

If the surface has no alpha component, the alpha will be returned as 0xff
(100% opaque).

\\param pixel a pixel value.
\\param format a pointer to SDL_PixelFormatDetails describing the pixel
              format.
\\param palette an optional palette for indexed formats, may be NULL.
\\param r a pointer filled in with the red component, may be NULL.
\\param g a pointer filled in with the green component, may be NULL.
\\param b a pointer filled in with the blue component, may be NULL.
\\param a a pointer filled in with the alpha component, may be NULL.

\\threadsafety It is safe to call this function from any thread, as long as
              the palette is not modified.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetPixelFormatDetails
\\sa SDL_GetRGB
\\sa SDL_MapRGB
\\sa SDL_MapRGBA
")
(:FUNCTION "SDL_GetPlatform" "Get the name of the platform.

Here are the names returned for some (but not all) supported platforms:

- \"Windows\"
- \"macOS\"
- \"Linux\"
- \"iOS\"
- \"Android\"

\\returns the name of the platform. If the correct platform name is not
         available, returns a string beginning with the text \"Unknown\".

\\since This function is available since SDL 3.2.0.
")
(:ENUM "SDL_PowerState" "The basic state for the system's power supply.

These are results returned by SDL_GetPowerInfo().

\\since This enum is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetPowerInfo" "Get the current power supply details.

You should never take a battery status as absolute truth. Batteries
(especially failing batteries) are delicate hardware, and the values
reported here are best estimates based on what that hardware reports. It's
not uncommon for older batteries to lose stored power much faster than it
reports, or completely drain when reporting it has 20 percent left, etc.

Battery status can change at any time; if you are concerned with power
state, you should call this function frequently, and perhaps ignore changes
until they seem to be stable for a few seconds.

It's possible a platform can only report battery percentage or time left
but not both.

\\param seconds a pointer filled in with the seconds of battery life left,
               or NULL to ignore. This will be filled in with -1 if we
               can't determine a value or there is no battery.
\\param percent a pointer filled in with the percentage of battery life
               left, between 0 and 100, or NULL to ignore. This will be
               filled in with -1 we can't determine a value or there is no
               battery.
\\returns the current battery state or `SDL_POWERSTATE_ERROR` on failure;
         call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:STRUCT "SDL_Process" "An opaque handle representing a system process.

\\since This datatype is available since SDL 3.2.0.

\\sa SDL_CreateProcess
")
(:FUNCTION "SDL_CreateProcess" "Create a new process.

The path to the executable is supplied in args[0]. args[1..N] are
additional arguments passed on the command line of the new process, and the
argument list should be terminated with a NULL, e.g.:

```c
const char *args[] = { \"myprogram\", \"argument\", NULL };
```

Setting pipe_stdio to true is equivalent to setting
`SDL_PROP_PROCESS_CREATE_STDIN_NUMBER` and
`SDL_PROP_PROCESS_CREATE_STDOUT_NUMBER` to `SDL_PROCESS_STDIO_APP`, and
will allow the use of SDL_ReadProcess() or SDL_GetProcessInput() and
SDL_GetProcessOutput().

See SDL_CreateProcessWithProperties() for more details.

\\param args the path and arguments for the new process.
\\param pipe_stdio true to create pipes to the process's standard input and
                  from the process's standard output, false for the process
                  to have no input and inherit the application's standard
                  output.
\\returns the newly created and running process, or NULL if the process
         couldn't be created.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateProcessWithProperties
\\sa SDL_GetProcessProperties
\\sa SDL_ReadProcess
\\sa SDL_GetProcessInput
\\sa SDL_GetProcessOutput
\\sa SDL_KillProcess
\\sa SDL_WaitProcess
\\sa SDL_DestroyProcess
")
(:ENUM "SDL_ProcessIO"
 "Description of where standard I/O should be directed when creating a
process.

If a standard I/O stream is set to SDL_PROCESS_STDIO_INHERITED, it will go
to the same place as the application's I/O stream. This is the default for
standard output and standard error.

If a standard I/O stream is set to SDL_PROCESS_STDIO_NULL, it is connected
to `NUL:` on Windows and `/dev/null` on POSIX systems. This is the default
for standard input.

If a standard I/O stream is set to SDL_PROCESS_STDIO_APP, it is connected
to a new SDL_IOStream that is available to the application. Standard input
will be available as `SDL_PROP_PROCESS_STDIN_POINTER` and allows
SDL_GetProcessInput(), standard output will be available as
`SDL_PROP_PROCESS_STDOUT_POINTER` and allows SDL_ReadProcess() and
SDL_GetProcessOutput(), and standard error will be available as
`SDL_PROP_PROCESS_STDERR_POINTER` in the properties for the created
process.

If a standard I/O stream is set to SDL_PROCESS_STDIO_REDIRECT, it is
connected to an existing SDL_IOStream provided by the application. Standard
input is provided using `SDL_PROP_PROCESS_CREATE_STDIN_POINTER`, standard
output is provided using `SDL_PROP_PROCESS_CREATE_STDOUT_POINTER`, and
standard error is provided using `SDL_PROP_PROCESS_CREATE_STDERR_POINTER`
in the creation properties. These existing streams should be closed by the
application once the new process is created.

In order to use an SDL_IOStream with SDL_PROCESS_STDIO_REDIRECT, it must
have `SDL_PROP_IOSTREAM_WINDOWS_HANDLE_POINTER` or
`SDL_PROP_IOSTREAM_FILE_DESCRIPTOR_NUMBER` set. This is true for streams
representing files and process I/O.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_CreateProcessWithProperties
\\sa SDL_GetProcessProperties
\\sa SDL_ReadProcess
\\sa SDL_GetProcessInput
\\sa SDL_GetProcessOutput
")
(:FUNCTION "SDL_CreateProcessWithProperties"
 "Create a new process with the specified properties.

These are the supported properties:

- `SDL_PROP_PROCESS_CREATE_ARGS_POINTER`: an array of strings containing
  the program to run, any arguments, and a NULL pointer, e.g. const char
  *args[] = { \"myprogram\", \"argument\", NULL }. This is a required property.
- `SDL_PROP_PROCESS_CREATE_ENVIRONMENT_POINTER`: an SDL_Environment
  pointer. If this property is set, it will be the entire environment for
  the process, otherwise the current environment is used.
- `SDL_PROP_PROCESS_CREATE_STDIN_NUMBER`: an SDL_ProcessIO value describing
  where standard input for the process comes from, defaults to
  `SDL_PROCESS_STDIO_NULL`.
- `SDL_PROP_PROCESS_CREATE_STDIN_POINTER`: an SDL_IOStream pointer used for
  standard input when `SDL_PROP_PROCESS_CREATE_STDIN_NUMBER` is set to
  `SDL_PROCESS_STDIO_REDIRECT`.
- `SDL_PROP_PROCESS_CREATE_STDOUT_NUMBER`: an SDL_ProcessIO value
  describing where standard output for the process goes to, defaults to
  `SDL_PROCESS_STDIO_INHERITED`.
- `SDL_PROP_PROCESS_CREATE_STDOUT_POINTER`: an SDL_IOStream pointer used
  for standard output when `SDL_PROP_PROCESS_CREATE_STDOUT_NUMBER` is set
  to `SDL_PROCESS_STDIO_REDIRECT`.
- `SDL_PROP_PROCESS_CREATE_STDERR_NUMBER`: an SDL_ProcessIO value
  describing where standard error for the process goes to, defaults to
  `SDL_PROCESS_STDIO_INHERITED`.
- `SDL_PROP_PROCESS_CREATE_STDERR_POINTER`: an SDL_IOStream pointer used
  for standard error when `SDL_PROP_PROCESS_CREATE_STDERR_NUMBER` is set to
  `SDL_PROCESS_STDIO_REDIRECT`.
- `SDL_PROP_PROCESS_CREATE_STDERR_TO_STDOUT_BOOLEAN`: true if the error
  output of the process should be redirected into the standard output of
  the process. This property has no effect if
  `SDL_PROP_PROCESS_CREATE_STDERR_NUMBER` is set.
- `SDL_PROP_PROCESS_CREATE_BACKGROUND_BOOLEAN`: true if the process should
  run in the background. In this case the default input and output is
  `SDL_PROCESS_STDIO_NULL` and the exitcode of the process is not
  available, and will always be 0.

On POSIX platforms, wait() and waitpid(-1, ...) should not be called, and
SIGCHLD should not be ignored or handled because those would prevent SDL
from properly tracking the lifetime of the underlying process. You should
use SDL_WaitProcess() instead.

\\param props the properties to use.
\\returns the newly created and running process, or NULL if the process
         couldn't be created.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateProcess
\\sa SDL_GetProcessProperties
\\sa SDL_ReadProcess
\\sa SDL_GetProcessInput
\\sa SDL_GetProcessOutput
\\sa SDL_KillProcess
\\sa SDL_WaitProcess
\\sa SDL_DestroyProcess
")
(:FUNCTION "SDL_GetProcessProperties"
 "Get the properties associated with a process.

The following read-only properties are provided by SDL:

- `SDL_PROP_PROCESS_PID_NUMBER`: the process ID of the process.
- `SDL_PROP_PROCESS_STDIN_POINTER`: an SDL_IOStream that can be used to
  write input to the process, if it was created with
  `SDL_PROP_PROCESS_CREATE_STDIN_NUMBER` set to `SDL_PROCESS_STDIO_APP`.
- `SDL_PROP_PROCESS_STDOUT_POINTER`: a non-blocking SDL_IOStream that can
  be used to read output from the process, if it was created with
  `SDL_PROP_PROCESS_CREATE_STDOUT_NUMBER` set to `SDL_PROCESS_STDIO_APP`.
- `SDL_PROP_PROCESS_STDERR_POINTER`: a non-blocking SDL_IOStream that can
  be used to read error output from the process, if it was created with
  `SDL_PROP_PROCESS_CREATE_STDERR_NUMBER` set to `SDL_PROCESS_STDIO_APP`.
- `SDL_PROP_PROCESS_BACKGROUND_BOOLEAN`: true if the process is running in
  the background.

\\param process the process to query.
\\returns a valid property ID on success or 0 on failure; call
         SDL_GetError() for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateProcess
\\sa SDL_CreateProcessWithProperties
")
(:FUNCTION "SDL_ReadProcess" "Read all the output from a process.

If a process was created with I/O enabled, you can use this function to
read the output. This function blocks until the process is complete,
capturing all output, and providing the process exit code.

The data is allocated with a zero byte at the end (null terminated) for
convenience. This extra byte is not included in the value reported via
`datasize`.

The data should be freed with SDL_free().

\\param process The process to read.
\\param datasize a pointer filled in with the number of bytes read, may be
                NULL.
\\param exitcode a pointer filled in with the process exit code if the
                process has exited, may be NULL.
\\returns the data or NULL on failure; call SDL_GetError() for more
         information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateProcess
\\sa SDL_CreateProcessWithProperties
\\sa SDL_DestroyProcess
")
(:FUNCTION "SDL_GetProcessInput"
 "Get the SDL_IOStream associated with process standard input.

The process must have been created with SDL_CreateProcess() and pipe_stdio
set to true, or with SDL_CreateProcessWithProperties() and
`SDL_PROP_PROCESS_CREATE_STDIN_NUMBER` set to `SDL_PROCESS_STDIO_APP`.

Writing to this stream can return less data than expected if the process
hasn't read its input. It may be blocked waiting for its output to be read,
if so you may need to call SDL_GetProcessOutput() and read the output in
parallel with writing input.

\\param process The process to get the input stream for.
\\returns the input stream or NULL on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateProcess
\\sa SDL_CreateProcessWithProperties
\\sa SDL_GetProcessOutput
")
(:FUNCTION "SDL_GetProcessOutput"
 "Get the SDL_IOStream associated with process standard output.

The process must have been created with SDL_CreateProcess() and pipe_stdio
set to true, or with SDL_CreateProcessWithProperties() and
`SDL_PROP_PROCESS_CREATE_STDOUT_NUMBER` set to `SDL_PROCESS_STDIO_APP`.

Reading from this stream can return 0 with SDL_GetIOStatus() returning
SDL_IO_STATUS_NOT_READY if no output is available yet.

\\param process The process to get the output stream for.
\\returns the output stream or NULL on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateProcess
\\sa SDL_CreateProcessWithProperties
\\sa SDL_GetProcessInput
")
(:FUNCTION "SDL_KillProcess" "Stop a process.

\\param process The process to stop.
\\param force true to terminate the process immediately, false to try to
             stop the process gracefully. In general you should try to stop
             the process gracefully first as terminating a process may
             leave it with half-written data or in some other unstable
             state.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateProcess
\\sa SDL_CreateProcessWithProperties
\\sa SDL_WaitProcess
\\sa SDL_DestroyProcess
")
(:FUNCTION "SDL_WaitProcess" "Wait for a process to finish.

This can be called multiple times to get the status of a process.

The exit code will be the exit code of the process if it terminates
normally, a negative signal if it terminated due to a signal, or -255
otherwise. It will not be changed if the process is still running.

If you create a process with standard output piped to the application
(`pipe_stdio` being true) then you should read all of the process output
before calling SDL_WaitProcess(). If you don't do this the process might be
blocked indefinitely waiting for output to be read and SDL_WaitProcess()
will never return true;

\\param process The process to wait for.
\\param block If true, block until the process finishes; otherwise, report
             on the process' status.
\\param exitcode a pointer filled in with the process exit code if the
                process has exited, may be NULL.
\\returns true if the process exited, false otherwise.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateProcess
\\sa SDL_CreateProcessWithProperties
\\sa SDL_KillProcess
\\sa SDL_DestroyProcess
")
(:FUNCTION "SDL_DestroyProcess" "Destroy a previously created process object.

Note that this does not stop the process, just destroys the SDL object used
to track it. If you want to stop the process you should use
SDL_KillProcess().

\\param process The process object to destroy.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateProcess
\\sa SDL_CreateProcessWithProperties
\\sa SDL_KillProcess
")
(:BITFIELD "SDL_PropertiesID" "SDL properties ID

\\since This datatype is available since SDL 3.2.0.
")
(:ENUM "SDL_PropertyType" "SDL property type

\\since This enum is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetGlobalProperties" "Get the global SDL properties.

\\returns a valid property ID on success or 0 on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_CreateProperties" "Create a group of properties.

All properties are automatically destroyed when SDL_Quit() is called.

\\returns an ID for a new group of properties, or 0 on failure; call
         SDL_GetError() for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_DestroyProperties
")
(:FUNCTION "SDL_CopyProperties" "Copy a group of properties.

Copy all the properties from one group of properties to another, with the
exception of properties requiring cleanup (set using
SDL_SetPointerPropertyWithCleanup()), which will not be copied. Any
property that already exists on `dst` will be overwritten.

\\param src the properties to copy.
\\param dst the destination properties.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_LockProperties" "Lock a group of properties.

Obtain a multi-threaded lock for these properties. Other threads will wait
while trying to lock these properties until they are unlocked. Properties
must be unlocked before they are destroyed.

The lock is automatically taken when setting individual properties, this
function is only needed when you want to set several properties atomically
or want to guarantee that properties being queried aren't freed in another
thread.

\\param props the properties to lock.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_UnlockProperties
")
(:FUNCTION "SDL_UnlockProperties" "Unlock a group of properties.

\\param props the properties to unlock.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_LockProperties
")
(:FUNCTION "SDL_SetPointerPropertyWithCleanup"
 "Set a pointer property in a group of properties with a cleanup function
that is called when the property is deleted.

The cleanup function is also called if setting the property fails for any
reason.

For simply setting basic data types, like numbers, bools, or strings, use
SDL_SetNumberProperty, SDL_SetBooleanProperty, or SDL_SetStringProperty
instead, as those functions will handle cleanup on your behalf. This
function is only for more complex, custom data.

\\param props the properties to modify.
\\param name the name of the property to modify.
\\param value the new value of the property, or NULL to delete the property.
\\param cleanup the function to call when this property is deleted, or NULL
               if no cleanup is necessary.
\\param userdata a pointer that is passed to the cleanup function.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetPointerProperty
\\sa SDL_SetPointerProperty
\\sa SDL_CleanupPropertyCallback
")
(:FUNCTION "SDL_SetPointerProperty"
 "Set a pointer property in a group of properties.

\\param props the properties to modify.
\\param name the name of the property to modify.
\\param value the new value of the property, or NULL to delete the property.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetPointerProperty
\\sa SDL_HasProperty
\\sa SDL_SetBooleanProperty
\\sa SDL_SetFloatProperty
\\sa SDL_SetNumberProperty
\\sa SDL_SetPointerPropertyWithCleanup
\\sa SDL_SetStringProperty
")
(:FUNCTION "SDL_SetStringProperty"
 "Set a string property in a group of properties.

This function makes a copy of the string; the caller does not have to
preserve the data after this call completes.

\\param props the properties to modify.
\\param name the name of the property to modify.
\\param value the new value of the property, or NULL to delete the property.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetStringProperty
")
(:FUNCTION "SDL_SetNumberProperty"
 "Set an integer property in a group of properties.

\\param props the properties to modify.
\\param name the name of the property to modify.
\\param value the new value of the property.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetNumberProperty
")
(:FUNCTION "SDL_SetFloatProperty"
 "Set a floating point property in a group of properties.

\\param props the properties to modify.
\\param name the name of the property to modify.
\\param value the new value of the property.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetFloatProperty
")
(:FUNCTION "SDL_SetBooleanProperty"
 "Set a boolean property in a group of properties.

\\param props the properties to modify.
\\param name the name of the property to modify.
\\param value the new value of the property.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetBooleanProperty
")
(:FUNCTION "SDL_HasProperty"
 "Return whether a property exists in a group of properties.

\\param props the properties to query.
\\param name the name of the property to query.
\\returns true if the property exists, or false if it doesn't.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetPropertyType
")
(:FUNCTION "SDL_GetPropertyType"
 "Get the type of a property in a group of properties.

\\param props the properties to query.
\\param name the name of the property to query.
\\returns the type of the property, or SDL_PROPERTY_TYPE_INVALID if it is
         not set.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_HasProperty
")
(:FUNCTION "SDL_GetPointerProperty"
 "Get a pointer property from a group of properties.

By convention, the names of properties that SDL exposes on objects will
start with \"SDL.\", and properties that SDL uses internally will start with
\"SDL.internal.\". These should be considered read-only and should not be
modified by applications.

\\param props the properties to query.
\\param name the name of the property to query.
\\param default_value the default value of the property.
\\returns the value of the property, or `default_value` if it is not set or
         not a pointer property.

\\threadsafety It is safe to call this function from any thread, although
              the data returned is not protected and could potentially be
              freed if you call SDL_SetPointerProperty() or
              SDL_ClearProperty() on these properties from another thread.
              If you need to avoid this, use SDL_LockProperties() and
              SDL_UnlockProperties().

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetBooleanProperty
\\sa SDL_GetFloatProperty
\\sa SDL_GetNumberProperty
\\sa SDL_GetPropertyType
\\sa SDL_GetStringProperty
\\sa SDL_HasProperty
\\sa SDL_SetPointerProperty
")
(:FUNCTION "SDL_GetStringProperty"
 "Get a string property from a group of properties.

\\param props the properties to query.
\\param name the name of the property to query.
\\param default_value the default value of the property.
\\returns the value of the property, or `default_value` if it is not set or
         not a string property.

\\threadsafety It is safe to call this function from any thread, although
              the data returned is not protected and could potentially be
              freed if you call SDL_SetStringProperty() or
              SDL_ClearProperty() on these properties from another thread.
              If you need to avoid this, use SDL_LockProperties() and
              SDL_UnlockProperties().

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetPropertyType
\\sa SDL_HasProperty
\\sa SDL_SetStringProperty
")
(:FUNCTION "SDL_GetNumberProperty"
 "Get a number property from a group of properties.

You can use SDL_GetPropertyType() to query whether the property exists and
is a number property.

\\param props the properties to query.
\\param name the name of the property to query.
\\param default_value the default value of the property.
\\returns the value of the property, or `default_value` if it is not set or
         not a number property.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetPropertyType
\\sa SDL_HasProperty
\\sa SDL_SetNumberProperty
")
(:FUNCTION "SDL_GetFloatProperty"
 "Get a floating point property from a group of properties.

You can use SDL_GetPropertyType() to query whether the property exists and
is a floating point property.

\\param props the properties to query.
\\param name the name of the property to query.
\\param default_value the default value of the property.
\\returns the value of the property, or `default_value` if it is not set or
         not a float property.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetPropertyType
\\sa SDL_HasProperty
\\sa SDL_SetFloatProperty
")
(:FUNCTION "SDL_GetBooleanProperty"
 "Get a boolean property from a group of properties.

You can use SDL_GetPropertyType() to query whether the property exists and
is a boolean property.

\\param props the properties to query.
\\param name the name of the property to query.
\\param default_value the default value of the property.
\\returns the value of the property, or `default_value` if it is not set or
         not a boolean property.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetPropertyType
\\sa SDL_HasProperty
\\sa SDL_SetBooleanProperty
")
(:FUNCTION "SDL_ClearProperty" "Clear a property from a group of properties.

\\param props the properties to modify.
\\param name the name of the property to clear.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_EnumerateProperties"
 "Enumerate the properties contained in a group of properties.

The callback function is called for each property in the group of
properties. The properties are locked during enumeration.

\\param props the properties to query.
\\param callback the function to call for each property.
\\param userdata a pointer that is passed to `callback`.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_DestroyProperties" "Destroy a group of properties.

All properties are deleted and their cleanup functions will be called, if
any.

\\param props the properties to destroy.

\\threadsafety This function should not be called while these properties are
              locked or other threads might be setting or getting values
              from these properties.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateProperties
")
(:STRUCT "SDL_Point" "The structure that defines a point (using integers).

\\since This struct is available since SDL 3.2.0.

\\sa SDL_GetRectEnclosingPoints
\\sa SDL_PointInRect
")
(:STRUCT "SDL_FPoint"
 "The structure that defines a point (using floating point values).

\\since This struct is available since SDL 3.2.0.

\\sa SDL_GetRectEnclosingPointsFloat
\\sa SDL_PointInRectFloat
")
(:STRUCT "SDL_Rect"
 "A rectangle, with the origin at the upper left (using integers).

\\since This struct is available since SDL 3.2.0.

\\sa SDL_RectEmpty
\\sa SDL_RectsEqual
\\sa SDL_HasRectIntersection
\\sa SDL_GetRectIntersection
\\sa SDL_GetRectAndLineIntersection
\\sa SDL_GetRectUnion
\\sa SDL_GetRectEnclosingPoints
")
(:STRUCT "SDL_FRect"
 "A rectangle, with the origin at the upper left (using floating point
values).

\\since This struct is available since SDL 3.2.0.

\\sa SDL_RectEmptyFloat
\\sa SDL_RectsEqualFloat
\\sa SDL_RectsEqualEpsilon
\\sa SDL_HasRectIntersectionFloat
\\sa SDL_GetRectIntersectionFloat
\\sa SDL_GetRectAndLineIntersectionFloat
\\sa SDL_GetRectUnionFloat
\\sa SDL_GetRectEnclosingPointsFloat
\\sa SDL_PointInRectFloat
")
(:FUNCTION "SDL_RectToFRect" "Convert an SDL_Rect to SDL_FRect

\\param rect a pointer to an SDL_Rect.
\\param frect a pointer filled in with the floating point representation of
             `rect`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_PointInRect"
 "Determine whether a point resides inside a rectangle.

A point is considered part of a rectangle if both `p` and `r` are not NULL,
and `p`'s x and y coordinates are >= to the rectangle's top left corner,
and < the rectangle's x+w and y+h. So a 1x1 rectangle considers point (0,0)
as \"inside\" and (0,1) as not.

Note that this is a forced-inline function in a header, and not a public
API function available in the SDL library (which is to say, the code is
embedded in the calling program and the linker and dynamic loader will not
be able to find this function inside SDL itself).

\\param p the point to test.
\\param r the rectangle to test.
\\returns true if `p` is contained by `r`, false otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_RectEmpty" "Determine whether a rectangle has no area.

A rectangle is considered \"empty\" for this function if `r` is NULL, or if
`r`'s width and/or height are <= 0.

Note that this is a forced-inline function in a header, and not a public
API function available in the SDL library (which is to say, the code is
embedded in the calling program and the linker and dynamic loader will not
be able to find this function inside SDL itself).

\\param r the rectangle to test.
\\returns true if the rectangle is \"empty\", false otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_RectsEqual" "Determine whether two rectangles are equal.

Rectangles are considered equal if both are not NULL and each of their x,
y, width and height match.

Note that this is a forced-inline function in a header, and not a public
API function available in the SDL library (which is to say, the code is
embedded in the calling program and the linker and dynamic loader will not
be able to find this function inside SDL itself).

\\param a the first rectangle to test.
\\param b the second rectangle to test.
\\returns true if the rectangles are equal, false otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_HasRectIntersection"
 "Determine whether two rectangles intersect.

If either pointer is NULL the function will return false.

\\param A an SDL_Rect structure representing the first rectangle.
\\param B an SDL_Rect structure representing the second rectangle.
\\returns true if there is an intersection, false otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetRectIntersection
")
(:FUNCTION "SDL_GetRectIntersection"
 "Calculate the intersection of two rectangles.

If `result` is NULL then this function will return false.

\\param A an SDL_Rect structure representing the first rectangle.
\\param B an SDL_Rect structure representing the second rectangle.
\\param result an SDL_Rect structure filled in with the intersection of
              rectangles `A` and `B`.
\\returns true if there is an intersection, false otherwise.

\\since This function is available since SDL 3.2.0.

\\sa SDL_HasRectIntersection
")
(:FUNCTION "SDL_GetRectUnion" "Calculate the union of two rectangles.

\\param A an SDL_Rect structure representing the first rectangle.
\\param B an SDL_Rect structure representing the second rectangle.
\\param result an SDL_Rect structure filled in with the union of rectangles
              `A` and `B`.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetRectEnclosingPoints"
 "Calculate a minimal rectangle enclosing a set of points.

If `clip` is not NULL then only points inside of the clipping rectangle are
considered.

\\param points an array of SDL_Point structures representing points to be
              enclosed.
\\param count the number of structures in the `points` array.
\\param clip an SDL_Rect used for clipping or NULL to enclose all points.
\\param result an SDL_Rect structure filled in with the minimal enclosing
              rectangle.
\\returns true if any points were enclosed or false if all the points were
         outside of the clipping rectangle.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetRectAndLineIntersection"
 "Calculate the intersection of a rectangle and line segment.

This function is used to clip a line segment to a rectangle. A line segment
contained entirely within the rectangle or that does not intersect will
remain unchanged. A line segment that crosses the rectangle at either or
both ends will be clipped to the boundary of the rectangle and the new
coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.

\\param rect an SDL_Rect structure representing the rectangle to intersect.
\\param X1 a pointer to the starting X-coordinate of the line.
\\param Y1 a pointer to the starting Y-coordinate of the line.
\\param X2 a pointer to the ending X-coordinate of the line.
\\param Y2 a pointer to the ending Y-coordinate of the line.
\\returns true if there is an intersection, false otherwise.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_PointInRectFloat"
 "Determine whether a point resides inside a floating point rectangle.

A point is considered part of a rectangle if both `p` and `r` are not NULL,
and `p`'s x and y coordinates are >= to the rectangle's top left corner,
and <= the rectangle's x+w and y+h. So a 1x1 rectangle considers point
(0,0) and (0,1) as \"inside\" and (0,2) as not.

Note that this is a forced-inline function in a header, and not a public
API function available in the SDL library (which is to say, the code is
embedded in the calling program and the linker and dynamic loader will not
be able to find this function inside SDL itself).

\\param p the point to test.
\\param r the rectangle to test.
\\returns true if `p` is contained by `r`, false otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_RectEmptyFloat"
 "Determine whether a floating point rectangle can contain any point.

A rectangle is considered \"empty\" for this function if `r` is NULL, or if
`r`'s width and/or height are < 0.0f.

Note that this is a forced-inline function in a header, and not a public
API function available in the SDL library (which is to say, the code is
embedded in the calling program and the linker and dynamic loader will not
be able to find this function inside SDL itself).

\\param r the rectangle to test.
\\returns true if the rectangle is \"empty\", false otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_RectsEqualEpsilon"
 "Determine whether two floating point rectangles are equal, within some
given epsilon.

Rectangles are considered equal if both are not NULL and each of their x,
y, width and height are within `epsilon` of each other. If you don't know
what value to use for `epsilon`, you should call the SDL_RectsEqualFloat
function instead.

Note that this is a forced-inline function in a header, and not a public
API function available in the SDL library (which is to say, the code is
embedded in the calling program and the linker and dynamic loader will not
be able to find this function inside SDL itself).

\\param a the first rectangle to test.
\\param b the second rectangle to test.
\\param epsilon the epsilon value for comparison.
\\returns true if the rectangles are equal, false otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RectsEqualFloat
")
(:FUNCTION "SDL_RectsEqualFloat"
 "Determine whether two floating point rectangles are equal, within a default
epsilon.

Rectangles are considered equal if both are not NULL and each of their x,
y, width and height are within SDL_FLT_EPSILON of each other. This is often
a reasonable way to compare two floating point rectangles and deal with the
slight precision variations in floating point calculations that tend to pop
up.

Note that this is a forced-inline function in a header, and not a public
API function available in the SDL library (which is to say, the code is
embedded in the calling program and the linker and dynamic loader will not
be able to find this function inside SDL itself).

\\param a the first rectangle to test.
\\param b the second rectangle to test.
\\returns true if the rectangles are equal, false otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RectsEqualEpsilon
")
(:FUNCTION "SDL_HasRectIntersectionFloat"
 "Determine whether two rectangles intersect with float precision.

If either pointer is NULL the function will return false.

\\param A an SDL_FRect structure representing the first rectangle.
\\param B an SDL_FRect structure representing the second rectangle.
\\returns true if there is an intersection, false otherwise.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetRectIntersection
")
(:FUNCTION "SDL_GetRectIntersectionFloat"
 "Calculate the intersection of two rectangles with float precision.

If `result` is NULL then this function will return false.

\\param A an SDL_FRect structure representing the first rectangle.
\\param B an SDL_FRect structure representing the second rectangle.
\\param result an SDL_FRect structure filled in with the intersection of
              rectangles `A` and `B`.
\\returns true if there is an intersection, false otherwise.

\\since This function is available since SDL 3.2.0.

\\sa SDL_HasRectIntersectionFloat
")
(:FUNCTION "SDL_GetRectUnionFloat"
 "Calculate the union of two rectangles with float precision.

\\param A an SDL_FRect structure representing the first rectangle.
\\param B an SDL_FRect structure representing the second rectangle.
\\param result an SDL_FRect structure filled in with the union of rectangles
              `A` and `B`.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetRectEnclosingPointsFloat"
 "Calculate a minimal rectangle enclosing a set of points with float
precision.

If `clip` is not NULL then only points inside of the clipping rectangle are
considered.

\\param points an array of SDL_FPoint structures representing points to be
              enclosed.
\\param count the number of structures in the `points` array.
\\param clip an SDL_FRect used for clipping or NULL to enclose all points.
\\param result an SDL_FRect structure filled in with the minimal enclosing
              rectangle.
\\returns true if any points were enclosed or false if all the points were
         outside of the clipping rectangle.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetRectAndLineIntersectionFloat"
 "Calculate the intersection of a rectangle and line segment with float
precision.

This function is used to clip a line segment to a rectangle. A line segment
contained entirely within the rectangle or that does not intersect will
remain unchanged. A line segment that crosses the rectangle at either or
both ends will be clipped to the boundary of the rectangle and the new
coordinates saved in `X1`, `Y1`, `X2`, and/or `Y2` as necessary.

\\param rect an SDL_FRect structure representing the rectangle to intersect.
\\param X1 a pointer to the starting X-coordinate of the line.
\\param Y1 a pointer to the starting Y-coordinate of the line.
\\param X2 a pointer to the ending X-coordinate of the line.
\\param Y2 a pointer to the ending Y-coordinate of the line.
\\returns true if there is an intersection, false otherwise.

\\since This function is available since SDL 3.2.0.
")
(:STRUCT "SDL_Vertex" "Vertex structure.

\\since This struct is available since SDL 3.2.0.
")
(:ENUM "SDL_TextureAccess" "The access pattern allowed for a texture.

\\since This enum is available since SDL 3.2.0.
")
(:ENUM "SDL_RendererLogicalPresentation"
 "How the logical size is mapped to the output.

\\since This enum is available since SDL 3.2.0.
")
(:STRUCT "SDL_Renderer" "A structure representing rendering state

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_Texture"
 "An efficient driver-specific representation of pixel data

\\since This struct is available since SDL 3.2.0.

\\sa SDL_CreateTexture
\\sa SDL_CreateTextureFromSurface
\\sa SDL_CreateTextureWithProperties
\\sa SDL_DestroyTexture
")
(:FUNCTION "SDL_GetNumRenderDrivers"
 "Get the number of 2D rendering drivers available for the current display.

A render driver is a set of code that handles rendering and texture
management on a particular display. Normally there is only one, but some
drivers may have several available with different capabilities.

There may be none if SDL was compiled without render support.

\\returns the number of built in render drivers.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateRenderer
\\sa SDL_GetRenderDriver
")
(:FUNCTION "SDL_GetRenderDriver"
 "Use this function to get the name of a built in 2D rendering driver.

The list of rendering drivers is given in the order that they are normally
initialized by default; the drivers that seem more reasonable to choose
first (as far as the SDL developers believe) are earlier in the list.

The names of drivers are all simple, low-ASCII identifiers, like \"opengl\",
\"direct3d12\" or \"metal\". These never have Unicode characters, and are not
meant to be proper names.

\\param index the index of the rendering driver; the value ranges from 0 to
             SDL_GetNumRenderDrivers() - 1.
\\returns the name of the rendering driver at the requested index, or NULL
         if an invalid index was specified.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetNumRenderDrivers
")
(:FUNCTION "SDL_CreateWindowAndRenderer" "Create a window and default renderer.

\\param title the title of the window, in UTF-8 encoding.
\\param width the width of the window.
\\param height the height of the window.
\\param window_flags the flags used to create the window (see
                    SDL_CreateWindow()).
\\param window a pointer filled with the window, or NULL on error.
\\param renderer a pointer filled with the renderer, or NULL on error.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateRenderer
\\sa SDL_CreateWindow
")
(:FUNCTION "SDL_CreateRenderer" "Create a 2D rendering context for a window.

If you want a specific renderer, you can specify its name here. A list of
available renderers can be obtained by calling SDL_GetRenderDriver()
multiple times, with indices from 0 to SDL_GetNumRenderDrivers()-1. If you
don't need a specific renderer, specify NULL and SDL will attempt to choose
the best option for you, based on what is available on the user's system.

If `name` is a comma-separated list, SDL will try each name, in the order
listed, until one succeeds or all of them fail.

By default the rendering size matches the window size in pixels, but you
can call SDL_SetRenderLogicalPresentation() to change the content size and
scaling options.

\\param window the window where rendering is displayed.
\\param name the name of the rendering driver to initialize, or NULL to let
            SDL choose one.
\\returns a valid rendering context or NULL if there was an error; call
         SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateRendererWithProperties
\\sa SDL_CreateSoftwareRenderer
\\sa SDL_DestroyRenderer
\\sa SDL_GetNumRenderDrivers
\\sa SDL_GetRenderDriver
\\sa SDL_GetRendererName
")
(:FUNCTION "SDL_CreateRendererWithProperties"
 "Create a 2D rendering context for a window, with the specified properties.

These are the supported properties:

- `SDL_PROP_RENDERER_CREATE_NAME_STRING`: the name of the rendering driver
  to use, if a specific one is desired
- `SDL_PROP_RENDERER_CREATE_WINDOW_POINTER`: the window where rendering is
  displayed, required if this isn't a software renderer using a surface
- `SDL_PROP_RENDERER_CREATE_SURFACE_POINTER`: the surface where rendering
  is displayed, if you want a software renderer without a window
- `SDL_PROP_RENDERER_CREATE_OUTPUT_COLORSPACE_NUMBER`: an SDL_Colorspace
  value describing the colorspace for output to the display, defaults to
  SDL_COLORSPACE_SRGB. The direct3d11, direct3d12, and metal renderers
  support SDL_COLORSPACE_SRGB_LINEAR, which is a linear color space and
  supports HDR output. If you select SDL_COLORSPACE_SRGB_LINEAR, drawing
  still uses the sRGB colorspace, but values can go beyond 1.0 and float
  (linear) format textures can be used for HDR content.
- `SDL_PROP_RENDERER_CREATE_PRESENT_VSYNC_NUMBER`: non-zero if you want
  present synchronized with the refresh rate. This property can take any
  value that is supported by SDL_SetRenderVSync() for the renderer.

With the vulkan renderer:

- `SDL_PROP_RENDERER_CREATE_VULKAN_INSTANCE_POINTER`: the VkInstance to use
  with the renderer, optional.
- `SDL_PROP_RENDERER_CREATE_VULKAN_SURFACE_NUMBER`: the VkSurfaceKHR to use
  with the renderer, optional.
- `SDL_PROP_RENDERER_CREATE_VULKAN_PHYSICAL_DEVICE_POINTER`: the
  VkPhysicalDevice to use with the renderer, optional.
- `SDL_PROP_RENDERER_CREATE_VULKAN_DEVICE_POINTER`: the VkDevice to use
  with the renderer, optional.
- `SDL_PROP_RENDERER_CREATE_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER`: the
  queue family index used for rendering.
- `SDL_PROP_RENDERER_CREATE_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER`: the
  queue family index used for presentation.

\\param props the properties to use.
\\returns a valid rendering context or NULL if there was an error; call
         SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateProperties
\\sa SDL_CreateRenderer
\\sa SDL_CreateSoftwareRenderer
\\sa SDL_DestroyRenderer
\\sa SDL_GetRendererName
")
(:FUNCTION "SDL_CreateSoftwareRenderer"
 "Create a 2D software rendering context for a surface.

Two other API which can be used to create SDL_Renderer:
SDL_CreateRenderer() and SDL_CreateWindowAndRenderer(). These can _also_
create a software renderer, but they are intended to be used with an
SDL_Window as the final destination and not an SDL_Surface.

\\param surface the SDL_Surface structure representing the surface where
               rendering is done.
\\returns a valid rendering context or NULL if there was an error; call
         SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_DestroyRenderer
")
(:FUNCTION "SDL_GetRenderer" "Get the renderer associated with a window.

\\param window the window to query.
\\returns the rendering context on success or NULL on failure; call
         SDL_GetError() for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetRenderWindow" "Get the window associated with a renderer.

\\param renderer the renderer to query.
\\returns the window on success or NULL on failure; call SDL_GetError() for
         more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetRendererName" "Get the name of a renderer.

\\param renderer the rendering context.
\\returns the name of the selected renderer, or NULL on failure; call
         SDL_GetError() for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateRenderer
\\sa SDL_CreateRendererWithProperties
")
(:FUNCTION "SDL_GetRendererProperties"
 "Get the properties associated with a renderer.

The following read-only properties are provided by SDL:

- `SDL_PROP_RENDERER_NAME_STRING`: the name of the rendering driver
- `SDL_PROP_RENDERER_WINDOW_POINTER`: the window where rendering is
  displayed, if any
- `SDL_PROP_RENDERER_SURFACE_POINTER`: the surface where rendering is
  displayed, if this is a software renderer without a window
- `SDL_PROP_RENDERER_VSYNC_NUMBER`: the current vsync setting
- `SDL_PROP_RENDERER_MAX_TEXTURE_SIZE_NUMBER`: the maximum texture width
  and height
- `SDL_PROP_RENDERER_TEXTURE_FORMATS_POINTER`: a (const SDL_PixelFormat *)
  array of pixel formats, terminated with SDL_PIXELFORMAT_UNKNOWN,
  representing the available texture formats for this renderer.
- `SDL_PROP_RENDERER_OUTPUT_COLORSPACE_NUMBER`: an SDL_Colorspace value
  describing the colorspace for output to the display, defaults to
  SDL_COLORSPACE_SRGB.
- `SDL_PROP_RENDERER_HDR_ENABLED_BOOLEAN`: true if the output colorspace is
  SDL_COLORSPACE_SRGB_LINEAR and the renderer is showing on a display with
  HDR enabled. This property can change dynamically when
  SDL_EVENT_WINDOW_HDR_STATE_CHANGED is sent.
- `SDL_PROP_RENDERER_SDR_WHITE_POINT_FLOAT`: the value of SDR white in the
  SDL_COLORSPACE_SRGB_LINEAR colorspace. When HDR is enabled, this value is
  automatically multiplied into the color scale. This property can change
  dynamically when SDL_EVENT_WINDOW_HDR_STATE_CHANGED is sent.
- `SDL_PROP_RENDERER_HDR_HEADROOM_FLOAT`: the additional high dynamic range
  that can be displayed, in terms of the SDR white point. When HDR is not
  enabled, this will be 1.0. This property can change dynamically when
  SDL_EVENT_WINDOW_HDR_STATE_CHANGED is sent.

With the direct3d renderer:

- `SDL_PROP_RENDERER_D3D9_DEVICE_POINTER`: the IDirect3DDevice9 associated
  with the renderer

With the direct3d11 renderer:

- `SDL_PROP_RENDERER_D3D11_DEVICE_POINTER`: the ID3D11Device associated
  with the renderer
- `SDL_PROP_RENDERER_D3D11_SWAPCHAIN_POINTER`: the IDXGISwapChain1
  associated with the renderer. This may change when the window is resized.

With the direct3d12 renderer:

- `SDL_PROP_RENDERER_D3D12_DEVICE_POINTER`: the ID3D12Device associated
  with the renderer
- `SDL_PROP_RENDERER_D3D12_SWAPCHAIN_POINTER`: the IDXGISwapChain4
  associated with the renderer.
- `SDL_PROP_RENDERER_D3D12_COMMAND_QUEUE_POINTER`: the ID3D12CommandQueue
  associated with the renderer

With the vulkan renderer:

- `SDL_PROP_RENDERER_VULKAN_INSTANCE_POINTER`: the VkInstance associated
  with the renderer
- `SDL_PROP_RENDERER_VULKAN_SURFACE_NUMBER`: the VkSurfaceKHR associated
  with the renderer
- `SDL_PROP_RENDERER_VULKAN_PHYSICAL_DEVICE_POINTER`: the VkPhysicalDevice
  associated with the renderer
- `SDL_PROP_RENDERER_VULKAN_DEVICE_POINTER`: the VkDevice associated with
  the renderer
- `SDL_PROP_RENDERER_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER`: the queue
  family index used for rendering
- `SDL_PROP_RENDERER_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER`: the queue
  family index used for presentation
- `SDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER`: the number of
  swapchain images, or potential frames in flight, used by the Vulkan
  renderer

With the gpu renderer:

- `SDL_PROP_RENDERER_GPU_DEVICE_POINTER`: the SDL_GPUDevice associated with
  the renderer

\\param renderer the rendering context.
\\returns a valid property ID on success or 0 on failure; call
         SDL_GetError() for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetRenderOutputSize"
 "Get the output size in pixels of a rendering context.

This returns the true output size in pixels, ignoring any render targets or
logical size and presentation.

\\param renderer the rendering context.
\\param w a pointer filled in with the width in pixels.
\\param h a pointer filled in with the height in pixels.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetCurrentRenderOutputSize
")
(:FUNCTION "SDL_GetCurrentRenderOutputSize"
 "Get the current output size in pixels of a rendering context.

If a rendering target is active, this will return the size of the rendering
target in pixels, otherwise if a logical size is set, it will return the
logical size, otherwise it will return the value of
SDL_GetRenderOutputSize().

\\param renderer the rendering context.
\\param w a pointer filled in with the current width.
\\param h a pointer filled in with the current height.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetRenderOutputSize
")
(:FUNCTION "SDL_CreateTexture" "Create a texture for a rendering context.

The contents of a texture when first created are not defined.

\\param renderer the rendering context.
\\param format one of the enumerated values in SDL_PixelFormat.
\\param access one of the enumerated values in SDL_TextureAccess.
\\param w the width of the texture in pixels.
\\param h the height of the texture in pixels.
\\returns the created texture or NULL on failure; call SDL_GetError() for
         more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateTextureFromSurface
\\sa SDL_CreateTextureWithProperties
\\sa SDL_DestroyTexture
\\sa SDL_GetTextureSize
\\sa SDL_UpdateTexture
")
(:FUNCTION "SDL_CreateTextureFromSurface"
 "Create a texture from an existing surface.

The surface is not modified or freed by this function.

The SDL_TextureAccess hint for the created texture is
`SDL_TEXTUREACCESS_STATIC`.

The pixel format of the created texture may be different from the pixel
format of the surface, and can be queried using the
SDL_PROP_TEXTURE_FORMAT_NUMBER property.

\\param renderer the rendering context.
\\param surface the SDL_Surface structure containing pixel data used to fill
               the texture.
\\returns the created texture or NULL on failure; call SDL_GetError() for
         more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateTexture
\\sa SDL_CreateTextureWithProperties
\\sa SDL_DestroyTexture
")
(:FUNCTION "SDL_CreateTextureWithProperties"
 "Create a texture for a rendering context with the specified properties.

These are the supported properties:

- `SDL_PROP_TEXTURE_CREATE_COLORSPACE_NUMBER`: an SDL_Colorspace value
  describing the texture colorspace, defaults to SDL_COLORSPACE_SRGB_LINEAR
  for floating point textures, SDL_COLORSPACE_HDR10 for 10-bit textures,
  SDL_COLORSPACE_SRGB for other RGB textures and SDL_COLORSPACE_JPEG for
  YUV textures.
- `SDL_PROP_TEXTURE_CREATE_FORMAT_NUMBER`: one of the enumerated values in
  SDL_PixelFormat, defaults to the best RGBA format for the renderer
- `SDL_PROP_TEXTURE_CREATE_ACCESS_NUMBER`: one of the enumerated values in
  SDL_TextureAccess, defaults to SDL_TEXTUREACCESS_STATIC
- `SDL_PROP_TEXTURE_CREATE_WIDTH_NUMBER`: the width of the texture in
  pixels, required
- `SDL_PROP_TEXTURE_CREATE_HEIGHT_NUMBER`: the height of the texture in
  pixels, required
- `SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT`: for HDR10 and floating
  point textures, this defines the value of 100% diffuse white, with higher
  values being displayed in the High Dynamic Range headroom. This defaults
  to 100 for HDR10 textures and 1.0 for floating point textures.
- `SDL_PROP_TEXTURE_CREATE_HDR_HEADROOM_FLOAT`: for HDR10 and floating
  point textures, this defines the maximum dynamic range used by the
  content, in terms of the SDR white point. This would be equivalent to
  maxCLL / SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT for HDR10 content.
  If this is defined, any values outside the range supported by the display
  will be scaled into the available HDR headroom, otherwise they are
  clipped.

With the direct3d11 renderer:

- `SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_POINTER`: the ID3D11Texture2D
  associated with the texture, if you want to wrap an existing texture.
- `SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_U_POINTER`: the ID3D11Texture2D
  associated with the U plane of a YUV texture, if you want to wrap an
  existing texture.
- `SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_V_POINTER`: the ID3D11Texture2D
  associated with the V plane of a YUV texture, if you want to wrap an
  existing texture.

With the direct3d12 renderer:

- `SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_POINTER`: the ID3D12Resource
  associated with the texture, if you want to wrap an existing texture.
- `SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_U_POINTER`: the ID3D12Resource
  associated with the U plane of a YUV texture, if you want to wrap an
  existing texture.
- `SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_V_POINTER`: the ID3D12Resource
  associated with the V plane of a YUV texture, if you want to wrap an
  existing texture.

With the metal renderer:

- `SDL_PROP_TEXTURE_CREATE_METAL_PIXELBUFFER_POINTER`: the CVPixelBufferRef
  associated with the texture, if you want to create a texture from an
  existing pixel buffer.

With the opengl renderer:

- `SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_NUMBER`: the GLuint texture
  associated with the texture, if you want to wrap an existing texture.
- `SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_UV_NUMBER`: the GLuint texture
  associated with the UV plane of an NV12 texture, if you want to wrap an
  existing texture.
- `SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_U_NUMBER`: the GLuint texture
  associated with the U plane of a YUV texture, if you want to wrap an
  existing texture.
- `SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_V_NUMBER`: the GLuint texture
  associated with the V plane of a YUV texture, if you want to wrap an
  existing texture.

With the opengles2 renderer:

- `SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER`: the GLuint texture
  associated with the texture, if you want to wrap an existing texture.
- `SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER`: the GLuint texture
  associated with the texture, if you want to wrap an existing texture.
- `SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_UV_NUMBER`: the GLuint texture
  associated with the UV plane of an NV12 texture, if you want to wrap an
  existing texture.
- `SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_U_NUMBER`: the GLuint texture
  associated with the U plane of a YUV texture, if you want to wrap an
  existing texture.
- `SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_V_NUMBER`: the GLuint texture
  associated with the V plane of a YUV texture, if you want to wrap an
  existing texture.

With the vulkan renderer:

- `SDL_PROP_TEXTURE_CREATE_VULKAN_TEXTURE_NUMBER`: the VkImage with layout
  VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL associated with the texture, if
  you want to wrap an existing texture.

\\param renderer the rendering context.
\\param props the properties to use.
\\returns the created texture or NULL on failure; call SDL_GetError() for
         more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateProperties
\\sa SDL_CreateTexture
\\sa SDL_CreateTextureFromSurface
\\sa SDL_DestroyTexture
\\sa SDL_GetTextureSize
\\sa SDL_UpdateTexture
")
(:FUNCTION "SDL_GetTextureProperties"
 "Get the properties associated with a texture.

The following read-only properties are provided by SDL:

- `SDL_PROP_TEXTURE_COLORSPACE_NUMBER`: an SDL_Colorspace value describing
  the texture colorspace.
- `SDL_PROP_TEXTURE_FORMAT_NUMBER`: one of the enumerated values in
  SDL_PixelFormat.
- `SDL_PROP_TEXTURE_ACCESS_NUMBER`: one of the enumerated values in
  SDL_TextureAccess.
- `SDL_PROP_TEXTURE_WIDTH_NUMBER`: the width of the texture in pixels.
- `SDL_PROP_TEXTURE_HEIGHT_NUMBER`: the height of the texture in pixels.
- `SDL_PROP_TEXTURE_SDR_WHITE_POINT_FLOAT`: for HDR10 and floating point
  textures, this defines the value of 100% diffuse white, with higher
  values being displayed in the High Dynamic Range headroom. This defaults
  to 100 for HDR10 textures and 1.0 for other textures.
- `SDL_PROP_TEXTURE_HDR_HEADROOM_FLOAT`: for HDR10 and floating point
  textures, this defines the maximum dynamic range used by the content, in
  terms of the SDR white point. If this is defined, any values outside the
  range supported by the display will be scaled into the available HDR
  headroom, otherwise they are clipped. This defaults to 1.0 for SDR
  textures, 4.0 for HDR10 textures, and no default for floating point
  textures.

With the direct3d11 renderer:

- `SDL_PROP_TEXTURE_D3D11_TEXTURE_POINTER`: the ID3D11Texture2D associated
  with the texture
- `SDL_PROP_TEXTURE_D3D11_TEXTURE_U_POINTER`: the ID3D11Texture2D
  associated with the U plane of a YUV texture
- `SDL_PROP_TEXTURE_D3D11_TEXTURE_V_POINTER`: the ID3D11Texture2D
  associated with the V plane of a YUV texture

With the direct3d12 renderer:

- `SDL_PROP_TEXTURE_D3D12_TEXTURE_POINTER`: the ID3D12Resource associated
  with the texture
- `SDL_PROP_TEXTURE_D3D12_TEXTURE_U_POINTER`: the ID3D12Resource associated
  with the U plane of a YUV texture
- `SDL_PROP_TEXTURE_D3D12_TEXTURE_V_POINTER`: the ID3D12Resource associated
  with the V plane of a YUV texture

With the vulkan renderer:

- `SDL_PROP_TEXTURE_VULKAN_TEXTURE_NUMBER`: the VkImage associated with the
  texture

With the opengl renderer:

- `SDL_PROP_TEXTURE_OPENGL_TEXTURE_NUMBER`: the GLuint texture associated
  with the texture
- `SDL_PROP_TEXTURE_OPENGL_TEXTURE_UV_NUMBER`: the GLuint texture
  associated with the UV plane of an NV12 texture
- `SDL_PROP_TEXTURE_OPENGL_TEXTURE_U_NUMBER`: the GLuint texture associated
  with the U plane of a YUV texture
- `SDL_PROP_TEXTURE_OPENGL_TEXTURE_V_NUMBER`: the GLuint texture associated
  with the V plane of a YUV texture
- `SDL_PROP_TEXTURE_OPENGL_TEXTURE_TARGET_NUMBER`: the GLenum for the
  texture target (`GL_TEXTURE_2D`, `GL_TEXTURE_RECTANGLE_ARB`, etc)
- `SDL_PROP_TEXTURE_OPENGL_TEX_W_FLOAT`: the texture coordinate width of
  the texture (0.0 - 1.0)
- `SDL_PROP_TEXTURE_OPENGL_TEX_H_FLOAT`: the texture coordinate height of
  the texture (0.0 - 1.0)

With the opengles2 renderer:

- `SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_NUMBER`: the GLuint texture
  associated with the texture
- `SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_UV_NUMBER`: the GLuint texture
  associated with the UV plane of an NV12 texture
- `SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_U_NUMBER`: the GLuint texture
  associated with the U plane of a YUV texture
- `SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_V_NUMBER`: the GLuint texture
  associated with the V plane of a YUV texture
- `SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_TARGET_NUMBER`: the GLenum for the
  texture target (`GL_TEXTURE_2D`, `GL_TEXTURE_EXTERNAL_OES`, etc)

\\param texture the texture to query.
\\returns a valid property ID on success or 0 on failure; call
         SDL_GetError() for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetRendererFromTexture"
 "Get the renderer that created an SDL_Texture.

\\param texture the texture to query.
\\returns a pointer to the SDL_Renderer that created the texture, or NULL on
         failure; call SDL_GetError() for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetTextureSize"
 "Get the size of a texture, as floating point values.

\\param texture the texture to query.
\\param w a pointer filled in with the width of the texture in pixels. This
         argument can be NULL if you don't need this information.
\\param h a pointer filled in with the height of the texture in pixels. This
         argument can be NULL if you don't need this information.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SetTextureColorMod"
 "Set an additional color value multiplied into render copy operations.

When this texture is rendered, during the copy operation each source color
channel is modulated by the appropriate color value according to the
following formula:

`srcC = srcC * (color / 255)`

Color modulation is not always supported by the renderer; it will return
false if color modulation is not supported.

\\param texture the texture to update.
\\param r the red color value multiplied into copy operations.
\\param g the green color value multiplied into copy operations.
\\param b the blue color value multiplied into copy operations.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetTextureColorMod
\\sa SDL_SetTextureAlphaMod
\\sa SDL_SetTextureColorModFloat
")
(:FUNCTION "SDL_SetTextureColorModFloat"
 "Set an additional color value multiplied into render copy operations.

When this texture is rendered, during the copy operation each source color
channel is modulated by the appropriate color value according to the
following formula:

`srcC = srcC * color`

Color modulation is not always supported by the renderer; it will return
false if color modulation is not supported.

\\param texture the texture to update.
\\param r the red color value multiplied into copy operations.
\\param g the green color value multiplied into copy operations.
\\param b the blue color value multiplied into copy operations.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetTextureColorModFloat
\\sa SDL_SetTextureAlphaModFloat
\\sa SDL_SetTextureColorMod
")
(:FUNCTION "SDL_GetTextureColorMod"
 "Get the additional color value multiplied into render copy operations.

\\param texture the texture to query.
\\param r a pointer filled in with the current red color value.
\\param g a pointer filled in with the current green color value.
\\param b a pointer filled in with the current blue color value.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetTextureAlphaMod
\\sa SDL_GetTextureColorModFloat
\\sa SDL_SetTextureColorMod
")
(:FUNCTION "SDL_GetTextureColorModFloat"
 "Get the additional color value multiplied into render copy operations.

\\param texture the texture to query.
\\param r a pointer filled in with the current red color value.
\\param g a pointer filled in with the current green color value.
\\param b a pointer filled in with the current blue color value.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetTextureAlphaModFloat
\\sa SDL_GetTextureColorMod
\\sa SDL_SetTextureColorModFloat
")
(:FUNCTION "SDL_SetTextureAlphaMod"
 "Set an additional alpha value multiplied into render copy operations.

When this texture is rendered, during the copy operation the source alpha
value is modulated by this alpha value according to the following formula:

`srcA = srcA * (alpha / 255)`

Alpha modulation is not always supported by the renderer; it will return
false if alpha modulation is not supported.

\\param texture the texture to update.
\\param alpha the source alpha value multiplied into copy operations.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetTextureAlphaMod
\\sa SDL_SetTextureAlphaModFloat
\\sa SDL_SetTextureColorMod
")
(:FUNCTION "SDL_SetTextureAlphaModFloat"
 "Set an additional alpha value multiplied into render copy operations.

When this texture is rendered, during the copy operation the source alpha
value is modulated by this alpha value according to the following formula:

`srcA = srcA * alpha`

Alpha modulation is not always supported by the renderer; it will return
false if alpha modulation is not supported.

\\param texture the texture to update.
\\param alpha the source alpha value multiplied into copy operations.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetTextureAlphaModFloat
\\sa SDL_SetTextureAlphaMod
\\sa SDL_SetTextureColorModFloat
")
(:FUNCTION "SDL_GetTextureAlphaMod"
 "Get the additional alpha value multiplied into render copy operations.

\\param texture the texture to query.
\\param alpha a pointer filled in with the current alpha value.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetTextureAlphaModFloat
\\sa SDL_GetTextureColorMod
\\sa SDL_SetTextureAlphaMod
")
(:FUNCTION "SDL_GetTextureAlphaModFloat"
 "Get the additional alpha value multiplied into render copy operations.

\\param texture the texture to query.
\\param alpha a pointer filled in with the current alpha value.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetTextureAlphaMod
\\sa SDL_GetTextureColorModFloat
\\sa SDL_SetTextureAlphaModFloat
")
(:FUNCTION "SDL_SetTextureBlendMode"
 "Set the blend mode for a texture, used by SDL_RenderTexture().

If the blend mode is not supported, the closest supported mode is chosen
and this function returns false.

\\param texture the texture to update.
\\param blendMode the SDL_BlendMode to use for texture blending.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetTextureBlendMode
")
(:FUNCTION "SDL_GetTextureBlendMode"
 "Get the blend mode used for texture copy operations.

\\param texture the texture to query.
\\param blendMode a pointer filled in with the current SDL_BlendMode.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetTextureBlendMode
")
(:FUNCTION "SDL_SetTextureScaleMode"
 "Set the scale mode used for texture scale operations.

The default texture scale mode is SDL_SCALEMODE_LINEAR.

If the scale mode is not supported, the closest supported mode is chosen.

\\param texture the texture to update.
\\param scaleMode the SDL_ScaleMode to use for texture scaling.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetTextureScaleMode
")
(:FUNCTION "SDL_GetTextureScaleMode"
 "Get the scale mode used for texture scale operations.

\\param texture the texture to query.
\\param scaleMode a pointer filled in with the current scale mode.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetTextureScaleMode
")
(:FUNCTION "SDL_UpdateTexture"
 "Update the given texture rectangle with new pixel data.

The pixel data must be in the pixel format of the texture, which can be
queried using the SDL_PROP_TEXTURE_FORMAT_NUMBER property.

This is a fairly slow function, intended for use with static textures that
do not change often.

If the texture is intended to be updated often, it is preferred to create
the texture as streaming and use the locking functions referenced below.
While this function will work with streaming textures, for optimization
reasons you may not get the pixels back if you lock the texture afterward.

\\param texture the texture to update.
\\param rect an SDL_Rect structure representing the area to update, or NULL
            to update the entire texture.
\\param pixels the raw pixel data in the format of the texture.
\\param pitch the number of bytes in a row of pixel data, including padding
             between lines.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_LockTexture
\\sa SDL_UnlockTexture
\\sa SDL_UpdateNVTexture
\\sa SDL_UpdateYUVTexture
")
(:FUNCTION "SDL_UpdateYUVTexture"
 "Update a rectangle within a planar YV12 or IYUV texture with new pixel
data.

You can use SDL_UpdateTexture() as long as your pixel data is a contiguous
block of Y and U/V planes in the proper order, but this function is
available if your pixel data is not contiguous.

\\param texture the texture to update.
\\param rect a pointer to the rectangle of pixels to update, or NULL to
            update the entire texture.
\\param Yplane the raw pixel data for the Y plane.
\\param Ypitch the number of bytes between rows of pixel data for the Y
              plane.
\\param Uplane the raw pixel data for the U plane.
\\param Upitch the number of bytes between rows of pixel data for the U
              plane.
\\param Vplane the raw pixel data for the V plane.
\\param Vpitch the number of bytes between rows of pixel data for the V
              plane.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_UpdateNVTexture
\\sa SDL_UpdateTexture
")
(:FUNCTION "SDL_UpdateNVTexture"
 "Update a rectangle within a planar NV12 or NV21 texture with new pixels.

You can use SDL_UpdateTexture() as long as your pixel data is a contiguous
block of NV12/21 planes in the proper order, but this function is available
if your pixel data is not contiguous.

\\param texture the texture to update.
\\param rect a pointer to the rectangle of pixels to update, or NULL to
            update the entire texture.
\\param Yplane the raw pixel data for the Y plane.
\\param Ypitch the number of bytes between rows of pixel data for the Y
              plane.
\\param UVplane the raw pixel data for the UV plane.
\\param UVpitch the number of bytes between rows of pixel data for the UV
               plane.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_UpdateTexture
\\sa SDL_UpdateYUVTexture
")
(:FUNCTION "SDL_LockTexture"
 "Lock a portion of the texture for **write-only** pixel access.

As an optimization, the pixels made available for editing don't necessarily
contain the old texture data. This is a write-only operation, and if you
need to keep a copy of the texture data you should do that at the
application level.

You must use SDL_UnlockTexture() to unlock the pixels and apply any
changes.

\\param texture the texture to lock for access, which was created with
               `SDL_TEXTUREACCESS_STREAMING`.
\\param rect an SDL_Rect structure representing the area to lock for access;
            NULL to lock the entire texture.
\\param pixels this is filled in with a pointer to the locked pixels,
              appropriately offset by the locked area.
\\param pitch this is filled in with the pitch of the locked pixels; the
             pitch is the length of one row in bytes.
\\returns true on success or false if the texture is not valid or was not
         created with `SDL_TEXTUREACCESS_STREAMING`; call SDL_GetError()
         for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_LockTextureToSurface
\\sa SDL_UnlockTexture
")
(:FUNCTION "SDL_LockTextureToSurface"
 "Lock a portion of the texture for **write-only** pixel access, and expose
it as a SDL surface.

Besides providing an SDL_Surface instead of raw pixel data, this function
operates like SDL_LockTexture.

As an optimization, the pixels made available for editing don't necessarily
contain the old texture data. This is a write-only operation, and if you
need to keep a copy of the texture data you should do that at the
application level.

You must use SDL_UnlockTexture() to unlock the pixels and apply any
changes.

The returned surface is freed internally after calling SDL_UnlockTexture()
or SDL_DestroyTexture(). The caller should not free it.

\\param texture the texture to lock for access, which must be created with
               `SDL_TEXTUREACCESS_STREAMING`.
\\param rect a pointer to the rectangle to lock for access. If the rect is
            NULL, the entire texture will be locked.
\\param surface a pointer to an SDL surface of size **rect**. Don't assume
               any specific pixel content.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_LockTexture
\\sa SDL_UnlockTexture
")
(:FUNCTION "SDL_UnlockTexture"
 "Unlock a texture, uploading the changes to video memory, if needed.

**Warning**: Please note that SDL_LockTexture() is intended to be
write-only; it will not guarantee the previous contents of the texture will
be provided. You must fully initialize any area of a texture that you lock
before unlocking it, as the pixels might otherwise be uninitialized memory.

Which is to say: locking and immediately unlocking a texture can result in
corrupted textures, depending on the renderer in use.

\\param texture a texture locked by SDL_LockTexture().

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_LockTexture
")
(:FUNCTION "SDL_SetRenderTarget" "Set a texture as the current rendering target.

The default render target is the window for which the renderer was created.
To stop rendering to a texture and render to the window again, call this
function with a NULL `texture`.

\\param renderer the rendering context.
\\param texture the targeted texture, which must be created with the
               `SDL_TEXTUREACCESS_TARGET` flag, or NULL to render to the
               window instead of a texture.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetRenderTarget
")
(:FUNCTION "SDL_GetRenderTarget" "Get the current render target.

The default render target is the window for which the renderer was created,
and is reported a NULL here.

\\param renderer the rendering context.
\\returns the current render target or NULL for the default render target.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetRenderTarget
")
(:FUNCTION "SDL_SetRenderLogicalPresentation"
 "Set a device independent resolution and presentation mode for rendering.

This function sets the width and height of the logical rendering output.
The renderer will act as if the window is always the requested dimensions,
scaling to the actual window resolution as necessary.

This can be useful for games that expect a fixed size, but would like to
scale the output to whatever is available, regardless of how a user resizes
a window, or if the display is high DPI.

You can disable logical coordinates by setting the mode to
SDL_LOGICAL_PRESENTATION_DISABLED, and in that case you get the full pixel
resolution of the output window; it is safe to toggle logical presentation
during the rendering of a frame: perhaps most of the rendering is done to
specific dimensions but to make fonts look sharp, the app turns off logical
presentation while drawing text.

Letterboxing will only happen if logical presentation is enabled during
SDL_RenderPresent; be sure to reenable it first if you were using it.

You can convert coordinates in an event into rendering coordinates using
SDL_ConvertEventToRenderCoordinates().

\\param renderer the rendering context.
\\param w the width of the logical resolution.
\\param h the height of the logical resolution.
\\param mode the presentation mode used.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ConvertEventToRenderCoordinates
\\sa SDL_GetRenderLogicalPresentation
\\sa SDL_GetRenderLogicalPresentationRect
")
(:FUNCTION "SDL_GetRenderLogicalPresentation"
 "Get device independent resolution and presentation mode for rendering.

This function gets the width and height of the logical rendering output, or
the output size in pixels if a logical resolution is not enabled.

\\param renderer the rendering context.
\\param w an int to be filled with the width.
\\param h an int to be filled with the height.
\\param mode the presentation mode used.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetRenderLogicalPresentation
")
(:FUNCTION "SDL_GetRenderLogicalPresentationRect"
 "Get the final presentation rectangle for rendering.

This function returns the calculated rectangle used for logical
presentation, based on the presentation mode and output size. If logical
presentation is disabled, it will fill the rectangle with the output size,
in pixels.

\\param renderer the rendering context.
\\param rect a pointer filled in with the final presentation rectangle, may
            be NULL.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetRenderLogicalPresentation
")
(:FUNCTION "SDL_RenderCoordinatesFromWindow"
 "Get a point in render coordinates when given a point in window coordinates.

This takes into account several states:

- The window dimensions.
- The logical presentation settings (SDL_SetRenderLogicalPresentation)
- The scale (SDL_SetRenderScale)
- The viewport (SDL_SetRenderViewport)

\\param renderer the rendering context.
\\param window_x the x coordinate in window coordinates.
\\param window_y the y coordinate in window coordinates.
\\param x a pointer filled with the x coordinate in render coordinates.
\\param y a pointer filled with the y coordinate in render coordinates.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetRenderLogicalPresentation
\\sa SDL_SetRenderScale
")
(:FUNCTION "SDL_RenderCoordinatesToWindow"
 "Get a point in window coordinates when given a point in render coordinates.

This takes into account several states:

- The window dimensions.
- The logical presentation settings (SDL_SetRenderLogicalPresentation)
- The scale (SDL_SetRenderScale)
- The viewport (SDL_SetRenderViewport)

\\param renderer the rendering context.
\\param x the x coordinate in render coordinates.
\\param y the y coordinate in render coordinates.
\\param window_x a pointer filled with the x coordinate in window
                coordinates.
\\param window_y a pointer filled with the y coordinate in window
                coordinates.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetRenderLogicalPresentation
\\sa SDL_SetRenderScale
\\sa SDL_SetRenderViewport
")
(:FUNCTION "SDL_ConvertEventToRenderCoordinates"
 "Convert the coordinates in an event to render coordinates.

This takes into account several states:

- The window dimensions.
- The logical presentation settings (SDL_SetRenderLogicalPresentation)
- The scale (SDL_SetRenderScale)
- The viewport (SDL_SetRenderViewport)

Various event types are converted with this function: mouse, touch, pen,
etc.

Touch coordinates are converted from normalized coordinates in the window
to non-normalized rendering coordinates.

Relative mouse coordinates (xrel and yrel event fields) are _also_
converted. Applications that do not want these fields converted should use
SDL_RenderCoordinatesFromWindow() on the specific event fields instead of
converting the entire event structure.

Once converted, coordinates may be outside the rendering area.

\\param renderer the rendering context.
\\param event the event to modify.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RenderCoordinatesFromWindow
")
(:FUNCTION "SDL_SetRenderViewport"
 "Set the drawing area for rendering on the current target.

Drawing will clip to this area (separately from any clipping done with
SDL_SetRenderClipRect), and the top left of the area will become coordinate
(0, 0) for future drawing commands.

The area's width and height must be >= 0.

\\param renderer the rendering context.
\\param rect the SDL_Rect structure representing the drawing area, or NULL
            to set the viewport to the entire target.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetRenderViewport
\\sa SDL_RenderViewportSet
")
(:FUNCTION "SDL_GetRenderViewport" "Get the drawing area for the current target.

\\param renderer the rendering context.
\\param rect an SDL_Rect structure filled in with the current drawing area.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RenderViewportSet
\\sa SDL_SetRenderViewport
")
(:FUNCTION "SDL_RenderViewportSet"
 "Return whether an explicit rectangle was set as the viewport.

This is useful if you're saving and restoring the viewport and want to know
whether you should restore a specific rectangle or NULL. Note that the
viewport is always reset when changing rendering targets.

\\param renderer the rendering context.
\\returns true if the viewport was set to a specific rectangle, or false if
         it was set to NULL (the entire target).

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetRenderViewport
\\sa SDL_SetRenderViewport
")
(:FUNCTION "SDL_GetRenderSafeArea"
 "Get the safe area for rendering within the current viewport.

Some devices have portions of the screen which are partially obscured or
not interactive, possibly due to on-screen controls, curved edges, camera
notches, TV overscan, etc. This function provides the area of the current
viewport which is safe to have interactible content. You should continue
rendering into the rest of the render target, but it should not contain
visually important or interactible content.

\\param renderer the rendering context.
\\param rect a pointer filled in with the area that is safe for interactive
            content.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SetRenderClipRect"
 "Set the clip rectangle for rendering on the specified target.

\\param renderer the rendering context.
\\param rect an SDL_Rect structure representing the clip area, relative to
            the viewport, or NULL to disable clipping.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetRenderClipRect
\\sa SDL_RenderClipEnabled
")
(:FUNCTION "SDL_GetRenderClipRect"
 "Get the clip rectangle for the current target.

\\param renderer the rendering context.
\\param rect an SDL_Rect structure filled in with the current clipping area
            or an empty rectangle if clipping is disabled.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RenderClipEnabled
\\sa SDL_SetRenderClipRect
")
(:FUNCTION "SDL_RenderClipEnabled"
 "Get whether clipping is enabled on the given renderer.

\\param renderer the rendering context.
\\returns true if clipping is enabled or false if not; call SDL_GetError()
         for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetRenderClipRect
\\sa SDL_SetRenderClipRect
")
(:FUNCTION "SDL_SetRenderScale"
 "Set the drawing scale for rendering on the current target.

The drawing coordinates are scaled by the x/y scaling factors before they
are used by the renderer. This allows resolution independent drawing with a
single coordinate system.

If this results in scaling or subpixel drawing by the rendering backend, it
will be handled using the appropriate quality hints. For best results use
integer scaling factors.

\\param renderer the rendering context.
\\param scaleX the horizontal scaling factor.
\\param scaleY the vertical scaling factor.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetRenderScale
")
(:FUNCTION "SDL_GetRenderScale" "Get the drawing scale for the current target.

\\param renderer the rendering context.
\\param scaleX a pointer filled in with the horizontal scaling factor.
\\param scaleY a pointer filled in with the vertical scaling factor.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetRenderScale
")
(:FUNCTION "SDL_SetRenderDrawColor" "Set the color used for drawing operations.

Set the color for drawing or filling rectangles, lines, and points, and for
SDL_RenderClear().

\\param renderer the rendering context.
\\param r the red value used to draw on the rendering target.
\\param g the green value used to draw on the rendering target.
\\param b the blue value used to draw on the rendering target.
\\param a the alpha value used to draw on the rendering target; usually
         `SDL_ALPHA_OPAQUE` (255). Use SDL_SetRenderDrawBlendMode to
         specify how the alpha channel is used.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetRenderDrawColor
\\sa SDL_SetRenderDrawColorFloat
")
(:FUNCTION "SDL_SetRenderDrawColorFloat"
 "Set the color used for drawing operations (Rect, Line and Clear).

Set the color for drawing or filling rectangles, lines, and points, and for
SDL_RenderClear().

\\param renderer the rendering context.
\\param r the red value used to draw on the rendering target.
\\param g the green value used to draw on the rendering target.
\\param b the blue value used to draw on the rendering target.
\\param a the alpha value used to draw on the rendering target. Use
         SDL_SetRenderDrawBlendMode to specify how the alpha channel is
         used.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetRenderDrawColorFloat
\\sa SDL_SetRenderDrawColor
")
(:FUNCTION "SDL_GetRenderDrawColor"
 "Get the color used for drawing operations (Rect, Line and Clear).

\\param renderer the rendering context.
\\param r a pointer filled in with the red value used to draw on the
         rendering target.
\\param g a pointer filled in with the green value used to draw on the
         rendering target.
\\param b a pointer filled in with the blue value used to draw on the
         rendering target.
\\param a a pointer filled in with the alpha value used to draw on the
         rendering target; usually `SDL_ALPHA_OPAQUE` (255).
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetRenderDrawColorFloat
\\sa SDL_SetRenderDrawColor
")
(:FUNCTION "SDL_GetRenderDrawColorFloat"
 "Get the color used for drawing operations (Rect, Line and Clear).

\\param renderer the rendering context.
\\param r a pointer filled in with the red value used to draw on the
         rendering target.
\\param g a pointer filled in with the green value used to draw on the
         rendering target.
\\param b a pointer filled in with the blue value used to draw on the
         rendering target.
\\param a a pointer filled in with the alpha value used to draw on the
         rendering target.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetRenderDrawColorFloat
\\sa SDL_GetRenderDrawColor
")
(:FUNCTION "SDL_SetRenderColorScale"
 "Set the color scale used for render operations.

The color scale is an additional scale multiplied into the pixel color
value while rendering. This can be used to adjust the brightness of colors
during HDR rendering, or changing HDR video brightness when playing on an
SDR display.

The color scale does not affect the alpha channel, only the color
brightness.

\\param renderer the rendering context.
\\param scale the color scale value.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetRenderColorScale
")
(:FUNCTION "SDL_GetRenderColorScale"
 "Get the color scale used for render operations.

\\param renderer the rendering context.
\\param scale a pointer filled in with the current color scale value.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetRenderColorScale
")
(:FUNCTION "SDL_SetRenderDrawBlendMode"
 "Set the blend mode used for drawing operations (Fill and Line).

If the blend mode is not supported, the closest supported mode is chosen.

\\param renderer the rendering context.
\\param blendMode the SDL_BlendMode to use for blending.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetRenderDrawBlendMode
")
(:FUNCTION "SDL_GetRenderDrawBlendMode"
 "Get the blend mode used for drawing operations.

\\param renderer the rendering context.
\\param blendMode a pointer filled in with the current SDL_BlendMode.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetRenderDrawBlendMode
")
(:FUNCTION "SDL_RenderClear"
 "Clear the current rendering target with the drawing color.

This function clears the entire rendering target, ignoring the viewport and
the clip rectangle. Note, that clearing will also set/fill all pixels of
the rendering target to current renderer draw color, so make sure to invoke
SDL_SetRenderDrawColor() when needed.

\\param renderer the rendering context.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetRenderDrawColor
")
(:FUNCTION "SDL_RenderPoint"
 "Draw a point on the current rendering target at subpixel precision.

\\param renderer the renderer which should draw a point.
\\param x the x coordinate of the point.
\\param y the y coordinate of the point.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RenderPoints
")
(:FUNCTION "SDL_RenderPoints"
 "Draw multiple points on the current rendering target at subpixel precision.

\\param renderer the renderer which should draw multiple points.
\\param points the points to draw.
\\param count the number of points to draw.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RenderPoint
")
(:FUNCTION "SDL_RenderLine"
 "Draw a line on the current rendering target at subpixel precision.

\\param renderer the renderer which should draw a line.
\\param x1 the x coordinate of the start point.
\\param y1 the y coordinate of the start point.
\\param x2 the x coordinate of the end point.
\\param y2 the y coordinate of the end point.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RenderLines
")
(:FUNCTION "SDL_RenderLines"
 "Draw a series of connected lines on the current rendering target at
subpixel precision.

\\param renderer the renderer which should draw multiple lines.
\\param points the points along the lines.
\\param count the number of points, drawing count-1 lines.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RenderLine
")
(:FUNCTION "SDL_RenderRect"
 "Draw a rectangle on the current rendering target at subpixel precision.

\\param renderer the renderer which should draw a rectangle.
\\param rect a pointer to the destination rectangle, or NULL to outline the
            entire rendering target.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RenderRects
")
(:FUNCTION "SDL_RenderRects"
 "Draw some number of rectangles on the current rendering target at subpixel
precision.

\\param renderer the renderer which should draw multiple rectangles.
\\param rects a pointer to an array of destination rectangles.
\\param count the number of rectangles.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RenderRect
")
(:FUNCTION "SDL_RenderFillRect"
 "Fill a rectangle on the current rendering target with the drawing color at
subpixel precision.

\\param renderer the renderer which should fill a rectangle.
\\param rect a pointer to the destination rectangle, or NULL for the entire
            rendering target.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RenderFillRects
")
(:FUNCTION "SDL_RenderFillRects"
 "Fill some number of rectangles on the current rendering target with the
drawing color at subpixel precision.

\\param renderer the renderer which should fill multiple rectangles.
\\param rects a pointer to an array of destination rectangles.
\\param count the number of rectangles.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RenderFillRect
")
(:FUNCTION "SDL_RenderTexture"
 "Copy a portion of the texture to the current rendering target at subpixel
precision.

\\param renderer the renderer which should copy parts of a texture.
\\param texture the source texture.
\\param srcrect a pointer to the source rectangle, or NULL for the entire
               texture.
\\param dstrect a pointer to the destination rectangle, or NULL for the
               entire rendering target.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RenderTextureRotated
\\sa SDL_RenderTextureTiled
")
(:FUNCTION "SDL_RenderTextureRotated"
 "Copy a portion of the source texture to the current rendering target, with
rotation and flipping, at subpixel precision.

\\param renderer the renderer which should copy parts of a texture.
\\param texture the source texture.
\\param srcrect a pointer to the source rectangle, or NULL for the entire
               texture.
\\param dstrect a pointer to the destination rectangle, or NULL for the
               entire rendering target.
\\param angle an angle in degrees that indicates the rotation that will be
             applied to dstrect, rotating it in a clockwise direction.
\\param center a pointer to a point indicating the point around which
              dstrect will be rotated (if NULL, rotation will be done
              around dstrect.w/2, dstrect.h/2).
\\param flip an SDL_FlipMode value stating which flipping actions should be
            performed on the texture.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RenderTexture
")
(:FUNCTION "SDL_RenderTextureAffine"
 "Copy a portion of the source texture to the current rendering target, with
affine transform, at subpixel precision.

\\param renderer the renderer which should copy parts of a texture.
\\param texture the source texture.
\\param srcrect a pointer to the source rectangle, or NULL for the entire
               texture.
\\param origin a pointer to a point indicating where the top-left corner of
              srcrect should be mapped to, or NULL for the rendering
              target's origin.
\\param right a pointer to a point indicating where the top-right corner of
             srcrect should be mapped to, or NULL for the rendering
             target's top-right corner.
\\param down a pointer to a point indicating where the bottom-left corner of
            srcrect should be mapped to, or NULL for the rendering target's
            bottom-left corner.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety You may only call this function from the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RenderTexture
")
(:FUNCTION "SDL_RenderTextureTiled"
 "Tile a portion of the texture to the current rendering target at subpixel
precision.

The pixels in `srcrect` will be repeated as many times as needed to
completely fill `dstrect`.

\\param renderer the renderer which should copy parts of a texture.
\\param texture the source texture.
\\param srcrect a pointer to the source rectangle, or NULL for the entire
               texture.
\\param scale the scale used to transform srcrect into the destination
             rectangle, e.g. a 32x32 texture with a scale of 2 would fill
             64x64 tiles.
\\param dstrect a pointer to the destination rectangle, or NULL for the
               entire rendering target.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RenderTexture
")
(:FUNCTION "SDL_RenderTexture9Grid"
 "Perform a scaled copy using the 9-grid algorithm to the current rendering
target at subpixel precision.

The pixels in the texture are split into a 3x3 grid, using the different
corner sizes for each corner, and the sides and center making up the
remaining pixels. The corners are then scaled using `scale` and fit into
the corners of the destination rectangle. The sides and center are then
stretched into place to cover the remaining destination rectangle.

\\param renderer the renderer which should copy parts of a texture.
\\param texture the source texture.
\\param srcrect the SDL_Rect structure representing the rectangle to be used
               for the 9-grid, or NULL to use the entire texture.
\\param left_width the width, in pixels, of the left corners in `srcrect`.
\\param right_width the width, in pixels, of the right corners in `srcrect`.
\\param top_height the height, in pixels, of the top corners in `srcrect`.
\\param bottom_height the height, in pixels, of the bottom corners in
                     `srcrect`.
\\param scale the scale used to transform the corner of `srcrect` into the
             corner of `dstrect`, or 0.0f for an unscaled copy.
\\param dstrect a pointer to the destination rectangle, or NULL for the
               entire rendering target.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RenderTexture
")
(:FUNCTION "SDL_RenderGeometry"
 "Render a list of triangles, optionally using a texture and indices into the
vertex array Color and alpha modulation is done per vertex
(SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).

\\param renderer the rendering context.
\\param texture (optional) The SDL texture to use.
\\param vertices vertices.
\\param num_vertices number of vertices.
\\param indices (optional) An array of integer indices into the 'vertices'
               array, if NULL all vertices will be rendered in sequential
               order.
\\param num_indices number of indices.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RenderGeometryRaw
")
(:FUNCTION "SDL_RenderGeometryRaw"
 "Render a list of triangles, optionally using a texture and indices into the
vertex arrays Color and alpha modulation is done per vertex
(SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).

\\param renderer the rendering context.
\\param texture (optional) The SDL texture to use.
\\param xy vertex positions.
\\param xy_stride byte size to move from one element to the next element.
\\param color vertex colors (as SDL_FColor).
\\param color_stride byte size to move from one element to the next element.
\\param uv vertex normalized texture coordinates.
\\param uv_stride byte size to move from one element to the next element.
\\param num_vertices number of vertices.
\\param indices (optional) An array of indices into the 'vertices' arrays,
               if NULL all vertices will be rendered in sequential order.
\\param num_indices number of indices.
\\param size_indices index size: 1 (byte), 2 (short), 4 (int).
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RenderGeometry
")
(:FUNCTION "SDL_RenderReadPixels"
 "Read pixels from the current rendering target.

The returned surface should be freed with SDL_DestroySurface()

**WARNING**: This is a very slow operation, and should not be used
frequently. If you're using this on the main rendering target, it should be
called after rendering and before SDL_RenderPresent().

\\param renderer the rendering context.
\\param rect an SDL_Rect structure representing the area in pixels relative
            to the to current viewport, or NULL for the entire viewport.
\\returns a new SDL_Surface on success or NULL on failure; call
         SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_RenderPresent"
 "Update the screen with any rendering performed since the previous call.

SDL's rendering functions operate on a backbuffer; that is, calling a
rendering function such as SDL_RenderLine() does not directly put a line on
the screen, but rather updates the backbuffer. As such, you compose your
entire scene and *present* the composed backbuffer to the screen as a
complete picture.

Therefore, when using SDL's rendering API, one does all drawing intended
for the frame, and then calls this function once per frame to present the
final drawing to the user.

The backbuffer should be considered invalidated after each present; do not
assume that previous contents will exist between frames. You are strongly
encouraged to call SDL_RenderClear() to initialize the backbuffer before
starting each new frame's drawing, even if you plan to overwrite every
pixel.

Please note, that in case of rendering to a texture - there is **no need**
to call `SDL_RenderPresent` after drawing needed objects to a texture, and
should not be done; you are only required to change back the rendering
target to default via `SDL_SetRenderTarget(renderer, NULL)` afterwards, as
textures by themselves do not have a concept of backbuffers. Calling
SDL_RenderPresent while rendering to a texture will still update the screen
with any current drawing that has been done _to the window itself_.

\\param renderer the rendering context.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateRenderer
\\sa SDL_RenderClear
\\sa SDL_RenderFillRect
\\sa SDL_RenderFillRects
\\sa SDL_RenderLine
\\sa SDL_RenderLines
\\sa SDL_RenderPoint
\\sa SDL_RenderPoints
\\sa SDL_RenderRect
\\sa SDL_RenderRects
\\sa SDL_SetRenderDrawBlendMode
\\sa SDL_SetRenderDrawColor
")
(:FUNCTION "SDL_DestroyTexture" "Destroy the specified texture.

Passing NULL or an otherwise invalid texture will set the SDL error message
to \"Invalid texture\".

\\param texture the texture to destroy.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateTexture
\\sa SDL_CreateTextureFromSurface
")
(:FUNCTION "SDL_DestroyRenderer"
 "Destroy the rendering context for a window and free all associated
textures.

This should be called before destroying the associated window.

\\param renderer the rendering context.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateRenderer
")
(:FUNCTION "SDL_FlushRenderer"
 "Force the rendering context to flush any pending commands and state.

You do not need to (and in fact, shouldn't) call this function unless you
are planning to call into OpenGL/Direct3D/Metal/whatever directly, in
addition to using an SDL_Renderer.

This is for a very-specific case: if you are using SDL's render API, and
you plan to make OpenGL/D3D/whatever calls in addition to SDL render API
calls. If this applies, you should call this function between calls to
SDL's render API and the low-level API you're using in cooperation.

In all other cases, you can ignore this function.

This call makes SDL flush any pending rendering work it was queueing up to
do later in a single batch, and marks any internal cached state as invalid,
so it'll prepare all its state again later, from scratch.

This means you do not need to save state in your rendering code to protect
the SDL renderer. However, there lots of arbitrary pieces of Direct3D and
OpenGL state that can confuse things; you should use your best judgment and
be prepared to make changes if specific state needs to be protected.

\\param renderer the rendering context.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetRenderMetalLayer"
 "Get the CAMetalLayer associated with the given Metal renderer.

This function returns `void *`, so SDL doesn't have to include Metal's
headers, but it can be safely cast to a `CAMetalLayer *`.

\\param renderer the renderer to query.
\\returns a `CAMetalLayer *` on success, or NULL if the renderer isn't a
         Metal renderer.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetRenderMetalCommandEncoder
")
(:FUNCTION "SDL_GetRenderMetalCommandEncoder"
 "Get the Metal command encoder for the current frame.

This function returns `void *`, so SDL doesn't have to include Metal's
headers, but it can be safely cast to an `id<MTLRenderCommandEncoder>`.

This will return NULL if Metal refuses to give SDL a drawable to render to,
which might happen if the window is hidden/minimized/offscreen. This
doesn't apply to command encoders for render targets, just the window's
backbuffer. Check your return values!

\\param renderer the renderer to query.
\\returns an `id<MTLRenderCommandEncoder>` on success, or NULL if the
         renderer isn't a Metal renderer or there was an error.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetRenderMetalLayer
")
(:FUNCTION "SDL_AddVulkanRenderSemaphores"
 "Add a set of synchronization semaphores for the current frame.

The Vulkan renderer will wait for `wait_semaphore` before submitting
rendering commands and signal `signal_semaphore` after rendering commands
are complete for this frame.

This should be called each frame that you want semaphore synchronization.
The Vulkan renderer may have multiple frames in flight on the GPU, so you
should have multiple semaphores that are used for synchronization. Querying
SDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER will give you the
maximum number of semaphores you'll need.

\\param renderer the rendering context.
\\param wait_stage_mask the VkPipelineStageFlags for the wait.
\\param wait_semaphore a VkSempahore to wait on before rendering the current
                      frame, or 0 if not needed.
\\param signal_semaphore a VkSempahore that SDL will signal when rendering
                        for the current frame is complete, or 0 if not
                        needed.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is **NOT** safe to call this function from two threads at
              once.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SetRenderVSync" "Toggle VSync of the given renderer.

When a renderer is created, vsync defaults to SDL_RENDERER_VSYNC_DISABLED.

The `vsync` parameter can be 1 to synchronize present with every vertical
refresh, 2 to synchronize present with every second vertical refresh, etc.,
SDL_RENDERER_VSYNC_ADAPTIVE for late swap tearing (adaptive vsync), or
SDL_RENDERER_VSYNC_DISABLED to disable. Not every value is supported by
every driver, so you should check the return value to see whether the
requested setting is supported.

\\param renderer the renderer to toggle.
\\param vsync the vertical refresh sync interval.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetRenderVSync
")
(:FUNCTION "SDL_GetRenderVSync" "Get VSync of the given renderer.

\\param renderer the renderer to toggle.
\\param vsync an int filled with the current vertical refresh sync interval.
             See SDL_SetRenderVSync() for the meaning of the value.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetRenderVSync
")
(:FUNCTION "SDL_RenderDebugText" "Draw debug text to an SDL_Renderer.

This function will render a string of text to an SDL_Renderer. Note that
this is a convenience function for debugging, with severe limitations, and
not intended to be used for production apps and games.

Among these limitations:

- It accepts UTF-8 strings, but will only renders ASCII characters.
- It has a single, tiny size (8x8 pixels). One can use logical presentation
  or scaling to adjust it, but it will be blurry.
- It uses a simple, hardcoded bitmap font. It does not allow different font
  selections and it does not support truetype, for proper scaling.
- It does no word-wrapping and does not treat newline characters as a line
  break. If the text goes out of the window, it's gone.

For serious text rendering, there are several good options, such as
SDL_ttf, stb_truetype, or other external libraries.

On first use, this will create an internal texture for rendering glyphs.
This texture will live until the renderer is destroyed.

The text is drawn in the color specified by SDL_SetRenderDrawColor().

\\param renderer the renderer which should draw a line of text.
\\param x the x coordinate where the top-left corner of the text will draw.
\\param y the y coordinate where the top-left corner of the text will draw.
\\param str the string to render.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RenderDebugTextFormat
\\sa SDL_DEBUG_TEXT_FONT_CHARACTER_SIZE
")
(:FUNCTION "SDL_RenderDebugTextFormat" "Draw debug text to an SDL_Renderer.

This function will render a printf()-style format string to a renderer.
Note that this is a convinence function for debugging, with severe
limitations, and is not intended to be used for production apps and games.

For the full list of limitations and other useful information, see
SDL_RenderDebugText.

\\param renderer the renderer which should draw the text.
\\param x the x coordinate where the top-left corner of the text will draw.
\\param y the y coordinate where the top-left corner of the text will draw.
\\param fmt the format string to draw.
\\param ... additional parameters matching % tokens in the `fmt` string, if
           any.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RenderDebugText
\\sa SDL_DEBUG_TEXT_FONT_CHARACTER_SIZE
")
(:ENUM "SDL_Scancode" "The SDL keyboard scancode representation.

An SDL scancode is the physical representation of a key on the keyboard,
independent of language and keyboard mapping.

Values of this type are used to represent keyboard keys, among other places
in the `scancode` field of the SDL_KeyboardEvent structure.

The values in this enumeration are based on the USB usage page standard:
https://usb.org/sites/default/files/hut1_5.pdf

\\since This enum is available since SDL 3.2.0.
")
(:STRUCT "SDL_Sensor"
 "The opaque structure used to identify an opened SDL sensor.

\\since This struct is available since SDL 3.2.0.
")
(:BITFIELD "SDL_SensorID"
 "This is a unique ID for a sensor for the time it is connected to the
system, and is never reused for the lifetime of the application.

The value 0 is an invalid ID.

\\since This datatype is available since SDL 3.2.0.
")
(:ENUM "SDL_SensorType" "The different sensors defined by SDL.

Additional sensors may be available, using platform dependent semantics.

Here are the additional Android sensors:

https://developer.android.com/reference/android/hardware/SensorEvent.html#values

Accelerometer sensor notes:

The accelerometer returns the current acceleration in SI meters per second
squared. This measurement includes the force of gravity, so a device at
rest will have an value of SDL_STANDARD_GRAVITY away from the center of the
earth, which is a positive Y value.

- `values[0]`: Acceleration on the x axis
- `values[1]`: Acceleration on the y axis
- `values[2]`: Acceleration on the z axis

For phones and tablets held in natural orientation and game controllers
held in front of you, the axes are defined as follows:

- -X ... +X : left ... right
- -Y ... +Y : bottom ... top
- -Z ... +Z : farther ... closer

The accelerometer axis data is not changed when the device is rotated.

Gyroscope sensor notes:

The gyroscope returns the current rate of rotation in radians per second.
The rotation is positive in the counter-clockwise direction. That is, an
observer looking from a positive location on one of the axes would see
positive rotation on that axis when it appeared to be rotating
counter-clockwise.

- `values[0]`: Angular speed around the x axis (pitch)
- `values[1]`: Angular speed around the y axis (yaw)
- `values[2]`: Angular speed around the z axis (roll)

For phones and tablets held in natural orientation and game controllers
held in front of you, the axes are defined as follows:

- -X ... +X : left ... right
- -Y ... +Y : bottom ... top
- -Z ... +Z : farther ... closer

The gyroscope axis data is not changed when the device is rotated.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_GetCurrentDisplayOrientation
")
(:FUNCTION "SDL_GetSensors" "Get a list of currently connected sensors.

\\param count a pointer filled in with the number of sensors returned, may
             be NULL.
\\returns a 0 terminated array of sensor instance IDs or NULL on failure;
         call SDL_GetError() for more information. This should be freed
         with SDL_free() when it is no longer needed.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetSensorNameForID"
 "Get the implementation dependent name of a sensor.

This can be called before any sensors are opened.

\\param instance_id the sensor instance ID.
\\returns the sensor name, or NULL if `instance_id` is not valid.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetSensorTypeForID" "Get the type of a sensor.

This can be called before any sensors are opened.

\\param instance_id the sensor instance ID.
\\returns the SDL_SensorType, or `SDL_SENSOR_INVALID` if `instance_id` is
         not valid.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetSensorNonPortableTypeForID"
 "Get the platform dependent type of a sensor.

This can be called before any sensors are opened.

\\param instance_id the sensor instance ID.
\\returns the sensor platform dependent type, or -1 if `instance_id` is not
         valid.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_OpenSensor" "Open a sensor for use.

\\param instance_id the sensor instance ID.
\\returns an SDL_Sensor object or NULL on failure; call SDL_GetError() for
         more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetSensorFromID"
 "Return the SDL_Sensor associated with an instance ID.

\\param instance_id the sensor instance ID.
\\returns an SDL_Sensor object or NULL on failure; call SDL_GetError() for
         more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetSensorProperties"
 "Get the properties associated with a sensor.

\\param sensor the SDL_Sensor object.
\\returns a valid property ID on success or 0 on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetSensorName"
 "Get the implementation dependent name of a sensor.

\\param sensor the SDL_Sensor object.
\\returns the sensor name or NULL on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetSensorType" "Get the type of a sensor.

\\param sensor the SDL_Sensor object to inspect.
\\returns the SDL_SensorType type, or `SDL_SENSOR_INVALID` if `sensor` is
         NULL.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetSensorNonPortableType"
 "Get the platform dependent type of a sensor.

\\param sensor the SDL_Sensor object to inspect.
\\returns the sensor platform dependent type, or -1 if `sensor` is NULL.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetSensorID" "Get the instance ID of a sensor.

\\param sensor the SDL_Sensor object to inspect.
\\returns the sensor instance ID, or 0 on failure; call SDL_GetError() for
         more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetSensorData" "Get the current state of an opened sensor.

The number of values and interpretation of the data is sensor dependent.

\\param sensor the SDL_Sensor object to query.
\\param data a pointer filled with the current sensor state.
\\param num_values the number of values to write to data.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_CloseSensor"
 "Close a sensor previously opened with SDL_OpenSensor().

\\param sensor the SDL_Sensor object to close.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_UpdateSensors" "Update the current state of the open sensors.

This is called automatically by the event loop if sensor events are
enabled.

This needs to be called from the thread that initialized the sensor
subsystem.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_COMPILE_TIME_ASSERT" "A compile-time assertion.

This can check constant values _known to the compiler at build time_ for
correctness, and end the compile with the error if they fail.

Often times these are used to verify basic truths, like the size of a
datatype is what is expected:

```c
SDL_COMPILE_TIME_ASSERT(uint32_size, sizeof(Uint32) == 4);
```

The `name` parameter must be a valid C symbol, and must be unique across
all compile-time asserts in the same compilation unit (one run of the
compiler), or the build might fail with cryptic errors on some targets.
This is used with a C language trick that works on older compilers that
don't support better assertion techniques.

If you need an assertion that operates at runtime, on variable data, you
should try SDL_assert instead.

\\param name a unique identifier for this assertion.
\\param x the value to test. Must be a boolean value.

\\threadsafety This macro doesn't generate any code to run.

\\since This macro is available since SDL 3.2.0.

\\sa SDL_assert
")
(:FUNCTION "SDL_arraysize" "The number of elements in a static array.

This will compile but return incorrect results for a pointer to an array;
it has to be an array the compiler knows the size of.

This macro looks like it double-evaluates the argument, but it does so
inside of `sizeof`, so there are no side-effects here, as expressions do
not actually run any code in these cases.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_STRINGIFY_ARG"
 "Macro useful for building other macros with strings in them.

For example:

```c
#define LOG_ERROR(X) OutputDebugString(SDL_STRINGIFY_ARG(__FUNCTION__) \": \" X \"\\n\")`
```

\\param arg the text to turn into a string literal.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_reinterpret_cast"
 "Handle a Reinterpret Cast properly whether using C or C++.

If compiled as C++, this macro offers a proper C++ reinterpret_cast<>.

If compiled as C, this macro does a normal C-style cast.

This is helpful to avoid compiler warnings in C++.

\\param type the type to cast the expression to.
\\param expression the expression to cast to a different type.
\\returns `expression`, cast to `type`.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.

\\sa SDL_static_cast
\\sa SDL_const_cast
")
(:FUNCTION "SDL_static_cast"
 "Handle a Static Cast properly whether using C or C++.

If compiled as C++, this macro offers a proper C++ static_cast<>.

If compiled as C, this macro does a normal C-style cast.

This is helpful to avoid compiler warnings in C++.

\\param type the type to cast the expression to.
\\param expression the expression to cast to a different type.
\\returns `expression`, cast to `type`.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.

\\sa SDL_reinterpret_cast
\\sa SDL_const_cast
")
(:FUNCTION "SDL_const_cast"
 "Handle a Const Cast properly whether using C or C++.

If compiled as C++, this macro offers a proper C++ const_cast<>.

If compiled as C, this macro does a normal C-style cast.

This is helpful to avoid compiler warnings in C++.

\\param type the type to cast the expression to.
\\param expression the expression to cast to a different type.
\\returns `expression`, cast to `type`.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.

\\sa SDL_reinterpret_cast
\\sa SDL_static_cast
")
(:FUNCTION "SDL_FOURCC" "Define a four character code as a Uint32.

\\param A the first ASCII character.
\\param B the second ASCII character.
\\param C the third ASCII character.
\\param D the fourth ASCII character.
\\returns the four characters converted into a Uint32, one character
         per-byte.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SINT64_C"
 "Append the 64 bit integer suffix to a signed integer literal.

This helps compilers that might believe a integer literal larger than
0xFFFFFFFF is overflowing a 32-bit value. Use `SDL_SINT64_C(0xFFFFFFFF1)`
instead of `0xFFFFFFFF1` by itself.

\\since This macro is available since SDL 3.2.0.

\\sa SDL_UINT64_C
")
(:FUNCTION "SDL_UINT64_C"
 "Append the 64 bit integer suffix to an unsigned integer literal.

This helps compilers that might believe a integer literal larger than
0xFFFFFFFF is overflowing a 32-bit value. Use `SDL_UINT64_C(0xFFFFFFFF1)`
instead of `0xFFFFFFFF1` by itself.

\\since This macro is available since SDL 3.2.0.

\\sa SDL_SINT64_C
")
(:TYPEDEF "Sint8" "A signed 8-bit integer type.

\\since This macro is available since SDL 3.2.0.
")
(:TYPEDEF "Uint8" "An unsigned 8-bit integer type.

\\since This macro is available since SDL 3.2.0.
")
(:TYPEDEF "Sint16" "A signed 16-bit integer type.

\\since This macro is available since SDL 3.2.0.
")
(:TYPEDEF "Uint16" "An unsigned 16-bit integer type.

\\since This macro is available since SDL 3.2.0.
")
(:TYPEDEF "Sint32" "A signed 32-bit integer type.

\\since This macro is available since SDL 3.2.0.
")
(:TYPEDEF "Uint32" "An unsigned 32-bit integer type.

\\since This macro is available since SDL 3.2.0.
")
(:TYPEDEF "Sint64" "A signed 64-bit integer type.

\\since This macro is available since SDL 3.2.0.

\\sa SDL_SINT64_C
")
(:TYPEDEF "Uint64" "An unsigned 64-bit integer type.

\\since This macro is available since SDL 3.2.0.

\\sa SDL_UINT64_C
")
(:TYPEDEF "SDL_Time"
 "SDL times are signed, 64-bit integers representing nanoseconds since the
Unix epoch (Jan 1, 1970).

They can be converted between POSIX time_t values with SDL_NS_TO_SECONDS()
and SDL_SECONDS_TO_NS(), and between Windows FILETIME values with
SDL_TimeToWindows() and SDL_TimeFromWindows().

\\since This macro is available since SDL 3.2.0.

\\sa SDL_MAX_SINT64
\\sa SDL_MIN_SINT64
")
(:FUNCTION "SDL_IN_BYTECAP"
 "Macro that annotates function params with input buffer size.

If we were to annotate `memcpy`:

```c
void *memcpy(void *dst, SDL_IN_BYTECAP(len) const void *src, size_t len);
```

This notes that `src` should be `len` bytes in size and is only read by the
function. The compiler or other analysis tools can warn when this doesn't
appear to be the case.

On compilers without this annotation mechanism, this is defined to nothing.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_INOUT_Z_CAP"
 "Macro that annotates function params with input/output string buffer size.

If we were to annotate `strlcat`:

```c
size_t strlcat(SDL_INOUT_Z_CAP(maxlen) char *dst, const char *src, size_t maxlen);
```

This notes that `dst` is a null-terminated C string, should be `maxlen`
bytes in size, and is both read from and written to by the function. The
compiler or other analysis tools can warn when this doesn't appear to be
the case.

On compilers without this annotation mechanism, this is defined to nothing.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_OUT_Z_CAP"
 "Macro that annotates function params with output string buffer size.

If we were to annotate `snprintf`:

```c
int snprintf(SDL_OUT_Z_CAP(maxlen) char *text, size_t maxlen, const char *fmt, ...);
```

This notes that `text` is a null-terminated C string, should be `maxlen`
bytes in size, and is only written to by the function. The compiler or
other analysis tools can warn when this doesn't appear to be the case.

On compilers without this annotation mechanism, this is defined to nothing.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_OUT_CAP"
 "Macro that annotates function params with output buffer size.

If we were to annotate `wcsncpy`:

```c
char *wcscpy(SDL_OUT_CAP(bufsize) wchar_t *dst, const wchar_t *src, size_t bufsize);
```

This notes that `dst` should have a capacity of `bufsize` wchar_t in size,
and is only written to by the function. The compiler or other analysis
tools can warn when this doesn't appear to be the case.

This operates on counts of objects, not bytes. Use SDL_OUT_BYTECAP for
bytes.

On compilers without this annotation mechanism, this is defined to nothing.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_OUT_BYTECAP"
 "Macro that annotates function params with output buffer size.

If we were to annotate `memcpy`:

```c
void *memcpy(SDL_OUT_BYTECAP(bufsize) void *dst, const void *src, size_t bufsize);
```

This notes that `dst` should have a capacity of `bufsize` bytes in size,
and is only written to by the function. The compiler or other analysis
tools can warn when this doesn't appear to be the case.

On compilers without this annotation mechanism, this is defined to nothing.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_OUT_Z_BYTECAP"
 "Macro that annotates function params with output buffer string size.

If we were to annotate `strcpy`:

```c
char *strcpy(SDL_OUT_Z_BYTECAP(bufsize) char *dst, const char *src, size_t bufsize);
```

This notes that `dst` should have a capacity of `bufsize` bytes in size,
and a zero-terminated string is written to it by the function. The compiler
or other analysis tools can warn when this doesn't appear to be the case.

On compilers without this annotation mechanism, this is defined to nothing.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_PRINTF_VARARG_FUNC"
 "Macro that annotates a vararg function that operates like printf.

If we were to annotate `fprintf`:

```c
int fprintf(FILE *f, const char *fmt, ...) SDL_PRINTF_VARARG_FUNC(2);
```

This notes that the second parameter should be a printf-style format
string, followed by `...`. The compiler or other analysis tools can warn
when this doesn't appear to be the case.

On compilers without this annotation mechanism, this is defined to nothing.

This can (and should) be used with SDL_PRINTF_FORMAT_STRING as well, which
between them will cover at least Visual Studio, GCC, and Clang.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_PRINTF_VARARG_FUNCV"
 "Macro that annotates a va_list function that operates like printf.

If we were to annotate `vfprintf`:

```c
int vfprintf(FILE *f, const char *fmt, va_list ap) SDL_PRINTF_VARARG_FUNCV(2);
```

This notes that the second parameter should be a printf-style format
string, followed by a va_list. The compiler or other analysis tools can
warn when this doesn't appear to be the case.

On compilers without this annotation mechanism, this is defined to nothing.

This can (and should) be used with SDL_PRINTF_FORMAT_STRING as well, which
between them will cover at least Visual Studio, GCC, and Clang.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SCANF_VARARG_FUNC"
 "Macro that annotates a vararg function that operates like scanf.

If we were to annotate `fscanf`:

```c
int fscanf(FILE *f, const char *fmt, ...) SDL_PRINTF_VARARG_FUNCV(2);
```

This notes that the second parameter should be a scanf-style format string,
followed by `...`. The compiler or other analysis tools can warn when this
doesn't appear to be the case.

On compilers without this annotation mechanism, this is defined to nothing.

This can (and should) be used with SDL_SCANF_FORMAT_STRING as well, which
between them will cover at least Visual Studio, GCC, and Clang.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SCANF_VARARG_FUNCV"
 "Macro that annotates a va_list function that operates like scanf.

If we were to annotate `vfscanf`:

```c
int vfscanf(FILE *f, const char *fmt, va_list ap) SDL_PRINTF_VARARG_FUNCV(2);
```

This notes that the second parameter should be a scanf-style format string,
followed by a va_list. The compiler or other analysis tools can warn when
this doesn't appear to be the case.

On compilers without this annotation mechanism, this is defined to nothing.

This can (and should) be used with SDL_SCANF_FORMAT_STRING as well, which
between them will cover at least Visual Studio, GCC, and Clang.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_WPRINTF_VARARG_FUNC"
 "Macro that annotates a vararg function that operates like wprintf.

If we were to annotate `fwprintf`:

```c
int fwprintf(FILE *f, const wchar_t *fmt, ...) SDL_WPRINTF_VARARG_FUNC(2);
```

This notes that the second parameter should be a wprintf-style format wide
string, followed by `...`. The compiler or other analysis tools can warn
when this doesn't appear to be the case.

On compilers without this annotation mechanism, this is defined to nothing.

This can (and should) be used with SDL_PRINTF_FORMAT_STRING as well, which
between them will cover at least Visual Studio, GCC, and Clang.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_WPRINTF_VARARG_FUNCV"
 "Macro that annotates a va_list function that operates like wprintf.

If we were to annotate `vfwprintf`:

```c
int vfwprintf(FILE *f, const wchar_t *fmt, va_list ap) SDL_WPRINTF_VARARG_FUNC(2);
```

This notes that the second parameter should be a wprintf-style format wide
string, followed by a va_list. The compiler or other analysis tools can
warn when this doesn't appear to be the case.

On compilers without this annotation mechanism, this is defined to nothing.

This can (and should) be used with SDL_PRINTF_FORMAT_STRING as well, which
between them will cover at least Visual Studio, GCC, and Clang.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_INIT_INTERFACE" "A macro to initialize an SDL interface.

This macro will initialize an SDL interface structure and should be called
before you fill out the fields with your implementation.

You can use it like this:

```c
SDL_IOStreamInterface iface;

SDL_INIT_INTERFACE(&iface);

// Fill in the interface function pointers with your implementation
iface.seek = ...

stream = SDL_OpenIO(&iface, NULL);
```

If you are using designated initializers, you can use the size of the
interface as the version, e.g.

```c
SDL_IOStreamInterface iface = {
    .version = sizeof(iface),
    .seek = ...
};
stream = SDL_OpenIO(&iface, NULL);
```

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.

\\sa SDL_IOStreamInterface
\\sa SDL_StorageInterface
\\sa SDL_VirtualJoystickDesc
")
(:FUNCTION "SDL_stack_alloc" "Allocate memory on the stack (maybe).

If SDL knows how to access alloca() on the current platform, it will use it
to stack-allocate memory here. If it doesn't, it will use SDL_malloc() to
heap-allocate memory.

Since this might not be stack memory at all, it's important that you check
the returned pointer for NULL, and that you call SDL_stack_free on the
memory when done with it. Since this might be stack memory, it's important
that you don't allocate large amounts of it, or allocate in a loop without
returning from the function, so the stack doesn't overflow.

\\param type the datatype of the memory to allocate.
\\param count the number of `type` objects to allocate.
\\returns newly-allocated memory, or NULL on failure.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.

\\sa SDL_stack_free
")
(:FUNCTION "SDL_stack_free"
 "Free memory previously allocated with SDL_stack_alloc.

If SDL used alloca() to allocate this memory, this macro does nothing and
the allocated memory will be automatically released when the function that
called SDL_stack_alloc() returns. If SDL used SDL_malloc(), it will
SDL_free the memory immediately.

\\param data the pointer, from SDL_stack_alloc(), to free.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.

\\sa SDL_stack_alloc
")
(:FUNCTION "SDL_malloc" "Allocate uninitialized memory.

The allocated memory returned by this function must be freed with
SDL_free().

If `size` is 0, it will be set to 1.

If you want to allocate memory aligned to a specific alignment, consider
using SDL_aligned_alloc().

\\param size the size to allocate.
\\returns a pointer to the allocated memory, or NULL if allocation failed.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_free
\\sa SDL_calloc
\\sa SDL_realloc
\\sa SDL_aligned_alloc
")
(:FUNCTION "SDL_ALLOC_SIZE2" "Allocate a zero-initialized array.

The memory returned by this function must be freed with SDL_free().

If either of `nmemb` or `size` is 0, they will both be set to 1.

\\param nmemb the number of elements in the array.
\\param size the size of each element of the array.
\\returns a pointer to the allocated array, or NULL if allocation failed.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_free
\\sa SDL_malloc
\\sa SDL_realloc
")
(:FUNCTION "SDL_free" "Free allocated memory.

The pointer is no longer valid after this call and cannot be dereferenced
anymore.

If `mem` is NULL, this function does nothing.

\\param mem a pointer to allocated memory, or NULL.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_malloc
\\sa SDL_calloc
\\sa SDL_realloc
")
(:FUNCTION "SDL_GetOriginalMemoryFunctions"
 "Get the original set of SDL memory functions.

This is what SDL_malloc and friends will use by default, if there has been
no call to SDL_SetMemoryFunctions. This is not necessarily using the C
runtime's `malloc` functions behind the scenes! Different platforms and
build configurations might do any number of unexpected things.

\\param malloc_func filled with malloc function.
\\param calloc_func filled with calloc function.
\\param realloc_func filled with realloc function.
\\param free_func filled with free function.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetMemoryFunctions"
 "Get the current set of SDL memory functions.

\\param malloc_func filled with malloc function.
\\param calloc_func filled with calloc function.
\\param realloc_func filled with realloc function.
\\param free_func filled with free function.

\\threadsafety This does not hold a lock, so do not call this in the
              unlikely event of a background thread calling
              SDL_SetMemoryFunctions simultaneously.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetMemoryFunctions
\\sa SDL_GetOriginalMemoryFunctions
")
(:FUNCTION "SDL_SetMemoryFunctions"
 "Replace SDL's memory allocation functions with a custom set.

It is not safe to call this function once any allocations have been made,
as future calls to SDL_free will use the new allocator, even if they came
from an SDL_malloc made with the old one!

If used, usually this needs to be the first call made into the SDL library,
if not the very first thing done at program startup time.

\\param malloc_func custom malloc function.
\\param calloc_func custom calloc function.
\\param realloc_func custom realloc function.
\\param free_func custom free function.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread, but one
              should not replace the memory functions once any allocations
              are made!

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetMemoryFunctions
\\sa SDL_GetOriginalMemoryFunctions
")
(:FUNCTION "SDL_aligned_alloc" "Allocate memory aligned to a specific alignment.

The memory returned by this function must be freed with SDL_aligned_free(),
_not_ SDL_free().

If `alignment` is less than the size of `void *`, it will be increased to
match that.

The returned memory address will be a multiple of the alignment value, and
the size of the memory allocated will be a multiple of the alignment value.

\\param alignment the alignment of the memory.
\\param size the size to allocate.
\\returns a pointer to the aligned memory, or NULL if allocation failed.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_aligned_free
")
(:FUNCTION "SDL_aligned_free" "Free memory allocated by SDL_aligned_alloc().

The pointer is no longer valid after this call and cannot be dereferenced
anymore.

If `mem` is NULL, this function does nothing.

\\param mem a pointer previously returned by SDL_aligned_alloc(), or NULL.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_aligned_alloc
")
(:FUNCTION "SDL_GetNumAllocations"
 "Get the number of outstanding (unfreed) allocations.

\\returns the number of allocations or -1 if allocation counting is
         disabled.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:STRUCT "SDL_Environment" "A thread-safe set of environment variables

\\since This struct is available since SDL 3.2.0.

\\sa SDL_GetEnvironment
\\sa SDL_CreateEnvironment
\\sa SDL_GetEnvironmentVariable
\\sa SDL_GetEnvironmentVariables
\\sa SDL_SetEnvironmentVariable
\\sa SDL_UnsetEnvironmentVariable
\\sa SDL_DestroyEnvironment
")
(:FUNCTION "SDL_GetEnvironment" "Get the process environment.

This is initialized at application start and is not affected by setenv()
and unsetenv() calls after that point. Use SDL_SetEnvironmentVariable() and
SDL_UnsetEnvironmentVariable() if you want to modify this environment, or
SDL_setenv_unsafe() or SDL_unsetenv_unsafe() if you want changes to persist
in the C runtime environment after SDL_Quit().

\\returns a pointer to the environment for the process or NULL on failure;
         call SDL_GetError() for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetEnvironmentVariable
\\sa SDL_GetEnvironmentVariables
\\sa SDL_SetEnvironmentVariable
\\sa SDL_UnsetEnvironmentVariable
")
(:FUNCTION "SDL_CreateEnvironment" "Create a set of environment variables

\\param populated true to initialize it from the C runtime environment,
                 false to create an empty environment.
\\returns a pointer to the new environment or NULL on failure; call
         SDL_GetError() for more information.

\\threadsafety If `populated` is false, it is safe to call this function
              from any thread, otherwise it is safe if no other threads are
              calling setenv() or unsetenv()

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetEnvironmentVariable
\\sa SDL_GetEnvironmentVariables
\\sa SDL_SetEnvironmentVariable
\\sa SDL_UnsetEnvironmentVariable
\\sa SDL_DestroyEnvironment
")
(:FUNCTION "SDL_GetEnvironmentVariable"
 "Get the value of a variable in the environment.

\\param env the environment to query.
\\param name the name of the variable to get.
\\returns a pointer to the value of the variable or NULL if it can't be
         found.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetEnvironment
\\sa SDL_CreateEnvironment
\\sa SDL_GetEnvironmentVariables
\\sa SDL_SetEnvironmentVariable
\\sa SDL_UnsetEnvironmentVariable
")
(:FUNCTION "SDL_GetEnvironmentVariables" "Get all variables in the environment.

\\param env the environment to query.
\\returns a NULL terminated array of pointers to environment variables in
         the form \"variable=value\" or NULL on failure; call SDL_GetError()
         for more information. This is a single allocation that should be
         freed with SDL_free() when it is no longer needed.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetEnvironment
\\sa SDL_CreateEnvironment
\\sa SDL_GetEnvironmentVariables
\\sa SDL_SetEnvironmentVariable
\\sa SDL_UnsetEnvironmentVariable
")
(:FUNCTION "SDL_SetEnvironmentVariable"
 "Set the value of a variable in the environment.

\\param env the environment to modify.
\\param name the name of the variable to set.
\\param value the value of the variable to set.
\\param overwrite true to overwrite the variable if it exists, false to
                 return success without setting the variable if it already
                 exists.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetEnvironment
\\sa SDL_CreateEnvironment
\\sa SDL_GetEnvironmentVariable
\\sa SDL_GetEnvironmentVariables
\\sa SDL_UnsetEnvironmentVariable
")
(:FUNCTION "SDL_UnsetEnvironmentVariable"
 "Clear a variable from the environment.

\\param env the environment to modify.
\\param name the name of the variable to unset.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetEnvironment
\\sa SDL_CreateEnvironment
\\sa SDL_GetEnvironmentVariable
\\sa SDL_GetEnvironmentVariables
\\sa SDL_SetEnvironmentVariable
\\sa SDL_UnsetEnvironmentVariable
")
(:FUNCTION "SDL_DestroyEnvironment" "Destroy a set of environment variables.

\\param env the environment to destroy.

\\threadsafety It is safe to call this function from any thread, as long as
              the environment is no longer in use.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateEnvironment
")
(:FUNCTION "SDL_getenv" "Get the value of a variable in the environment.

This function uses SDL's cached copy of the environment and is thread-safe.

\\param name the name of the variable to get.
\\returns a pointer to the value of the variable or NULL if it can't be
         found.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_getenv_unsafe" "Get the value of a variable in the environment.

This function bypasses SDL's cached copy of the environment and is not
thread-safe.

\\param name the name of the variable to get.
\\returns a pointer to the value of the variable or NULL if it can't be
         found.

\\threadsafety This function is not thread safe, consider using SDL_getenv()
              instead.

\\since This function is available since SDL 3.2.0.

\\sa SDL_getenv
")
(:FUNCTION "SDL_setenv_unsafe" "Set the value of a variable in the environment.

\\param name the name of the variable to set.
\\param value the value of the variable to set.
\\param overwrite 1 to overwrite the variable if it exists, 0 to return
                 success without setting the variable if it already exists.
\\returns 0 on success, -1 on error.

\\threadsafety This function is not thread safe, consider using
              SDL_SetEnvironmentVariable() instead.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetEnvironmentVariable
")
(:FUNCTION "SDL_unsetenv_unsafe" "Clear a variable from the environment.

\\param name the name of the variable to unset.
\\returns 0 on success, -1 on error.

\\threadsafety This function is not thread safe, consider using
              SDL_UnsetEnvironmentVariable() instead.

\\since This function is available since SDL 3.2.0.

\\sa SDL_UnsetEnvironmentVariable
")
(:FUNCTION "SDL_qsort" "Sort an array.

For example:

```c
typedef struct {
    int key;
    const char *string;
} data;

int SDLCALL compare(const void *a, const void *b)
{
    const data *A = (const data *)a;
    const data *B = (const data *)b;

    if (A->n < B->n) {
        return -1;
    } else if (B->n < A->n) {
        return 1;
    } else {
        return 0;
    }
}

data values[] = {
    { 3, \"third\" }, { 1, \"first\" }, { 2, \"second\" }
};

SDL_qsort(values, SDL_arraysize(values), sizeof(values[0]), compare);
```

\\param base a pointer to the start of the array.
\\param nmemb the number of elements in the array.
\\param size the size of the elements in the array.
\\param compare a function used to compare elements in the array.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_bsearch
\\sa SDL_qsort_r
")
(:FUNCTION "SDL_bsearch" "Perform a binary search on a previously sorted array.

For example:

```c
typedef struct {
    int key;
    const char *string;
} data;

int SDLCALL compare(const void *a, const void *b)
{
    const data *A = (const data *)a;
    const data *B = (const data *)b;

    if (A->n < B->n) {
        return -1;
    } else if (B->n < A->n) {
        return 1;
    } else {
        return 0;
    }
}

data values[] = {
    { 1, \"first\" }, { 2, \"second\" }, { 3, \"third\" }
};
data key = { 2, NULL };

data *result = SDL_bsearch(&key, values, SDL_arraysize(values), sizeof(values[0]), compare);
```

\\param key a pointer to a key equal to the element being searched for.
\\param base a pointer to the start of the array.
\\param nmemb the number of elements in the array.
\\param size the size of the elements in the array.
\\param compare a function used to compare elements in the array.
\\returns a pointer to the matching element in the array, or NULL if not
         found.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_bsearch_r
\\sa SDL_qsort
")
(:FUNCTION "SDL_qsort_r"
 "Sort an array, passing a userdata pointer to the compare function.

For example:

```c
typedef enum {
    sort_increasing,
    sort_decreasing,
} sort_method;

typedef struct {
    int key;
    const char *string;
} data;

int SDLCALL compare(const void *userdata, const void *a, const void *b)
{
    sort_method method = (sort_method)(uintptr_t)userdata;
    const data *A = (const data *)a;
    const data *B = (const data *)b;

    if (A->key < B->key) {
        return (method == sort_increasing) ? -1 : 1;
    } else if (B->key < A->key) {
        return (method == sort_increasing) ? 1 : -1;
    } else {
        return 0;
    }
}

data values[] = {
    { 3, \"third\" }, { 1, \"first\" }, { 2, \"second\" }
};

SDL_qsort_r(values, SDL_arraysize(values), sizeof(values[0]), compare, (const void *)(uintptr_t)sort_increasing);
```

\\param base a pointer to the start of the array.
\\param nmemb the number of elements in the array.
\\param size the size of the elements in the array.
\\param compare a function used to compare elements in the array.
\\param userdata a pointer to pass to the compare function.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_bsearch_r
\\sa SDL_qsort
")
(:FUNCTION "SDL_bsearch_r"
 "Perform a binary search on a previously sorted array, passing a userdata
pointer to the compare function.

For example:

```c
typedef enum {
    sort_increasing,
    sort_decreasing,
} sort_method;

typedef struct {
    int key;
    const char *string;
} data;

int SDLCALL compare(const void *userdata, const void *a, const void *b)
{
    sort_method method = (sort_method)(uintptr_t)userdata;
    const data *A = (const data *)a;
    const data *B = (const data *)b;

    if (A->key < B->key) {
        return (method == sort_increasing) ? -1 : 1;
    } else if (B->key < A->key) {
        return (method == sort_increasing) ? 1 : -1;
    } else {
        return 0;
    }
}

data values[] = {
    { 1, \"first\" }, { 2, \"second\" }, { 3, \"third\" }
};
data key = { 2, NULL };

data *result = SDL_bsearch_r(&key, values, SDL_arraysize(values), sizeof(values[0]), compare, (const void *)(uintptr_t)sort_increasing);
```

\\param key a pointer to a key equal to the element being searched for.
\\param base a pointer to the start of the array.
\\param nmemb the number of elements in the array.
\\param size the size of the elements in the array.
\\param compare a function used to compare elements in the array.
\\param userdata a pointer to pass to the compare function.
\\returns a pointer to the matching element in the array, or NULL if not
         found.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_bsearch
\\sa SDL_qsort_r
")
(:FUNCTION "SDL_abs" "Compute the absolute value of `x`.

\\param x an integer value.
\\returns the absolute value of x.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_min" "Return the lesser of two values.

This is a helper macro that might be more clear than writing out the
comparisons directly, and works with any type that can be compared with the
`<` operator. However, it double-evaluates both its parameters, so do not
use expressions with side-effects here.

\\param x the first value to compare.
\\param y the second value to compare.
\\returns the lesser of `x` and `y`.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_max" "Return the greater of two values.

This is a helper macro that might be more clear than writing out the
comparisons directly, and works with any type that can be compared with the
`>` operator. However, it double-evaluates both its parameters, so do not
use expressions with side-effects here.

\\param x the first value to compare.
\\param y the second value to compare.
\\returns the lesser of `x` and `y`.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_clamp" "Return a value clamped to a range.

If `x` is outside the range a values between `a` and `b`, the returned
value will be `a` or `b` as appropriate. Otherwise, `x` is returned.

This macro will produce incorrect results if `b` is less than `a`.

This is a helper macro that might be more clear than writing out the
comparisons directly, and works with any type that can be compared with the
`<` and `>` operators. However, it double-evaluates all its parameters, so
do not use expressions with side-effects here.

\\param x the value to compare.
\\param a the low end value.
\\param b the high end value.
\\returns x, clamped between a and b.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_isalpha" "Query if a character is alphabetic (a letter).

**WARNING**: Regardless of system locale, this will only treat ASCII values
for English 'a-z' and 'A-Z' as true.

\\param x character value to check.
\\returns non-zero if x falls within the character class, zero otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_isalnum"
 "Query if a character is alphabetic (a letter) or a number.

**WARNING**: Regardless of system locale, this will only treat ASCII values
for English 'a-z', 'A-Z', and '0-9' as true.

\\param x character value to check.
\\returns non-zero if x falls within the character class, zero otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_isblank" "Report if a character is blank (a space or tab).

**WARNING**: Regardless of system locale, this will only treat ASCII values
0x20 (space) or 0x9 (tab) as true.

\\param x character value to check.
\\returns non-zero if x falls within the character class, zero otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_iscntrl" "Report if a character is a control character.

**WARNING**: Regardless of system locale, this will only treat ASCII values
0 through 0x1F, and 0x7F, as true.

\\param x character value to check.
\\returns non-zero if x falls within the character class, zero otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_isdigit" "Report if a character is a numeric digit.

**WARNING**: Regardless of system locale, this will only treat ASCII values
'0' (0x30) through '9' (0x39), as true.

\\param x character value to check.
\\returns non-zero if x falls within the character class, zero otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_isxdigit" "Report if a character is a hexadecimal digit.

**WARNING**: Regardless of system locale, this will only treat ASCII values
'A' through 'F', 'a' through 'f', and '0' through '9', as true.

\\param x character value to check.
\\returns non-zero if x falls within the character class, zero otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ispunct" "Report if a character is a punctuation mark.

**WARNING**: Regardless of system locale, this is equivalent to
`((SDL_isgraph(x)) && (!SDL_isalnum(x)))`.

\\param x character value to check.
\\returns non-zero if x falls within the character class, zero otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_isgraph
\\sa SDL_isalnum
")
(:FUNCTION "SDL_isspace" "Report if a character is whitespace.

**WARNING**: Regardless of system locale, this will only treat the
following ASCII values as true:

- space (0x20)
- tab (0x09)
- newline (0x0A)
- vertical tab (0x0B)
- form feed (0x0C)
- return (0x0D)

\\param x character value to check.
\\returns non-zero if x falls within the character class, zero otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_isupper" "Report if a character is upper case.

**WARNING**: Regardless of system locale, this will only treat ASCII values
'A' through 'Z' as true.

\\param x character value to check.
\\returns non-zero if x falls within the character class, zero otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_islower" "Report if a character is lower case.

**WARNING**: Regardless of system locale, this will only treat ASCII values
'a' through 'z' as true.

\\param x character value to check.
\\returns non-zero if x falls within the character class, zero otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_isprint" "Report if a character is \"printable\".

Be advised that \"printable\" has a definition that goes back to text
terminals from the dawn of computing, making this a sort of special case
function that is not suitable for Unicode (or most any) text management.

**WARNING**: Regardless of system locale, this will only treat ASCII values
' ' (0x20) through '~' (0x7E) as true.

\\param x character value to check.
\\returns non-zero if x falls within the character class, zero otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_isgraph"
 "Report if a character is any \"printable\" except space.

Be advised that \"printable\" has a definition that goes back to text
terminals from the dawn of computing, making this a sort of special case
function that is not suitable for Unicode (or most any) text management.

**WARNING**: Regardless of system locale, this is equivalent to
`(SDL_isprint(x)) && ((x) != ' ')`.

\\param x character value to check.
\\returns non-zero if x falls within the character class, zero otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_isprint
")
(:FUNCTION "SDL_toupper" "Convert low-ASCII English letters to uppercase.

**WARNING**: Regardless of system locale, this will only convert ASCII
values 'a' through 'z' to uppercase.

This function returns the uppercase equivalent of `x`. If a character
cannot be converted, or is already uppercase, this function returns `x`.

\\param x character value to check.
\\returns capitalized version of x, or x if no conversion available.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_tolower" "Convert low-ASCII English letters to lowercase.

**WARNING**: Regardless of system locale, this will only convert ASCII
values 'A' through 'Z' to lowercase.

This function returns the lowercase equivalent of `x`. If a character
cannot be converted, or is already lowercase, this function returns `x`.

\\param x character value to check.
\\returns lowercase version of x, or x if no conversion available.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_crc16" "Calculate a CRC-16 value.

https://en.wikipedia.org/wiki/Cyclic_redundancy_check

This function can be called multiple times, to stream data to be
checksummed in blocks. Each call must provide the previous CRC-16 return
value to be updated with the next block. The first call to this function
for a set of blocks should pass in a zero CRC value.

\\param crc the current checksum for this data set, or 0 for a new data set.
\\param data a new block of data to add to the checksum.
\\param len the size, in bytes, of the new block of data.
\\returns a CRC-16 checksum value of all blocks in the data set.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_crc32" "Calculate a CRC-32 value.

https://en.wikipedia.org/wiki/Cyclic_redundancy_check

This function can be called multiple times, to stream data to be
checksummed in blocks. Each call must provide the previous CRC-32 return
value to be updated with the next block. The first call to this function
for a set of blocks should pass in a zero CRC value.

\\param crc the current checksum for this data set, or 0 for a new data set.
\\param data a new block of data to add to the checksum.
\\param len the size, in bytes, of the new block of data.
\\returns a CRC-32 checksum value of all blocks in the data set.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_murmur3_32"
 "Calculate a 32-bit MurmurHash3 value for a block of data.

https://en.wikipedia.org/wiki/MurmurHash

A seed may be specified, which changes the final results consistently, but
this does not work like SDL_crc16 and SDL_crc32: you can't feed a previous
result from this function back into itself as the next seed value to
calculate a hash in chunks; it won't produce the same hash as it would if
the same data was provided in a single call.

If you aren't sure what to provide for a seed, zero is fine. Murmur3 is not
cryptographically secure, so it shouldn't be used for hashing top-secret
data.

\\param data the data to be hashed.
\\param len the size of data, in bytes.
\\param seed a value that alters the final hash value.
\\returns a Murmur3 32-bit hash value.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_memcpy" "Copy non-overlapping memory.

The memory regions must not overlap. If they do, use SDL_memmove() instead.

\\param dst The destination memory region. Must not be NULL, and must not
           overlap with `src`.
\\param src The source memory region. Must not be NULL, and must not overlap
           with `dst`.
\\param len The length in bytes of both `dst` and `src`.
\\returns `dst`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_memmove
")
(:FUNCTION "SDL_copyp"
 "A macro to copy memory between objects, with basic type checking.

SDL_memcpy and SDL_memmove do not care where you copy memory to and from,
which can lead to bugs. This macro aims to avoid most of those bugs by
making sure that the source and destination are both pointers to objects
that are the same size. It does not check that the objects are the same
_type_, just that the copy will not overflow either object.

The size check happens at compile time, and the compiler will throw an
error if the objects are different sizes.

Generally this is intended to copy a single object, not an array.

This macro looks like it double-evaluates its parameters, but the extras
them are in `sizeof` sections, which generate no code nor side-effects.

\\param dst a pointer to the destination object. Must not be NULL.
\\param src a pointer to the source object. Must not be NULL.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_memmove" "Copy memory ranges that might overlap.

It is okay for the memory regions to overlap. If you are confident that the
regions never overlap, using SDL_memcpy() may improve performance.

\\param dst The destination memory region. Must not be NULL.
\\param src The source memory region. Must not be NULL.
\\param len The length in bytes of both `dst` and `src`.
\\returns `dst`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_memcpy
")
(:FUNCTION "SDL_memset"
 "Initialize all bytes of buffer of memory to a specific value.

This function will set `len` bytes, pointed to by `dst`, to the value
specified in `c`.

Despite `c` being an `int` instead of a `char`, this only operates on
bytes; `c` must be a value between 0 and 255, inclusive.

\\param dst the destination memory region. Must not be NULL.
\\param c the byte value to set.
\\param len the length, in bytes, to set in `dst`.
\\returns `dst`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_memset4"
 "Initialize all 32-bit words of buffer of memory to a specific value.

This function will set a buffer of `dwords` Uint32 values, pointed to by
`dst`, to the value specified in `val`.

Unlike SDL_memset, this sets 32-bit values, not bytes, so it's not limited
to a range of 0-255.

\\param dst the destination memory region. Must not be NULL.
\\param val the Uint32 value to set.
\\param dwords the number of Uint32 values to set in `dst`.
\\returns `dst`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_zero" "Clear an object's memory to zero.

This is wrapper over SDL_memset that handles calculating the object size,
so there's no chance of copy/paste errors, and the code is cleaner.

This requires an object, not a pointer to an object, nor an array.

\\param x the object to clear.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.

\\sa SDL_zerop
\\sa SDL_zeroa
")
(:FUNCTION "SDL_zerop" "Clear an object's memory to zero, using a pointer.

This is wrapper over SDL_memset that handles calculating the object size,
so there's no chance of copy/paste errors, and the code is cleaner.

This requires a pointer to an object, not an object itself, nor an array.

\\param x a pointer to the object to clear.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.

\\sa SDL_zero
\\sa SDL_zeroa
")
(:FUNCTION "SDL_zeroa" "Clear an array's memory to zero.

This is wrapper over SDL_memset that handles calculating the array size, so
there's no chance of copy/paste errors, and the code is cleaner.

This requires an array, not an object, nor a pointer to an object.

\\param x an array to clear.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.

\\sa SDL_zero
\\sa SDL_zeroa
")
(:FUNCTION "SDL_memcmp" "Compare two buffers of memory.

\\param s1 the first buffer to compare. NULL is not permitted!
\\param s2 the second buffer to compare. NULL is not permitted!
\\param len the number of bytes to compare between the buffers.
\\returns less than zero if s1 is \"less than\" s2, greater than zero if s1 is
         \"greater than\" s2, and zero if the buffers match exactly for `len`
         bytes.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_wcslen"
 "This works exactly like wcslen() but doesn't require access to a C runtime.

Counts the number of wchar_t values in `wstr`, excluding the null
terminator.

Like SDL_strlen only counts bytes and not codepoints in a UTF-8 string,
this counts wchar_t values in a string, even if the string's encoding is of
variable width, like UTF-16.

Also be aware that wchar_t is different sizes on different platforms (4
bytes on Linux, 2 on Windows, etc).

\\param wstr The null-terminated wide string to read. Must not be NULL.
\\returns the length (in wchar_t values, excluding the null terminator) of
         `wstr`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_wcsnlen
\\sa SDL_utf8strlen
\\sa SDL_utf8strnlen
")
(:FUNCTION "SDL_wcsnlen"
 "This works exactly like wcsnlen() but doesn't require access to a C
runtime.

Counts up to a maximum of `maxlen` wchar_t values in `wstr`, excluding the
null terminator.

Like SDL_strnlen only counts bytes and not codepoints in a UTF-8 string,
this counts wchar_t values in a string, even if the string's encoding is of
variable width, like UTF-16.

Also be aware that wchar_t is different sizes on different platforms (4
bytes on Linux, 2 on Windows, etc).

Also, `maxlen` is a count of wide characters, not bytes!

\\param wstr The null-terminated wide string to read. Must not be NULL.
\\param maxlen The maximum amount of wide characters to count.
\\returns the length (in wide characters, excluding the null terminator) of
         `wstr` but never more than `maxlen`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_wcslen
\\sa SDL_utf8strlen
\\sa SDL_utf8strnlen
")
(:FUNCTION "SDL_wcslcpy" "Copy a wide string.

This function copies `maxlen` - 1 wide characters from `src` to `dst`, then
appends a null terminator.

`src` and `dst` must not overlap.

If `maxlen` is 0, no wide characters are copied and no null terminator is
written.

\\param dst The destination buffer. Must not be NULL, and must not overlap
           with `src`.
\\param src The null-terminated wide string to copy. Must not be NULL, and
           must not overlap with `dst`.
\\param maxlen The length (in wide characters) of the destination buffer.
\\returns the length (in wide characters, excluding the null terminator) of
         `src`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_wcslcat
")
(:FUNCTION "SDL_wcslcat" "Concatenate wide strings.

This function appends up to `maxlen` - SDL_wcslen(dst) - 1 wide characters
from `src` to the end of the wide string in `dst`, then appends a null
terminator.

`src` and `dst` must not overlap.

If `maxlen` - SDL_wcslen(dst) - 1 is less than or equal to 0, then `dst` is
unmodified.

\\param dst The destination buffer already containing the first
           null-terminated wide string. Must not be NULL and must not
           overlap with `src`.
\\param src The second null-terminated wide string. Must not be NULL, and
           must not overlap with `dst`.
\\param maxlen The length (in wide characters) of the destination buffer.
\\returns the length (in wide characters, excluding the null terminator) of
         the string in `dst` plus the length of `src`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_wcslcpy
")
(:FUNCTION "SDL_wcsdup" "Allocate a copy of a wide string.

This allocates enough space for a null-terminated copy of `wstr`, using
SDL_malloc, and then makes a copy of the string into this space.

The returned string is owned by the caller, and should be passed to
SDL_free when no longer needed.

\\param wstr the string to copy.
\\returns a pointer to the newly-allocated wide string.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_wcsstr"
 "Search a wide string for the first instance of a specific substring.

The search ends once it finds the requested substring, or a null terminator
byte to end the string.

Note that this looks for strings of _wide characters_, not _codepoints_, so
it's legal to search for malformed and incomplete UTF-16 sequences.

\\param haystack the wide string to search. Must not be NULL.
\\param needle the wide string to search for. Must not be NULL.
\\returns a pointer to the first instance of `needle` in the string, or NULL
         if not found.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_wcsnstr"
 "Search a wide string, up to n wide chars, for the first instance of a
specific substring.

The search ends once it finds the requested substring, or a null terminator
value to end the string, or `maxlen` wide character have been examined. It
is possible to use this function on a wide string without a null
terminator.

Note that this looks for strings of _wide characters_, not _codepoints_, so
it's legal to search for malformed and incomplete UTF-16 sequences.

\\param haystack the wide string to search. Must not be NULL.
\\param needle the wide string to search for. Must not be NULL.
\\param maxlen the maximum number of wide characters to search in
              `haystack`.
\\returns a pointer to the first instance of `needle` in the string, or NULL
         if not found.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_wcscmp" "Compare two null-terminated wide strings.

This only compares wchar_t values until it hits a null-terminating
character; it does not care if the string is well-formed UTF-16 (or UTF-32,
depending on your platform's wchar_t size), or uses valid Unicode values.

\\param str1 the first string to compare. NULL is not permitted!
\\param str2 the second string to compare. NULL is not permitted!
\\returns less than zero if str1 is \"less than\" str2, greater than zero if
         str1 is \"greater than\" str2, and zero if the strings match
         exactly.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_wcsncmp"
 "Compare two wide strings up to a number of wchar_t values.

This only compares wchar_t values; it does not care if the string is
well-formed UTF-16 (or UTF-32, depending on your platform's wchar_t size),
or uses valid Unicode values.

Note that while this function is intended to be used with UTF-16 (or
UTF-32, depending on your platform's definition of wchar_t), it is
comparing raw wchar_t values and not Unicode codepoints: `maxlen` specifies
a wchar_t limit! If the limit lands in the middle of a multi-wchar UTF-16
sequence, it will only compare a portion of the final character.

`maxlen` specifies a maximum number of wchar_t to compare; if the strings
match to this number of wide chars (or both have matched to a
null-terminator character before this count), they will be considered
equal.

\\param str1 the first string to compare. NULL is not permitted!
\\param str2 the second string to compare. NULL is not permitted!
\\param maxlen the maximum number of wchar_t to compare.
\\returns less than zero if str1 is \"less than\" str2, greater than zero if
         str1 is \"greater than\" str2, and zero if the strings match
         exactly.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_wcscasecmp"
 "Compare two null-terminated wide strings, case-insensitively.

This will work with Unicode strings, using a technique called
\"case-folding\" to handle the vast majority of case-sensitive human
languages regardless of system locale. It can deal with expanding values: a
German Eszett character can compare against two ASCII 's' chars and be
considered a match, for example. A notable exception: it does not handle
the Turkish 'i' character; human language is complicated!

Depending on your platform, \"wchar_t\" might be 2 bytes, and expected to be
UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this
handles Unicode, it expects the string to be well-formed and not a
null-terminated string of arbitrary bytes. Characters that are not valid
UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT
CHARACTER), which is to say two strings of random bits may turn out to
match if they convert to the same amount of replacement characters.

\\param str1 the first string to compare. NULL is not permitted!
\\param str2 the second string to compare. NULL is not permitted!
\\returns less than zero if str1 is \"less than\" str2, greater than zero if
         str1 is \"greater than\" str2, and zero if the strings match
         exactly.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_wcsncasecmp"
 "Compare two wide strings, case-insensitively, up to a number of wchar_t.

This will work with Unicode strings, using a technique called
\"case-folding\" to handle the vast majority of case-sensitive human
languages regardless of system locale. It can deal with expanding values: a
German Eszett character can compare against two ASCII 's' chars and be
considered a match, for example. A notable exception: it does not handle
the Turkish 'i' character; human language is complicated!

Depending on your platform, \"wchar_t\" might be 2 bytes, and expected to be
UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this
handles Unicode, it expects the string to be well-formed and not a
null-terminated string of arbitrary bytes. Characters that are not valid
UTF-16 (or UTF-32) are treated as Unicode character U+FFFD (REPLACEMENT
CHARACTER), which is to say two strings of random bits may turn out to
match if they convert to the same amount of replacement characters.

Note that while this function might deal with variable-sized characters,
`maxlen` specifies a _wchar_ limit! If the limit lands in the middle of a
multi-byte UTF-16 sequence, it may convert a portion of the final character
to one or more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not
to overflow a buffer.

`maxlen` specifies a maximum number of wchar_t values to compare; if the
strings match to this number of wchar_t (or both have matched to a
null-terminator character before this number of bytes), they will be
considered equal.

\\param str1 the first string to compare. NULL is not permitted!
\\param str2 the second string to compare. NULL is not permitted!
\\param maxlen the maximum number of wchar_t values to compare.
\\returns less than zero if str1 is \"less than\" str2, greater than zero if
         str1 is \"greater than\" str2, and zero if the strings match
         exactly.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_wcstol" "Parse a `long` from a wide string.

If `str` starts with whitespace, then those whitespace characters are
skipped before attempting to parse the number.

If the parsed number does not fit inside a `long`, the result is clamped to
the minimum and maximum representable `long` values.

\\param str The null-terminated wide string to read. Must not be NULL.
\\param endp If not NULL, the address of the first invalid wide character
            (i.e. the next character after the parsed number) will be
            written to this pointer.
\\param base The base of the integer to read. Supported values are 0 and 2
            to 36 inclusive. If 0, the base will be inferred from the
            number's prefix (0x for hexadecimal, 0 for octal, decimal
            otherwise).
\\returns the parsed `long`, or 0 if no number could be parsed.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_strtol
")
(:FUNCTION "SDL_strlen"
 "This works exactly like strlen() but doesn't require access to a C runtime.

Counts the bytes in `str`, excluding the null terminator.

If you need the length of a UTF-8 string, consider using SDL_utf8strlen().

\\param str The null-terminated string to read. Must not be NULL.
\\returns the length (in bytes, excluding the null terminator) of `src`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_strnlen
\\sa SDL_utf8strlen
\\sa SDL_utf8strnlen
")
(:FUNCTION "SDL_strnlen"
 "This works exactly like strnlen() but doesn't require access to a C
runtime.

Counts up to a maximum of `maxlen` bytes in `str`, excluding the null
terminator.

If you need the length of a UTF-8 string, consider using SDL_utf8strnlen().

\\param str The null-terminated string to read. Must not be NULL.
\\param maxlen The maximum amount of bytes to count.
\\returns the length (in bytes, excluding the null terminator) of `src` but
         never more than `maxlen`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_strlen
\\sa SDL_utf8strlen
\\sa SDL_utf8strnlen
")
(:FUNCTION "SDL_strlcpy" "Copy a string.

This function copies up to `maxlen` - 1 characters from `src` to `dst`,
then appends a null terminator.

If `maxlen` is 0, no characters are copied and no null terminator is
written.

If you want to copy an UTF-8 string but need to ensure that multi-byte
sequences are not truncated, consider using SDL_utf8strlcpy().

\\param dst The destination buffer. Must not be NULL, and must not overlap
           with `src`.
\\param src The null-terminated string to copy. Must not be NULL, and must
           not overlap with `dst`.
\\param maxlen The length (in characters) of the destination buffer.
\\returns the length (in characters, excluding the null terminator) of
         `src`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_strlcat
\\sa SDL_utf8strlcpy
")
(:FUNCTION "SDL_utf8strlcpy" "Copy an UTF-8 string.

This function copies up to `dst_bytes` - 1 bytes from `src` to `dst` while
also ensuring that the string written to `dst` does not end in a truncated
multi-byte sequence. Finally, it appends a null terminator.

`src` and `dst` must not overlap.

Note that unlike SDL_strlcpy(), this function returns the number of bytes
written, not the length of `src`.

\\param dst The destination buffer. Must not be NULL, and must not overlap
           with `src`.
\\param src The null-terminated UTF-8 string to copy. Must not be NULL, and
           must not overlap with `dst`.
\\param dst_bytes The length (in bytes) of the destination buffer. Must not
                 be 0.
\\returns the number of bytes written, excluding the null terminator.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_strlcpy
")
(:FUNCTION "SDL_strlcat" "Concatenate strings.

This function appends up to `maxlen` - SDL_strlen(dst) - 1 characters from
`src` to the end of the string in `dst`, then appends a null terminator.

`src` and `dst` must not overlap.

If `maxlen` - SDL_strlen(dst) - 1 is less than or equal to 0, then `dst` is
unmodified.

\\param dst The destination buffer already containing the first
           null-terminated string. Must not be NULL and must not overlap
           with `src`.
\\param src The second null-terminated string. Must not be NULL, and must
           not overlap with `dst`.
\\param maxlen The length (in characters) of the destination buffer.
\\returns the length (in characters, excluding the null terminator) of the
         string in `dst` plus the length of `src`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_strlcpy
")
(:FUNCTION "SDL_strdup" "Allocate a copy of a string.

This allocates enough space for a null-terminated copy of `str`, using
SDL_malloc, and then makes a copy of the string into this space.

The returned string is owned by the caller, and should be passed to
SDL_free when no longer needed.

\\param str the string to copy.
\\returns a pointer to the newly-allocated string.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_strndup" "Allocate a copy of a string, up to n characters.

This allocates enough space for a null-terminated copy of `str`, up to
`maxlen` bytes, using SDL_malloc, and then makes a copy of the string into
this space.

If the string is longer than `maxlen` bytes, the returned string will be
`maxlen` bytes long, plus a null-terminator character that isn't included
in the count.

The returned string is owned by the caller, and should be passed to
SDL_free when no longer needed.

\\param str the string to copy.
\\param maxlen the maximum length of the copied string, not counting the
              null-terminator character.
\\returns a pointer to the newly-allocated string.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_strrev" "Reverse a string's contents.

This reverses a null-terminated string in-place. Only the content of the
string is reversed; the null-terminator character remains at the end of the
reversed string.

**WARNING**: This function reverses the _bytes_ of the string, not the
codepoints. If `str` is a UTF-8 string with Unicode codepoints > 127, this
will ruin the string data. You should only use this function on strings
that are completely comprised of low ASCII characters.

\\param str the string to reverse.
\\returns `str`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_strupr" "Convert a string to uppercase.

**WARNING**: Regardless of system locale, this will only convert ASCII
values 'A' through 'Z' to uppercase.

This function operates on a null-terminated string of bytes--even if it is
malformed UTF-8!--and converts ASCII characters 'a' through 'z' to their
uppercase equivalents in-place, returning the original `str` pointer.

\\param str the string to convert in-place. Can not be NULL.
\\returns the `str` pointer passed into this function.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_strlwr
")
(:FUNCTION "SDL_strlwr" "Convert a string to lowercase.

**WARNING**: Regardless of system locale, this will only convert ASCII
values 'A' through 'Z' to lowercase.

This function operates on a null-terminated string of bytes--even if it is
malformed UTF-8!--and converts ASCII characters 'A' through 'Z' to their
lowercase equivalents in-place, returning the original `str` pointer.

\\param str the string to convert in-place. Can not be NULL.
\\returns the `str` pointer passed into this function.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_strupr
")
(:FUNCTION "SDL_strchr"
 "Search a string for the first instance of a specific byte.

The search ends once it finds the requested byte value, or a null
terminator byte to end the string.

Note that this looks for _bytes_, not _characters_, so you cannot match
against a Unicode codepoint > 255, regardless of character encoding.

\\param str the string to search. Must not be NULL.
\\param c the byte value to search for.
\\returns a pointer to the first instance of `c` in the string, or NULL if
         not found.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_strrchr"
 "Search a string for the last instance of a specific byte.

The search must go until it finds a null terminator byte to end the string.

Note that this looks for _bytes_, not _characters_, so you cannot match
against a Unicode codepoint > 255, regardless of character encoding.

\\param str the string to search. Must not be NULL.
\\param c the byte value to search for.
\\returns a pointer to the last instance of `c` in the string, or NULL if
         not found.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_strstr"
 "Search a string for the first instance of a specific substring.

The search ends once it finds the requested substring, or a null terminator
byte to end the string.

Note that this looks for strings of _bytes_, not _characters_, so it's
legal to search for malformed and incomplete UTF-8 sequences.

\\param haystack the string to search. Must not be NULL.
\\param needle the string to search for. Must not be NULL.
\\returns a pointer to the first instance of `needle` in the string, or NULL
         if not found.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_strnstr"
 "Search a string, up to n bytes, for the first instance of a specific
substring.

The search ends once it finds the requested substring, or a null terminator
byte to end the string, or `maxlen` bytes have been examined. It is
possible to use this function on a string without a null terminator.

Note that this looks for strings of _bytes_, not _characters_, so it's
legal to search for malformed and incomplete UTF-8 sequences.

\\param haystack the string to search. Must not be NULL.
\\param needle the string to search for. Must not be NULL.
\\param maxlen the maximum number of bytes to search in `haystack`.
\\returns a pointer to the first instance of `needle` in the string, or NULL
         if not found.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_strcasestr"
 "Search a UTF-8 string for the first instance of a specific substring,
case-insensitively.

This will work with Unicode strings, using a technique called
\"case-folding\" to handle the vast majority of case-sensitive human
languages regardless of system locale. It can deal with expanding values: a
German Eszett character can compare against two ASCII 's' chars and be
considered a match, for example. A notable exception: it does not handle
the Turkish 'i' character; human language is complicated!

Since this handles Unicode, it expects the strings to be well-formed UTF-8
and not a null-terminated string of arbitrary bytes. Bytes that are not
valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT
CHARACTER), which is to say two strings of random bits may turn out to
match if they convert to the same amount of replacement characters.

\\param haystack the string to search. Must not be NULL.
\\param needle the string to search for. Must not be NULL.
\\returns a pointer to the first instance of `needle` in the string, or NULL
         if not found.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_strtok_r"
 "This works exactly like strtok_r() but doesn't require access to a C
runtime.

Break a string up into a series of tokens.

To start tokenizing a new string, `str` should be the non-NULL address of
the string to start tokenizing. Future calls to get the next token from the
same string should specify a NULL.

Note that this function will overwrite pieces of `str` with null chars to
split it into tokens. This function cannot be used with const/read-only
strings!

`saveptr` just needs to point to a `char *` that can be overwritten; SDL
will use this to save tokenizing state between calls. It is initialized if
`str` is non-NULL, and used to resume tokenizing when `str` is NULL.

\\param str the string to tokenize, or NULL to continue tokenizing.
\\param delim the delimiter string that separates tokens.
\\param saveptr pointer to a char *, used for ongoing state.
\\returns A pointer to the next token, or NULL if no tokens remain.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_utf8strlen" "Count the number of codepoints in a UTF-8 string.

Counts the _codepoints_, not _bytes_, in `str`, excluding the null
terminator.

If you need to count the bytes in a string instead, consider using
SDL_strlen().

Since this handles Unicode, it expects the strings to be well-formed UTF-8
and not a null-terminated string of arbitrary bytes. Bytes that are not
valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT
CHARACTER), so a malformed or incomplete UTF-8 sequence might increase the
count by several replacement characters.

\\param str The null-terminated UTF-8 string to read. Must not be NULL.
\\returns The length (in codepoints, excluding the null terminator) of
         `src`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_utf8strnlen
\\sa SDL_strlen
")
(:FUNCTION "SDL_utf8strnlen"
 "Count the number of codepoints in a UTF-8 string, up to n bytes.

Counts the _codepoints_, not _bytes_, in `str`, excluding the null
terminator.

If you need to count the bytes in a string instead, consider using
SDL_strnlen().

The counting stops at `bytes` bytes (not codepoints!). This seems
counterintuitive, but makes it easy to express the total size of the
string's buffer.

Since this handles Unicode, it expects the strings to be well-formed UTF-8
and not a null-terminated string of arbitrary bytes. Bytes that are not
valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT
CHARACTER), so a malformed or incomplete UTF-8 sequence might increase the
count by several replacement characters.

\\param str The null-terminated UTF-8 string to read. Must not be NULL.
\\param bytes The maximum amount of bytes to count.
\\returns The length (in codepoints, excluding the null terminator) of `src`
         but never more than `maxlen`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_utf8strlen
\\sa SDL_strnlen
")
(:FUNCTION "SDL_itoa" "Convert an integer into a string.

This requires a radix to specified for string format. Specifying 10
produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2
to 36.

Note that this function will overflow a buffer if `str` is not large enough
to hold the output! It may be safer to use SDL_snprintf to clamp output, or
SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate
much more space than you expect to use (and don't forget possible negative
signs, null terminator bytes, etc).

\\param value the integer to convert.
\\param str the buffer to write the string into.
\\param radix the radix to use for string generation.
\\returns `str`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_uitoa
\\sa SDL_ltoa
\\sa SDL_lltoa
")
(:FUNCTION "SDL_uitoa" "Convert an unsigned integer into a string.

This requires a radix to specified for string format. Specifying 10
produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2
to 36.

Note that this function will overflow a buffer if `str` is not large enough
to hold the output! It may be safer to use SDL_snprintf to clamp output, or
SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate
much more space than you expect to use (and don't forget null terminator
bytes, etc).

\\param value the unsigned integer to convert.
\\param str the buffer to write the string into.
\\param radix the radix to use for string generation.
\\returns `str`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_itoa
\\sa SDL_ultoa
\\sa SDL_ulltoa
")
(:FUNCTION "SDL_ltoa" "Convert a long integer into a string.

This requires a radix to specified for string format. Specifying 10
produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2
to 36.

Note that this function will overflow a buffer if `str` is not large enough
to hold the output! It may be safer to use SDL_snprintf to clamp output, or
SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate
much more space than you expect to use (and don't forget possible negative
signs, null terminator bytes, etc).

\\param value the long integer to convert.
\\param str the buffer to write the string into.
\\param radix the radix to use for string generation.
\\returns `str`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ultoa
\\sa SDL_itoa
\\sa SDL_lltoa
")
(:FUNCTION "SDL_ultoa" "Convert an unsigned long integer into a string.

This requires a radix to specified for string format. Specifying 10
produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2
to 36.

Note that this function will overflow a buffer if `str` is not large enough
to hold the output! It may be safer to use SDL_snprintf to clamp output, or
SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate
much more space than you expect to use (and don't forget null terminator
bytes, etc).

\\param value the unsigned long integer to convert.
\\param str the buffer to write the string into.
\\param radix the radix to use for string generation.
\\returns `str`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ltoa
\\sa SDL_uitoa
\\sa SDL_ulltoa
")
(:FUNCTION "SDL_lltoa" "Convert a long long integer into a string.

This requires a radix to specified for string format. Specifying 10
produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2
to 36.

Note that this function will overflow a buffer if `str` is not large enough
to hold the output! It may be safer to use SDL_snprintf to clamp output, or
SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate
much more space than you expect to use (and don't forget possible negative
signs, null terminator bytes, etc).

\\param value the long long integer to convert.
\\param str the buffer to write the string into.
\\param radix the radix to use for string generation.
\\returns `str`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ulltoa
\\sa SDL_itoa
\\sa SDL_ltoa
")
(:FUNCTION "SDL_ulltoa" "Convert an unsigned long long integer into a string.

This requires a radix to specified for string format. Specifying 10
produces a decimal number, 16 hexidecimal, etc. Must be in the range of 2
to 36.

Note that this function will overflow a buffer if `str` is not large enough
to hold the output! It may be safer to use SDL_snprintf to clamp output, or
SDL_asprintf to allocate a buffer. Otherwise, it doesn't hurt to allocate
much more space than you expect to use (and don't forget null terminator
bytes, etc).

\\param value the unsigned long long integer to convert.
\\param str the buffer to write the string into.
\\param radix the radix to use for string generation.
\\returns `str`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_lltoa
\\sa SDL_uitoa
\\sa SDL_ultoa
")
(:FUNCTION "SDL_atoi" "Parse an `int` from a string.

The result of calling `SDL_atoi(str)` is equivalent to
`(int)SDL_strtol(str, NULL, 10)`.

\\param str The null-terminated string to read. Must not be NULL.
\\returns the parsed `int`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_atof
\\sa SDL_strtol
\\sa SDL_strtoul
\\sa SDL_strtoll
\\sa SDL_strtoull
\\sa SDL_strtod
\\sa SDL_itoa
")
(:FUNCTION "SDL_atof" "Parse a `double` from a string.

The result of calling `SDL_atof(str)` is equivalent to `SDL_strtod(str,
NULL)`.

\\param str The null-terminated string to read. Must not be NULL.
\\returns the parsed `double`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_atoi
\\sa SDL_strtol
\\sa SDL_strtoul
\\sa SDL_strtoll
\\sa SDL_strtoull
\\sa SDL_strtod
")
(:FUNCTION "SDL_strtol" "Parse a `long` from a string.

If `str` starts with whitespace, then those whitespace characters are
skipped before attempting to parse the number.

If the parsed number does not fit inside a `long`, the result is clamped to
the minimum and maximum representable `long` values.

\\param str The null-terminated string to read. Must not be NULL.
\\param endp If not NULL, the address of the first invalid character (i.e.
            the next character after the parsed number) will be written to
            this pointer.
\\param base The base of the integer to read. Supported values are 0 and 2
            to 36 inclusive. If 0, the base will be inferred from the
            number's prefix (0x for hexadecimal, 0 for octal, decimal
            otherwise).
\\returns the parsed `long`, or 0 if no number could be parsed.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_atoi
\\sa SDL_atof
\\sa SDL_strtoul
\\sa SDL_strtoll
\\sa SDL_strtoull
\\sa SDL_strtod
\\sa SDL_ltoa
\\sa SDL_wcstol
")
(:FUNCTION "SDL_strtoul" "Parse an `unsigned long` from a string.

If `str` starts with whitespace, then those whitespace characters are
skipped before attempting to parse the number.

If the parsed number does not fit inside an `unsigned long`, the result is
clamped to the maximum representable `unsigned long` value.

\\param str The null-terminated string to read. Must not be NULL.
\\param endp If not NULL, the address of the first invalid character (i.e.
            the next character after the parsed number) will be written to
            this pointer.
\\param base The base of the integer to read. Supported values are 0 and 2
            to 36 inclusive. If 0, the base will be inferred from the
            number's prefix (0x for hexadecimal, 0 for octal, decimal
            otherwise).
\\returns the parsed `unsigned long`, or 0 if no number could be parsed.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_atoi
\\sa SDL_atof
\\sa SDL_strtol
\\sa SDL_strtoll
\\sa SDL_strtoull
\\sa SDL_strtod
\\sa SDL_ultoa
")
(:FUNCTION "SDL_strtoll" "Parse a `long long` from a string.

If `str` starts with whitespace, then those whitespace characters are
skipped before attempting to parse the number.

If the parsed number does not fit inside a `long long`, the result is
clamped to the minimum and maximum representable `long long` values.

\\param str The null-terminated string to read. Must not be NULL.
\\param endp If not NULL, the address of the first invalid character (i.e.
            the next character after the parsed number) will be written to
            this pointer.
\\param base The base of the integer to read. Supported values are 0 and 2
            to 36 inclusive. If 0, the base will be inferred from the
            number's prefix (0x for hexadecimal, 0 for octal, decimal
            otherwise).
\\returns the parsed `long long`, or 0 if no number could be parsed.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_atoi
\\sa SDL_atof
\\sa SDL_strtol
\\sa SDL_strtoul
\\sa SDL_strtoull
\\sa SDL_strtod
\\sa SDL_lltoa
")
(:FUNCTION "SDL_strtoull" "Parse an `unsigned long long` from a string.

If `str` starts with whitespace, then those whitespace characters are
skipped before attempting to parse the number.

If the parsed number does not fit inside an `unsigned long long`, the
result is clamped to the maximum representable `unsigned long long` value.

\\param str The null-terminated string to read. Must not be NULL.
\\param endp If not NULL, the address of the first invalid character (i.e.
            the next character after the parsed number) will be written to
            this pointer.
\\param base The base of the integer to read. Supported values are 0 and 2
            to 36 inclusive. If 0, the base will be inferred from the
            number's prefix (0x for hexadecimal, 0 for octal, decimal
            otherwise).
\\returns the parsed `unsigned long long`, or 0 if no number could be
         parsed.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_atoi
\\sa SDL_atof
\\sa SDL_strtol
\\sa SDL_strtoll
\\sa SDL_strtoul
\\sa SDL_strtod
\\sa SDL_ulltoa
")
(:FUNCTION "SDL_strtod" "Parse a `double` from a string.

This function makes fewer guarantees than the C runtime `strtod`:

- Only decimal notation is guaranteed to be supported. The handling of
  scientific and hexadecimal notation is unspecified.
- Whether or not INF and NAN can be parsed is unspecified.
- The precision of the result is unspecified.

\\param str the null-terminated string to read. Must not be NULL.
\\param endp if not NULL, the address of the first invalid character (i.e.
            the next character after the parsed number) will be written to
            this pointer.
\\returns the parsed `double`, or 0 if no number could be parsed.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_atoi
\\sa SDL_atof
\\sa SDL_strtol
\\sa SDL_strtoll
\\sa SDL_strtoul
\\sa SDL_strtoull
")
(:FUNCTION "SDL_strcmp" "Compare two null-terminated UTF-8 strings.

Due to the nature of UTF-8 encoding, this will work with Unicode strings,
since effectively this function just compares bytes until it hits a
null-terminating character. Also due to the nature of UTF-8, this can be
used with SDL_qsort() to put strings in (roughly) alphabetical order.

\\param str1 the first string to compare. NULL is not permitted!
\\param str2 the second string to compare. NULL is not permitted!
\\returns less than zero if str1 is \"less than\" str2, greater than zero if
         str1 is \"greater than\" str2, and zero if the strings match
         exactly.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_strncmp" "Compare two UTF-8 strings up to a number of bytes.

Due to the nature of UTF-8 encoding, this will work with Unicode strings,
since effectively this function just compares bytes until it hits a
null-terminating character. Also due to the nature of UTF-8, this can be
used with SDL_qsort() to put strings in (roughly) alphabetical order.

Note that while this function is intended to be used with UTF-8, it is
doing a bytewise comparison, and `maxlen` specifies a _byte_ limit! If the
limit lands in the middle of a multi-byte UTF-8 sequence, it will only
compare a portion of the final character.

`maxlen` specifies a maximum number of bytes to compare; if the strings
match to this number of bytes (or both have matched to a null-terminator
character before this number of bytes), they will be considered equal.

\\param str1 the first string to compare. NULL is not permitted!
\\param str2 the second string to compare. NULL is not permitted!
\\param maxlen the maximum number of _bytes_ to compare.
\\returns less than zero if str1 is \"less than\" str2, greater than zero if
         str1 is \"greater than\" str2, and zero if the strings match
         exactly.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_strcasecmp"
 "Compare two null-terminated UTF-8 strings, case-insensitively.

This will work with Unicode strings, using a technique called
\"case-folding\" to handle the vast majority of case-sensitive human
languages regardless of system locale. It can deal with expanding values: a
German Eszett character can compare against two ASCII 's' chars and be
considered a match, for example. A notable exception: it does not handle
the Turkish 'i' character; human language is complicated!

Since this handles Unicode, it expects the string to be well-formed UTF-8
and not a null-terminated string of arbitrary bytes. Bytes that are not
valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT
CHARACTER), which is to say two strings of random bits may turn out to
match if they convert to the same amount of replacement characters.

\\param str1 the first string to compare. NULL is not permitted!
\\param str2 the second string to compare. NULL is not permitted!
\\returns less than zero if str1 is \"less than\" str2, greater than zero if
         str1 is \"greater than\" str2, and zero if the strings match
         exactly.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_strncasecmp"
 "Compare two UTF-8 strings, case-insensitively, up to a number of bytes.

This will work with Unicode strings, using a technique called
\"case-folding\" to handle the vast majority of case-sensitive human
languages regardless of system locale. It can deal with expanding values: a
German Eszett character can compare against two ASCII 's' chars and be
considered a match, for example. A notable exception: it does not handle
the Turkish 'i' character; human language is complicated!

Since this handles Unicode, it expects the string to be well-formed UTF-8
and not a null-terminated string of arbitrary bytes. Bytes that are not
valid UTF-8 are treated as Unicode character U+FFFD (REPLACEMENT
CHARACTER), which is to say two strings of random bits may turn out to
match if they convert to the same amount of replacement characters.

Note that while this function is intended to be used with UTF-8, `maxlen`
specifies a _byte_ limit! If the limit lands in the middle of a multi-byte
UTF-8 sequence, it may convert a portion of the final character to one or
more Unicode character U+FFFD (REPLACEMENT CHARACTER) so as not to overflow
a buffer.

`maxlen` specifies a maximum number of bytes to compare; if the strings
match to this number of bytes (or both have matched to a null-terminator
character before this number of bytes), they will be considered equal.

\\param str1 the first string to compare. NULL is not permitted!
\\param str2 the second string to compare. NULL is not permitted!
\\param maxlen the maximum number of bytes to compare.
\\returns less than zero if str1 is \"less than\" str2, greater than zero if
         str1 is \"greater than\" str2, and zero if the strings match
         exactly.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_strpbrk"
 "Searches a string for the first occurence of any character contained in a
breakset, and returns a pointer from the string to that character.

\\param str The null-terminated string to be searched. Must not be NULL, and
           must not overlap with `breakset`.
\\param breakset A null-terminated string containing the list of characters
                to look for. Must not be NULL, and must not overlap with
                `str`.
\\returns A pointer to the location, in str, of the first occurence of a
         character present in the breakset, or NULL if none is found.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_StepUTF8"
 "Decode a UTF-8 string, one Unicode codepoint at a time.

This will return the first Unicode codepoint in the UTF-8 encoded string in
`*pstr`, and then advance `*pstr` past any consumed bytes before returning.

It will not access more than `*pslen` bytes from the string. `*pslen` will
be adjusted, as well, subtracting the number of bytes consumed.

`pslen` is allowed to be NULL, in which case the string _must_ be
NULL-terminated, as the function will blindly read until it sees the NULL
char.

if `*pslen` is zero, it assumes the end of string is reached and returns a
zero codepoint regardless of the contents of the string buffer.

If the resulting codepoint is zero (a NULL terminator), or `*pslen` is
zero, it will not advance `*pstr` or `*pslen` at all.

Generally this function is called in a loop until it returns zero,
adjusting its parameters each iteration.

If an invalid UTF-8 sequence is encountered, this function returns
SDL_INVALID_UNICODE_CODEPOINT and advances the string/length by one byte
(which is to say, a multibyte sequence might produce several
SDL_INVALID_UNICODE_CODEPOINT returns before it syncs to the next valid
UTF-8 sequence).

Several things can generate invalid UTF-8 sequences, including overlong
encodings, the use of UTF-16 surrogate values, and truncated data. Please
refer to
[RFC3629](https://www.ietf.org/rfc/rfc3629.txt)
for details.

\\param pstr a pointer to a UTF-8 string pointer to be read and adjusted.
\\param pslen a pointer to the number of bytes in the string, to be read and
             adjusted. NULL is allowed.
\\returns the first Unicode codepoint in the string.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_StepBackUTF8"
 "Decode a UTF-8 string in reverse, one Unicode codepoint at a time.

This will go to the start of the previous Unicode codepoint in the string,
move `*pstr` to that location and return that codepoint.

If `*pstr` is already at the start of the string), it will not advance
`*pstr` at all.

Generally this function is called in a loop until it returns zero,
adjusting its parameter each iteration.

If an invalid UTF-8 sequence is encountered, this function returns
SDL_INVALID_UNICODE_CODEPOINT.

Several things can generate invalid UTF-8 sequences, including overlong
encodings, the use of UTF-16 surrogate values, and truncated data. Please
refer to
[RFC3629](https://www.ietf.org/rfc/rfc3629.txt)
for details.

\\param start a pointer to the beginning of the UTF-8 string.
\\param pstr a pointer to a UTF-8 string pointer to be read and adjusted.
\\returns the previous Unicode codepoint in the string.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_UCS4ToUTF8" "Convert a single Unicode codepoint to UTF-8.

The buffer pointed to by `dst` must be at least 4 bytes long, as this
function may generate between 1 and 4 bytes of output.

This function returns the first byte _after_ the newly-written UTF-8
sequence, which is useful for encoding multiple codepoints in a loop, or
knowing where to write a NULL-terminator character to end the string (in
either case, plan to have a buffer of _more_ than 4 bytes!).

If `codepoint` is an invalid value (outside the Unicode range, or a UTF-16
surrogate value, etc), this will use U+FFFD (REPLACEMENT CHARACTER) for the
codepoint instead, and not set an error.

If `dst` is NULL, this returns NULL immediately without writing to the
pointer and without setting an error.

\\param codepoint a Unicode codepoint to convert to UTF-8.
\\param dst the location to write the encoded UTF-8. Must point to at least
           4 bytes!
\\returns the first byte past the newly-written UTF-8 sequence.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_sscanf"
 "This works exactly like sscanf() but doesn't require access to a C runtime.

Scan a string, matching a format string, converting each '%' item and
storing it to pointers provided through variable arguments.

\\param text the string to scan. Must not be NULL.
\\param fmt a printf-style format string. Must not be NULL.
\\param ... a list of pointers to values to be filled in with scanned items.
\\returns the number of items that matched the format string.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_vsscanf"
 "This works exactly like vsscanf() but doesn't require access to a C
runtime.

Functions identically to SDL_sscanf(), except it takes a `va_list` instead
of using `...` variable arguments.

\\param text the string to scan. Must not be NULL.
\\param fmt a printf-style format string. Must not be NULL.
\\param ap a `va_list` of pointers to values to be filled in with scanned
          items.
\\returns the number of items that matched the format string.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_snprintf"
 "This works exactly like snprintf() but doesn't require access to a C
runtime.

Format a string of up to `maxlen`-1 bytes, converting each '%' item with
values provided through variable arguments.

While some C runtimes differ on how to deal with too-large strings, this
function null-terminates the output, by treating the null-terminator as
part of the `maxlen` count. Note that if `maxlen` is zero, however, no
bytes will be written at all.

This function returns the number of _bytes_ (not _characters_) that should
be written, excluding the null-terminator character. If this returns a
number >= `maxlen`, it means the output string was truncated. A negative
return value means an error occurred.

Referencing the output string's pointer with a format item is undefined
behavior.

\\param text the buffer to write the string into. Must not be NULL.
\\param maxlen the maximum bytes to write, including the null-terminator.
\\param fmt a printf-style format string. Must not be NULL.
\\param ... a list of values to be used with the format string.
\\returns the number of bytes that should be written, not counting the
         null-terminator char, or a negative value on error.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_swprintf"
 "This works exactly like swprintf() but doesn't require access to a C
runtime.

Format a wide string of up to `maxlen`-1 wchar_t values, converting each
'%' item with values provided through variable arguments.

While some C runtimes differ on how to deal with too-large strings, this
function null-terminates the output, by treating the null-terminator as
part of the `maxlen` count. Note that if `maxlen` is zero, however, no wide
characters will be written at all.

This function returns the number of _wide characters_ (not _codepoints_)
that should be written, excluding the null-terminator character. If this
returns a number >= `maxlen`, it means the output string was truncated. A
negative return value means an error occurred.

Referencing the output string's pointer with a format item is undefined
behavior.

\\param text the buffer to write the wide string into. Must not be NULL.
\\param maxlen the maximum wchar_t values to write, including the
              null-terminator.
\\param fmt a printf-style format string. Must not be NULL.
\\param ... a list of values to be used with the format string.
\\returns the number of wide characters that should be written, not counting
         the null-terminator char, or a negative value on error.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_vsnprintf"
 "This works exactly like vsnprintf() but doesn't require access to a C
runtime.

Functions identically to SDL_snprintf(), except it takes a `va_list`
instead of using `...` variable arguments.

\\param text the buffer to write the string into. Must not be NULL.
\\param maxlen the maximum bytes to write, including the null-terminator.
\\param fmt a printf-style format string. Must not be NULL.
\\param ap a `va_list` values to be used with the format string.
\\returns the number of bytes that should be written, not counting the
         null-terminator char, or a negative value on error.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_vswprintf"
 "This works exactly like vswprintf() but doesn't require access to a C
runtime.

Functions identically to SDL_swprintf(), except it takes a `va_list`
instead of using `...` variable arguments.

\\param text the buffer to write the string into. Must not be NULL.
\\param maxlen the maximum wide characters to write, including the
              null-terminator.
\\param fmt a printf-style format wide string. Must not be NULL.
\\param ap a `va_list` values to be used with the format string.
\\returns the number of wide characters that should be written, not counting
         the null-terminator char, or a negative value on error.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_asprintf"
 "This works exactly like asprintf() but doesn't require access to a C
runtime.

Functions identically to SDL_snprintf(), except it allocates a buffer large
enough to hold the output string on behalf of the caller.

On success, this function returns the number of bytes (not characters)
comprising the output string, not counting the null-terminator character,
and sets `*strp` to the newly-allocated string.

On error, this function returns a negative number, and the value of `*strp`
is undefined.

The returned string is owned by the caller, and should be passed to
SDL_free when no longer needed.

\\param strp on output, is set to the new string. Must not be NULL.
\\param fmt a printf-style format string. Must not be NULL.
\\param ... a list of values to be used with the format string.
\\returns the number of bytes in the newly-allocated string, not counting
         the null-terminator char, or a negative value on error.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_vasprintf"
 "This works exactly like vasprintf() but doesn't require access to a C
runtime.

Functions identically to SDL_asprintf(), except it takes a `va_list`
instead of using `...` variable arguments.

\\param strp on output, is set to the new string. Must not be NULL.
\\param fmt a printf-style format string. Must not be NULL.
\\param ap a `va_list` values to be used with the format string.
\\returns the number of bytes in the newly-allocated string, not counting
         the null-terminator char, or a negative value on error.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_srand" "Seeds the pseudo-random number generator.

Reusing the seed number will cause SDL_rand_*() to repeat the same stream
of 'random' numbers.

\\param seed the value to use as a random number seed, or 0 to use
            SDL_GetPerformanceCounter().

\\threadsafety This should be called on the same thread that calls
              SDL_rand*()

\\since This function is available since SDL 3.2.0.

\\sa SDL_rand
\\sa SDL_rand_bits
\\sa SDL_randf
")
(:FUNCTION "SDL_rand"
 "Generate a pseudo-random number less than n for positive n

The method used is faster and of better quality than `rand() % n`. Odds are
roughly 99.9% even for n = 1 million. Evenness is better for smaller n, and
much worse as n gets bigger.

Example: to simulate a d6 use `SDL_rand(6) + 1` The +1 converts 0..5 to
1..6

If you want to generate a pseudo-random number in the full range of Sint32,
you should use: (Sint32)SDL_rand_bits()

If you want reproducible output, be sure to initialize with SDL_srand()
first.

There are no guarantees as to the quality of the random sequence produced,
and this should not be used for security (cryptography, passwords) or where
money is on the line (loot-boxes, casinos). There are many random number
libraries available with different characteristics and you should pick one
of those to meet any serious needs.

\\param n the number of possible outcomes. n must be positive.
\\returns a random value in the range of [0 .. n-1].

\\threadsafety All calls should be made from a single thread

\\since This function is available since SDL 3.2.0.

\\sa SDL_srand
\\sa SDL_randf
")
(:FUNCTION "SDL_randf"
 "Generate a uniform pseudo-random floating point number less than 1.0

If you want reproducible output, be sure to initialize with SDL_srand()
first.

There are no guarantees as to the quality of the random sequence produced,
and this should not be used for security (cryptography, passwords) or where
money is on the line (loot-boxes, casinos). There are many random number
libraries available with different characteristics and you should pick one
of those to meet any serious needs.

\\returns a random value in the range of [0.0, 1.0).

\\threadsafety All calls should be made from a single thread

\\since This function is available since SDL 3.2.0.

\\sa SDL_srand
\\sa SDL_rand
")
(:FUNCTION "SDL_rand_bits" "Generate 32 pseudo-random bits.

You likely want to use SDL_rand() to get a psuedo-random number instead.

There are no guarantees as to the quality of the random sequence produced,
and this should not be used for security (cryptography, passwords) or where
money is on the line (loot-boxes, casinos). There are many random number
libraries available with different characteristics and you should pick one
of those to meet any serious needs.

\\returns a random value in the range of [0-SDL_MAX_UINT32].

\\threadsafety All calls should be made from a single thread

\\since This function is available since SDL 3.2.0.

\\sa SDL_rand
\\sa SDL_randf
\\sa SDL_srand
")
(:FUNCTION "SDL_rand_r"
 "Generate a pseudo-random number less than n for positive n

The method used is faster and of better quality than `rand() % n`. Odds are
roughly 99.9% even for n = 1 million. Evenness is better for smaller n, and
much worse as n gets bigger.

Example: to simulate a d6 use `SDL_rand_r(state, 6) + 1` The +1 converts
0..5 to 1..6

If you want to generate a pseudo-random number in the full range of Sint32,
you should use: (Sint32)SDL_rand_bits_r(state)

There are no guarantees as to the quality of the random sequence produced,
and this should not be used for security (cryptography, passwords) or where
money is on the line (loot-boxes, casinos). There are many random number
libraries available with different characteristics and you should pick one
of those to meet any serious needs.

\\param state a pointer to the current random number state, this may not be
             NULL.
\\param n the number of possible outcomes. n must be positive.
\\returns a random value in the range of [0 .. n-1].

\\threadsafety This function is thread-safe, as long as the state pointer
              isn't shared between threads.

\\since This function is available since SDL 3.2.0.

\\sa SDL_rand
\\sa SDL_rand_bits_r
\\sa SDL_randf_r
")
(:FUNCTION "SDL_randf_r"
 "Generate a uniform pseudo-random floating point number less than 1.0

If you want reproducible output, be sure to initialize with SDL_srand()
first.

There are no guarantees as to the quality of the random sequence produced,
and this should not be used for security (cryptography, passwords) or where
money is on the line (loot-boxes, casinos). There are many random number
libraries available with different characteristics and you should pick one
of those to meet any serious needs.

\\param state a pointer to the current random number state, this may not be
             NULL.
\\returns a random value in the range of [0.0, 1.0).

\\threadsafety This function is thread-safe, as long as the state pointer
              isn't shared between threads.

\\since This function is available since SDL 3.2.0.

\\sa SDL_rand_bits_r
\\sa SDL_rand_r
\\sa SDL_randf
")
(:FUNCTION "SDL_rand_bits_r" "Generate 32 pseudo-random bits.

You likely want to use SDL_rand_r() to get a psuedo-random number instead.

There are no guarantees as to the quality of the random sequence produced,
and this should not be used for security (cryptography, passwords) or where
money is on the line (loot-boxes, casinos). There are many random number
libraries available with different characteristics and you should pick one
of those to meet any serious needs.

\\param state a pointer to the current random number state, this may not be
             NULL.
\\returns a random value in the range of [0-SDL_MAX_UINT32].

\\threadsafety This function is thread-safe, as long as the state pointer
              isn't shared between threads.

\\since This function is available since SDL 3.2.0.

\\sa SDL_rand_r
\\sa SDL_randf_r
")
(:FUNCTION "SDL_acos" "Compute the arc cosine of `x`.

The definition of `y = acos(x)` is `x = cos(y)`.

Domain: `-1 <= x <= 1`

Range: `0 <= y <= Pi`

This function operates on double-precision floating point values, use
SDL_acosf for single-precision floats.

This function may use a different approximation across different versions,
platforms and configurations. i.e, it can return a different value given
the same input on different machines or operating systems, or if SDL is
updated.

\\param x floating point value.
\\returns arc cosine of `x`, in radians.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_acosf
\\sa SDL_asin
\\sa SDL_cos
")
(:FUNCTION "SDL_acosf" "Compute the arc cosine of `x`.

The definition of `y = acos(x)` is `x = cos(y)`.

Domain: `-1 <= x <= 1`

Range: `0 <= y <= Pi`

This function operates on single-precision floating point values, use
SDL_acos for double-precision floats.

This function may use a different approximation across different versions,
platforms and configurations. i.e, it can return a different value given
the same input on different machines or operating systems, or if SDL is
updated.

\\param x floating point value.
\\returns arc cosine of `x`, in radians.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_acos
\\sa SDL_asinf
\\sa SDL_cosf
")
(:FUNCTION "SDL_asin" "Compute the arc sine of `x`.

The definition of `y = asin(x)` is `x = sin(y)`.

Domain: `-1 <= x <= 1`

Range: `-Pi/2 <= y <= Pi/2`

This function operates on double-precision floating point values, use
SDL_asinf for single-precision floats.

This function may use a different approximation across different versions,
platforms and configurations. i.e, it can return a different value given
the same input on different machines or operating systems, or if SDL is
updated.

\\param x floating point value.
\\returns arc sine of `x`, in radians.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_asinf
\\sa SDL_acos
\\sa SDL_sin
")
(:FUNCTION "SDL_asinf" "Compute the arc sine of `x`.

The definition of `y = asin(x)` is `x = sin(y)`.

Domain: `-1 <= x <= 1`

Range: `-Pi/2 <= y <= Pi/2`

This function operates on single-precision floating point values, use
SDL_asin for double-precision floats.

This function may use a different approximation across different versions,
platforms and configurations. i.e, it can return a different value given
the same input on different machines or operating systems, or if SDL is
updated.

\\param x floating point value.
\\returns arc sine of `x`, in radians.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_asin
\\sa SDL_acosf
\\sa SDL_sinf
")
(:FUNCTION "SDL_atan" "Compute the arc tangent of `x`.

The definition of `y = atan(x)` is `x = tan(y)`.

Domain: `-INF <= x <= INF`

Range: `-Pi/2 <= y <= Pi/2`

This function operates on double-precision floating point values, use
SDL_atanf for single-precision floats.

To calculate the arc tangent of y / x, use SDL_atan2.

This function may use a different approximation across different versions,
platforms and configurations. i.e, it can return a different value given
the same input on different machines or operating systems, or if SDL is
updated.

\\param x floating point value.
\\returns arc tangent of of `x` in radians, or 0 if `x = 0`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_atanf
\\sa SDL_atan2
\\sa SDL_tan
")
(:FUNCTION "SDL_atanf" "Compute the arc tangent of `x`.

The definition of `y = atan(x)` is `x = tan(y)`.

Domain: `-INF <= x <= INF`

Range: `-Pi/2 <= y <= Pi/2`

This function operates on single-precision floating point values, use
SDL_atan for dboule-precision floats.

To calculate the arc tangent of y / x, use SDL_atan2f.

This function may use a different approximation across different versions,
platforms and configurations. i.e, it can return a different value given
the same input on different machines or operating systems, or if SDL is
updated.

\\param x floating point value.
\\returns arc tangent of of `x` in radians, or 0 if `x = 0`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_atan
\\sa SDL_atan2f
\\sa SDL_tanf
")
(:FUNCTION "SDL_atan2"
 "Compute the arc tangent of `y / x`, using the signs of x and y to adjust
the result's quadrant.

The definition of `z = atan2(x, y)` is `y = x tan(z)`, where the quadrant
of z is determined based on the signs of x and y.

Domain: `-INF <= x <= INF`, `-INF <= y <= INF`

Range: `-Pi/2 <= y <= Pi/2`

This function operates on double-precision floating point values, use
SDL_atan2f for single-precision floats.

To calculate the arc tangent of a single value, use SDL_atan.

This function may use a different approximation across different versions,
platforms and configurations. i.e, it can return a different value given
the same input on different machines or operating systems, or if SDL is
updated.

\\param y floating point value of the numerator (y coordinate).
\\param x floating point value of the denominator (x coordinate).
\\returns arc tangent of of `y / x` in radians, or, if `x = 0`, either
         `-Pi/2`, `0`, or `Pi/2`, depending on the value of `y`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_atan2f
\\sa SDL_atan
\\sa SDL_tan
")
(:FUNCTION "SDL_atan2f"
 "Compute the arc tangent of `y / x`, using the signs of x and y to adjust
the result's quadrant.

The definition of `z = atan2(x, y)` is `y = x tan(z)`, where the quadrant
of z is determined based on the signs of x and y.

Domain: `-INF <= x <= INF`, `-INF <= y <= INF`

Range: `-Pi/2 <= y <= Pi/2`

This function operates on single-precision floating point values, use
SDL_atan2 for double-precision floats.

To calculate the arc tangent of a single value, use SDL_atanf.

This function may use a different approximation across different versions,
platforms and configurations. i.e, it can return a different value given
the same input on different machines or operating systems, or if SDL is
updated.

\\param y floating point value of the numerator (y coordinate).
\\param x floating point value of the denominator (x coordinate).
\\returns arc tangent of of `y / x` in radians, or, if `x = 0`, either
         `-Pi/2`, `0`, or `Pi/2`, depending on the value of `y`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_atan2
\\sa SDL_atan
\\sa SDL_tan
")
(:FUNCTION "SDL_ceil" "Compute the ceiling of `x`.

The ceiling of `x` is the smallest integer `y` such that `y > x`, i.e `x`
rounded up to the nearest integer.

Domain: `-INF <= x <= INF`

Range: `-INF <= y <= INF`, y integer

This function operates on double-precision floating point values, use
SDL_ceilf for single-precision floats.

\\param x floating point value.
\\returns the ceiling of `x`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ceilf
\\sa SDL_floor
\\sa SDL_trunc
\\sa SDL_round
\\sa SDL_lround
")
(:FUNCTION "SDL_ceilf" "Compute the ceiling of `x`.

The ceiling of `x` is the smallest integer `y` such that `y > x`, i.e `x`
rounded up to the nearest integer.

Domain: `-INF <= x <= INF`

Range: `-INF <= y <= INF`, y integer

This function operates on single-precision floating point values, use
SDL_ceil for double-precision floats.

\\param x floating point value.
\\returns the ceiling of `x`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ceil
\\sa SDL_floorf
\\sa SDL_truncf
\\sa SDL_roundf
\\sa SDL_lroundf
")
(:FUNCTION "SDL_copysign" "Copy the sign of one floating-point value to another.

The definition of copysign is that ``copysign(x, y) = abs(x) * sign(y)``.

Domain: `-INF <= x <= INF`, ``-INF <= y <= f``

Range: `-INF <= z <= INF`

This function operates on double-precision floating point values, use
SDL_copysignf for single-precision floats.

\\param x floating point value to use as the magnitude.
\\param y floating point value to use as the sign.
\\returns the floating point value with the sign of y and the magnitude of
         x.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_copysignf
\\sa SDL_fabs
")
(:FUNCTION "SDL_copysignf"
 "Copy the sign of one floating-point value to another.

The definition of copysign is that ``copysign(x, y) = abs(x) * sign(y)``.

Domain: `-INF <= x <= INF`, ``-INF <= y <= f``

Range: `-INF <= z <= INF`

This function operates on single-precision floating point values, use
SDL_copysign for double-precision floats.

\\param x floating point value to use as the magnitude.
\\param y floating point value to use as the sign.
\\returns the floating point value with the sign of y and the magnitude of
         x.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_copysign
\\sa SDL_fabsf
")
(:FUNCTION "SDL_cos" "Compute the cosine of `x`.

Domain: `-INF <= x <= INF`

Range: `-1 <= y <= 1`

This function operates on double-precision floating point values, use
SDL_cosf for single-precision floats.

This function may use a different approximation across different versions,
platforms and configurations. i.e, it can return a different value given
the same input on different machines or operating systems, or if SDL is
updated.

\\param x floating point value, in radians.
\\returns cosine of `x`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_cosf
\\sa SDL_acos
\\sa SDL_sin
")
(:FUNCTION "SDL_cosf" "Compute the cosine of `x`.

Domain: `-INF <= x <= INF`

Range: `-1 <= y <= 1`

This function operates on single-precision floating point values, use
SDL_cos for double-precision floats.

This function may use a different approximation across different versions,
platforms and configurations. i.e, it can return a different value given
the same input on different machines or operating systems, or if SDL is
updated.

\\param x floating point value, in radians.
\\returns cosine of `x`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_cos
\\sa SDL_acosf
\\sa SDL_sinf
")
(:FUNCTION "SDL_exp" "Compute the exponential of `x`.

The definition of `y = exp(x)` is `y = e^x`, where `e` is the base of the
natural logarithm. The inverse is the natural logarithm, SDL_log.

Domain: `-INF <= x <= INF`

Range: `0 <= y <= INF`

The output will overflow if `exp(x)` is too large to be represented.

This function operates on double-precision floating point values, use
SDL_expf for single-precision floats.

This function may use a different approximation across different versions,
platforms and configurations. i.e, it can return a different value given
the same input on different machines or operating systems, or if SDL is
updated.

\\param x floating point value.
\\returns value of `e^x`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_expf
\\sa SDL_log
")
(:FUNCTION "SDL_expf" "Compute the exponential of `x`.

The definition of `y = exp(x)` is `y = e^x`, where `e` is the base of the
natural logarithm. The inverse is the natural logarithm, SDL_logf.

Domain: `-INF <= x <= INF`

Range: `0 <= y <= INF`

The output will overflow if `exp(x)` is too large to be represented.

This function operates on single-precision floating point values, use
SDL_exp for double-precision floats.

This function may use a different approximation across different versions,
platforms and configurations. i.e, it can return a different value given
the same input on different machines or operating systems, or if SDL is
updated.

\\param x floating point value.
\\returns value of `e^x`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_exp
\\sa SDL_logf
")
(:FUNCTION "SDL_fabs" "Compute the absolute value of `x`

Domain: `-INF <= x <= INF`

Range: `0 <= y <= INF`

This function operates on double-precision floating point values, use
SDL_fabsf for single-precision floats.

\\param x floating point value to use as the magnitude.
\\returns the absolute value of `x`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_fabsf
")
(:FUNCTION "SDL_fabsf" "Compute the absolute value of `x`

Domain: `-INF <= x <= INF`

Range: `0 <= y <= INF`

This function operates on single-precision floating point values, use
SDL_fabs for double-precision floats.

\\param x floating point value to use as the magnitude.
\\returns the absolute value of `x`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_fabs
")
(:FUNCTION "SDL_floor" "Compute the floor of `x`.

The floor of `x` is the largest integer `y` such that `y > x`, i.e `x`
rounded down to the nearest integer.

Domain: `-INF <= x <= INF`

Range: `-INF <= y <= INF`, y integer

This function operates on double-precision floating point values, use
SDL_floorf for single-precision floats.

\\param x floating point value.
\\returns the floor of `x`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_floorf
\\sa SDL_ceil
\\sa SDL_trunc
\\sa SDL_round
\\sa SDL_lround
")
(:FUNCTION "SDL_floorf" "Compute the floor of `x`.

The floor of `x` is the largest integer `y` such that `y > x`, i.e `x`
rounded down to the nearest integer.

Domain: `-INF <= x <= INF`

Range: `-INF <= y <= INF`, y integer

This function operates on single-precision floating point values, use
SDL_floor for double-precision floats.

\\param x floating point value.
\\returns the floor of `x`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_floor
\\sa SDL_ceilf
\\sa SDL_truncf
\\sa SDL_roundf
\\sa SDL_lroundf
")
(:FUNCTION "SDL_trunc" "Truncate `x` to an integer.

Rounds `x` to the next closest integer to 0. This is equivalent to removing
the fractional part of `x`, leaving only the integer part.

Domain: `-INF <= x <= INF`

Range: `-INF <= y <= INF`, y integer

This function operates on double-precision floating point values, use
SDL_truncf for single-precision floats.

\\param x floating point value.
\\returns `x` truncated to an integer.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_truncf
\\sa SDL_fmod
\\sa SDL_ceil
\\sa SDL_floor
\\sa SDL_round
\\sa SDL_lround
")
(:FUNCTION "SDL_truncf" "Truncate `x` to an integer.

Rounds `x` to the next closest integer to 0. This is equivalent to removing
the fractional part of `x`, leaving only the integer part.

Domain: `-INF <= x <= INF`

Range: `-INF <= y <= INF`, y integer

This function operates on single-precision floating point values, use
SDL_trunc for double-precision floats.

\\param x floating point value.
\\returns `x` truncated to an integer.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_trunc
\\sa SDL_fmodf
\\sa SDL_ceilf
\\sa SDL_floorf
\\sa SDL_roundf
\\sa SDL_lroundf
")
(:FUNCTION "SDL_fmod" "Return the floating-point remainder of `x / y`

Divides `x` by `y`, and returns the remainder.

Domain: `-INF <= x <= INF`, `-INF <= y <= INF`, `y != 0`

Range: `-y <= z <= y`

This function operates on double-precision floating point values, use
SDL_fmodf for single-precision floats.

\\param x the numerator.
\\param y the denominator. Must not be 0.
\\returns the remainder of `x / y`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_fmodf
\\sa SDL_modf
\\sa SDL_trunc
\\sa SDL_ceil
\\sa SDL_floor
\\sa SDL_round
\\sa SDL_lround
")
(:FUNCTION "SDL_fmodf" "Return the floating-point remainder of `x / y`

Divides `x` by `y`, and returns the remainder.

Domain: `-INF <= x <= INF`, `-INF <= y <= INF`, `y != 0`

Range: `-y <= z <= y`

This function operates on single-precision floating point values, use
SDL_fmod for double-precision floats.

\\param x the numerator.
\\param y the denominator. Must not be 0.
\\returns the remainder of `x / y`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_fmod
\\sa SDL_truncf
\\sa SDL_modff
\\sa SDL_ceilf
\\sa SDL_floorf
\\sa SDL_roundf
\\sa SDL_lroundf
")
(:FUNCTION "SDL_isinf" "Return whether the value is infinity.

\\param x double-precision floating point value.
\\returns non-zero if the value is infinity, 0 otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_isinff
")
(:FUNCTION "SDL_isinff" "Return whether the value is infinity.

\\param x floating point value.
\\returns non-zero if the value is infinity, 0 otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_isinf
")
(:FUNCTION "SDL_isnan" "Return whether the value is NaN.

\\param x double-precision floating point value.
\\returns non-zero if the value is NaN, 0 otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_isnanf
")
(:FUNCTION "SDL_isnanf" "Return whether the value is NaN.

\\param x floating point value.
\\returns non-zero if the value is NaN, 0 otherwise.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_isnan
")
(:FUNCTION "SDL_logf" "Compute the natural logarithm of `x`.

Domain: `0 < x <= INF`

Range: `-INF <= y <= INF`

It is an error for `x` to be less than or equal to 0.

This function operates on single-precision floating point values, use
SDL_log for double-precision floats.

This function may use a different approximation across different versions,
platforms and configurations. i.e, it can return a different value given
the same input on different machines or operating systems, or if SDL is
updated.

\\param x floating point value. Must be greater than 0.
\\returns the natural logarithm of `x`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_log
\\sa SDL_expf
")
(:FUNCTION "SDL_log10" "Compute the base-10 logarithm of `x`.

Domain: `0 < x <= INF`

Range: `-INF <= y <= INF`

It is an error for `x` to be less than or equal to 0.

This function operates on double-precision floating point values, use
SDL_log10f for single-precision floats.

This function may use a different approximation across different versions,
platforms and configurations. i.e, it can return a different value given
the same input on different machines or operating systems, or if SDL is
updated.

\\param x floating point value. Must be greater than 0.
\\returns the logarithm of `x`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_log10f
\\sa SDL_log
\\sa SDL_pow
")
(:FUNCTION "SDL_log10f" "Compute the base-10 logarithm of `x`.

Domain: `0 < x <= INF`

Range: `-INF <= y <= INF`

It is an error for `x` to be less than or equal to 0.

This function operates on single-precision floating point values, use
SDL_log10 for double-precision floats.

This function may use a different approximation across different versions,
platforms and configurations. i.e, it can return a different value given
the same input on different machines or operating systems, or if SDL is
updated.

\\param x floating point value. Must be greater than 0.
\\returns the logarithm of `x`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_log10
\\sa SDL_logf
\\sa SDL_powf
")
(:FUNCTION "SDL_modf" "Split `x` into integer and fractional parts

This function operates on double-precision floating point values, use
SDL_modff for single-precision floats.

\\param x floating point value.
\\param y output pointer to store the integer part of `x`.
\\returns the fractional part of `x`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_modff
\\sa SDL_trunc
\\sa SDL_fmod
")
(:FUNCTION "SDL_modff" "Split `x` into integer and fractional parts

This function operates on single-precision floating point values, use
SDL_modf for double-precision floats.

\\param x floating point value.
\\param y output pointer to store the integer part of `x`.
\\returns the fractional part of `x`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_modf
\\sa SDL_truncf
\\sa SDL_fmodf
")
(:FUNCTION "SDL_pow" "Raise `x` to the power `y`

Domain: `-INF <= x <= INF`, `-INF <= y <= INF`

Range: `-INF <= z <= INF`

If `y` is the base of the natural logarithm (e), consider using SDL_exp
instead.

This function operates on double-precision floating point values, use
SDL_powf for single-precision floats.

This function may use a different approximation across different versions,
platforms and configurations. i.e, it can return a different value given
the same input on different machines or operating systems, or if SDL is
updated.

\\param x the base.
\\param y the exponent.
\\returns `x` raised to the power `y`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_powf
\\sa SDL_exp
\\sa SDL_log
")
(:FUNCTION "SDL_powf" "Raise `x` to the power `y`

Domain: `-INF <= x <= INF`, `-INF <= y <= INF`

Range: `-INF <= z <= INF`

If `y` is the base of the natural logarithm (e), consider using SDL_exp
instead.

This function operates on single-precision floating point values, use
SDL_pow for double-precision floats.

This function may use a different approximation across different versions,
platforms and configurations. i.e, it can return a different value given
the same input on different machines or operating systems, or if SDL is
updated.

\\param x the base.
\\param y the exponent.
\\returns `x` raised to the power `y`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_pow
\\sa SDL_expf
\\sa SDL_logf
")
(:FUNCTION "SDL_round" "Round `x` to the nearest integer.

Rounds `x` to the nearest integer. Values halfway between integers will be
rounded away from zero.

Domain: `-INF <= x <= INF`

Range: `-INF <= y <= INF`, y integer

This function operates on double-precision floating point values, use
SDL_roundf for single-precision floats. To get the result as an integer
type, use SDL_lround.

\\param x floating point value.
\\returns the nearest integer to `x`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_roundf
\\sa SDL_lround
\\sa SDL_floor
\\sa SDL_ceil
\\sa SDL_trunc
")
(:FUNCTION "SDL_roundf" "Round `x` to the nearest integer.

Rounds `x` to the nearest integer. Values halfway between integers will be
rounded away from zero.

Domain: `-INF <= x <= INF`

Range: `-INF <= y <= INF`, y integer

This function operates on single-precision floating point values, use
SDL_round for double-precision floats. To get the result as an integer
type, use SDL_lroundf.

\\param x floating point value.
\\returns the nearest integer to `x`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_round
\\sa SDL_lroundf
\\sa SDL_floorf
\\sa SDL_ceilf
\\sa SDL_truncf
")
(:FUNCTION "SDL_lround"
 "Round `x` to the nearest integer representable as a long

Rounds `x` to the nearest integer. Values halfway between integers will be
rounded away from zero.

Domain: `-INF <= x <= INF`

Range: `MIN_LONG <= y <= MAX_LONG`

This function operates on double-precision floating point values, use
SDL_lroundf for single-precision floats. To get the result as a
floating-point type, use SDL_round.

\\param x floating point value.
\\returns the nearest integer to `x`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_lroundf
\\sa SDL_round
\\sa SDL_floor
\\sa SDL_ceil
\\sa SDL_trunc
")
(:FUNCTION "SDL_lroundf"
 "Round `x` to the nearest integer representable as a long

Rounds `x` to the nearest integer. Values halfway between integers will be
rounded away from zero.

Domain: `-INF <= x <= INF`

Range: `MIN_LONG <= y <= MAX_LONG`

This function operates on single-precision floating point values, use
SDL_lround for double-precision floats. To get the result as a
floating-point type, use SDL_roundf.

\\param x floating point value.
\\returns the nearest integer to `x`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_lround
\\sa SDL_roundf
\\sa SDL_floorf
\\sa SDL_ceilf
\\sa SDL_truncf
")
(:FUNCTION "SDL_scalbn" "Scale `x` by an integer power of two.

Multiplies `x` by the `n`th power of the floating point radix (always 2).

Domain: `-INF <= x <= INF`, `n` integer

Range: `-INF <= y <= INF`

This function operates on double-precision floating point values, use
SDL_scalbnf for single-precision floats.

\\param x floating point value to be scaled.
\\param n integer exponent.
\\returns `x * 2^n`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_scalbnf
\\sa SDL_pow
")
(:FUNCTION "SDL_scalbnf" "Scale `x` by an integer power of two.

Multiplies `x` by the `n`th power of the floating point radix (always 2).

Domain: `-INF <= x <= INF`, `n` integer

Range: `-INF <= y <= INF`

This function operates on single-precision floating point values, use
SDL_scalbn for double-precision floats.

\\param x floating point value to be scaled.
\\param n integer exponent.
\\returns `x * 2^n`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_scalbn
\\sa SDL_powf
")
(:FUNCTION "SDL_sin" "Compute the sine of `x`.

Domain: `-INF <= x <= INF`

Range: `-1 <= y <= 1`

This function operates on double-precision floating point values, use
SDL_sinf for single-precision floats.

This function may use a different approximation across different versions,
platforms and configurations. i.e, it can return a different value given
the same input on different machines or operating systems, or if SDL is
updated.

\\param x floating point value, in radians.
\\returns sine of `x`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_sinf
\\sa SDL_asin
\\sa SDL_cos
")
(:FUNCTION "SDL_sinf" "Compute the sine of `x`.

Domain: `-INF <= x <= INF`

Range: `-1 <= y <= 1`

This function operates on single-precision floating point values, use
SDL_sin for double-precision floats.

This function may use a different approximation across different versions,
platforms and configurations. i.e, it can return a different value given
the same input on different machines or operating systems, or if SDL is
updated.

\\param x floating point value, in radians.
\\returns sine of `x`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_sin
\\sa SDL_asinf
\\sa SDL_cosf
")
(:FUNCTION "SDL_sqrt" "Compute the square root of `x`.

Domain: `0 <= x <= INF`

Range: `0 <= y <= INF`

This function operates on double-precision floating point values, use
SDL_sqrtf for single-precision floats.

This function may use a different approximation across different versions,
platforms and configurations. i.e, it can return a different value given
the same input on different machines or operating systems, or if SDL is
updated.

\\param x floating point value. Must be greater than or equal to 0.
\\returns square root of `x`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_sqrtf
")
(:FUNCTION "SDL_sqrtf" "Compute the square root of `x`.

Domain: `0 <= x <= INF`

Range: `0 <= y <= INF`

This function operates on single-precision floating point values, use
SDL_sqrt for double-precision floats.

This function may use a different approximation across different versions,
platforms and configurations. i.e, it can return a different value given
the same input on different machines or operating systems, or if SDL is
updated.

\\param x floating point value. Must be greater than or equal to 0.
\\returns square root of `x`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_sqrt
")
(:FUNCTION "SDL_tan" "Compute the tangent of `x`.

Domain: `-INF <= x <= INF`

Range: `-INF <= y <= INF`

This function operates on double-precision floating point values, use
SDL_tanf for single-precision floats.

This function may use a different approximation across different versions,
platforms and configurations. i.e, it can return a different value given
the same input on different machines or operating systems, or if SDL is
updated.

\\param x floating point value, in radians.
\\returns tangent of `x`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_tanf
\\sa SDL_sin
\\sa SDL_cos
\\sa SDL_atan
\\sa SDL_atan2
")
(:FUNCTION "SDL_tanf" "Compute the tangent of `x`.

Domain: `-INF <= x <= INF`

Range: `-INF <= y <= INF`

This function operates on single-precision floating point values, use
SDL_tan for double-precision floats.

This function may use a different approximation across different versions,
platforms and configurations. i.e, it can return a different value given
the same input on different machines or operating systems, or if SDL is
updated.

\\param x floating point value, in radians.
\\returns tangent of `x`.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_tan
\\sa SDL_sinf
\\sa SDL_cosf
\\sa SDL_atanf
\\sa SDL_atan2f
")
(:STRUCT "SDL_iconv_data_t"
 "An opaque handle representing string encoding conversion state.

\\since This datatype is available since SDL 3.2.0.

\\sa SDL_iconv_open
")
(:FUNCTION "SDL_iconv_open"
 "This function allocates a context for the specified character set
conversion.

\\param tocode The target character encoding, must not be NULL.
\\param fromcode The source character encoding, must not be NULL.
\\returns a handle that must be freed with SDL_iconv_close, or
         SDL_ICONV_ERROR on failure.

\\since This function is available since SDL 3.2.0.

\\sa SDL_iconv
\\sa SDL_iconv_close
\\sa SDL_iconv_string
")
(:FUNCTION "SDL_iconv_close"
 "This function frees a context used for character set conversion.

\\param cd The character set conversion handle.
\\returns 0 on success, or -1 on failure.

\\since This function is available since SDL 3.2.0.

\\sa SDL_iconv
\\sa SDL_iconv_open
\\sa SDL_iconv_string
")
(:FUNCTION "SDL_iconv"
 "This function converts text between encodings, reading from and writing to
a buffer.

It returns the number of succesful conversions on success. On error,
SDL_ICONV_E2BIG is returned when the output buffer is too small, or
SDL_ICONV_EILSEQ is returned when an invalid input sequence is encountered,
or SDL_ICONV_EINVAL is returned when an incomplete input sequence is
encountered.

On exit:

- inbuf will point to the beginning of the next multibyte sequence. On
  error, this is the location of the problematic input sequence. On
  success, this is the end of the input sequence.
- inbytesleft will be set to the number of bytes left to convert, which
  will be 0 on success.
- outbuf will point to the location where to store the next output byte.
- outbytesleft will be set to the number of bytes left in the output
  buffer.

\\param cd The character set conversion context, created in
          SDL_iconv_open().
\\param inbuf Address of variable that points to the first character of the
             input sequence.
\\param inbytesleft The number of bytes in the input buffer.
\\param outbuf Address of variable that points to the output buffer.
\\param outbytesleft The number of bytes in the output buffer.
\\returns the number of conversions on success, or a negative error code.

\\since This function is available since SDL 3.2.0.

\\sa SDL_iconv_open
\\sa SDL_iconv_close
\\sa SDL_iconv_string
")
(:FUNCTION "SDL_iconv_string"
 "Helper function to convert a string's encoding in one call.

This function converts a buffer or string between encodings in one pass.

The string does not need to be NULL-terminated; this function operates on
the number of bytes specified in `inbytesleft` whether there is a NULL
character anywhere in the buffer.

The returned string is owned by the caller, and should be passed to
SDL_free when no longer needed.

\\param tocode the character encoding of the output string. Examples are
              \"UTF-8\", \"UCS-4\", etc.
\\param fromcode the character encoding of data in `inbuf`.
\\param inbuf the string to convert to a different encoding.
\\param inbytesleft the size of the input string _in bytes_.
\\returns a new string, converted to the new encoding, or NULL on error.

\\since This function is available since SDL 3.2.0.

\\sa SDL_iconv_open
\\sa SDL_iconv_close
\\sa SDL_iconv
")
(:FUNCTION "SDL_iconv_utf8_locale"
 "Convert a UTF-8 string to the current locale's character encoding.

This is a helper macro that might be more clear than calling
SDL_iconv_string directly. However, it double-evaluates its parameter, so
do not use an expression with side-effects here.

\\param S the string to convert.
\\returns a new string, converted to the new encoding, or NULL on error.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_iconv_utf8_ucs2" "Convert a UTF-8 string to UCS-2.

This is a helper macro that might be more clear than calling
SDL_iconv_string directly. However, it double-evaluates its parameter, so
do not use an expression with side-effects here.

\\param S the string to convert.
\\returns a new string, converted to the new encoding, or NULL on error.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_iconv_utf8_ucs4" "Convert a UTF-8 string to UCS-4.

This is a helper macro that might be more clear than calling
SDL_iconv_string directly. However, it double-evaluates its parameter, so
do not use an expression with side-effects here.

\\param S the string to convert.
\\returns a new string, converted to the new encoding, or NULL on error.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_iconv_wchar_utf8" "Convert a wchar_t string to UTF-8.

This is a helper macro that might be more clear than calling
SDL_iconv_string directly. However, it double-evaluates its parameter, so
do not use an expression with side-effects here.

\\param S the string to convert.
\\returns a new string, converted to the new encoding, or NULL on error.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_size_mul_check_overflow"
 "Multiply two integers, checking for overflow.

If `a * b` would overflow, return false.

Otherwise store `a * b` via ret and return true.

\\param a the multiplicand.
\\param b the multiplier.
\\param ret on non-overflow output, stores the multiplication result, may
           not be NULL.
\\returns false on overflow, true if result is multiplied without overflow.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_size_add_check_overflow"
 "Add two integers, checking for overflow.

If `a + b` would overflow, return false.

Otherwise store `a + b` via ret and return true.

\\param a the first addend.
\\param b the second addend.
\\param ret on non-overflow output, stores the addition result, may not be
           NULL.
\\returns false on overflow, true if result is added without overflow.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:STRUCT "SDL_StorageInterface" "Function interface for SDL_Storage.

Apps that want to supply a custom implementation of SDL_Storage will fill
in all the functions in this struct, and then pass it to SDL_OpenStorage to
create a custom SDL_Storage object.

It is not usually necessary to do this; SDL provides standard
implementations for many things you might expect to do with an SDL_Storage.

This structure should be initialized using SDL_INIT_INTERFACE()

\\since This struct is available since SDL 3.2.0.

\\sa SDL_INIT_INTERFACE
")
(:STRUCT "SDL_Storage" "An abstract interface for filesystem access.

This is an opaque datatype. One can create this object using standard SDL
functions like SDL_OpenTitleStorage or SDL_OpenUserStorage, etc, or create
an object with a custom implementation using SDL_OpenStorage.

\\since This struct is available since SDL 3.2.0.
")
(:FUNCTION "SDL_OpenTitleStorage"
 "Opens up a read-only container for the application's filesystem.

\\param override a path to override the backend's default title root.
\\param props a property list that may contain backend-specific information.
\\returns a title storage container on success or NULL on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CloseStorage
\\sa SDL_GetStorageFileSize
\\sa SDL_OpenUserStorage
\\sa SDL_ReadStorageFile
")
(:FUNCTION "SDL_OpenUserStorage"
 "Opens up a container for a user's unique read/write filesystem.

While title storage can generally be kept open throughout runtime, user
storage should only be opened when the client is ready to read/write files.
This allows the backend to properly batch file operations and flush them
when the container has been closed; ensuring safe and optimal save I/O.

\\param org the name of your organization.
\\param app the name of your application.
\\param props a property list that may contain backend-specific information.
\\returns a user storage container on success or NULL on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CloseStorage
\\sa SDL_GetStorageFileSize
\\sa SDL_GetStorageSpaceRemaining
\\sa SDL_OpenTitleStorage
\\sa SDL_ReadStorageFile
\\sa SDL_StorageReady
\\sa SDL_WriteStorageFile
")
(:FUNCTION "SDL_OpenFileStorage"
 "Opens up a container for local filesystem storage.

This is provided for development and tools. Portable applications should
use SDL_OpenTitleStorage() for access to game data and
SDL_OpenUserStorage() for access to user data.

\\param path the base path prepended to all storage paths, or NULL for no
            base path.
\\returns a filesystem storage container on success or NULL on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CloseStorage
\\sa SDL_GetStorageFileSize
\\sa SDL_GetStorageSpaceRemaining
\\sa SDL_OpenTitleStorage
\\sa SDL_OpenUserStorage
\\sa SDL_ReadStorageFile
\\sa SDL_WriteStorageFile
")
(:FUNCTION "SDL_OpenStorage"
 "Opens up a container using a client-provided storage interface.

Applications do not need to use this function unless they are providing
their own SDL_Storage implementation. If you just need an SDL_Storage, you
should use the built-in implementations in SDL, like SDL_OpenTitleStorage()
or SDL_OpenUserStorage().

This function makes a copy of `iface` and the caller does not need to keep
it around after this call.

\\param iface the interface that implements this storage, initialized using
             SDL_INIT_INTERFACE().
\\param userdata the pointer that will be passed to the interface functions.
\\returns a storage container on success or NULL on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CloseStorage
\\sa SDL_GetStorageFileSize
\\sa SDL_GetStorageSpaceRemaining
\\sa SDL_INIT_INTERFACE
\\sa SDL_ReadStorageFile
\\sa SDL_StorageReady
\\sa SDL_WriteStorageFile
")
(:FUNCTION "SDL_CloseStorage" "Closes and frees a storage container.

\\param storage a storage container to close.
\\returns true if the container was freed with no errors, false otherwise;
         call SDL_GetError() for more information. Even if the function
         returns an error, the container data will be freed; the error is
         only for informational purposes.

\\since This function is available since SDL 3.2.0.

\\sa SDL_OpenFileStorage
\\sa SDL_OpenStorage
\\sa SDL_OpenTitleStorage
\\sa SDL_OpenUserStorage
")
(:FUNCTION "SDL_StorageReady" "Checks if the storage container is ready to use.

This function should be called in regular intervals until it returns true -
however, it is not recommended to spinwait on this call, as the backend may
depend on a synchronous message loop.

\\param storage a storage container to query.
\\returns true if the container is ready, false otherwise.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetStorageFileSize"
 "Query the size of a file within a storage container.

\\param storage a storage container to query.
\\param path the relative path of the file to query.
\\param length a pointer to be filled with the file's length.
\\returns true if the file could be queried or false on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ReadStorageFile
\\sa SDL_StorageReady
")
(:FUNCTION "SDL_ReadStorageFile"
 "Synchronously read a file from a storage container into a client-provided
buffer.

The value of `length` must match the length of the file exactly; call
SDL_GetStorageFileSize() to get this value. This behavior may be relaxed in
a future release.

\\param storage a storage container to read from.
\\param path the relative path of the file to read.
\\param destination a client-provided buffer to read the file into.
\\param length the length of the destination buffer.
\\returns true if the file was read or false on failure; call SDL_GetError()
         for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetStorageFileSize
\\sa SDL_StorageReady
\\sa SDL_WriteStorageFile
")
(:FUNCTION "SDL_WriteStorageFile"
 "Synchronously write a file from client memory into a storage container.

\\param storage a storage container to write to.
\\param path the relative path of the file to write.
\\param source a client-provided buffer to write from.
\\param length the length of the source buffer.
\\returns true if the file was written or false on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetStorageSpaceRemaining
\\sa SDL_ReadStorageFile
\\sa SDL_StorageReady
")
(:FUNCTION "SDL_CreateStorageDirectory"
 "Create a directory in a writable storage container.

\\param storage a storage container.
\\param path the path of the directory to create.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_StorageReady
")
(:FUNCTION "SDL_EnumerateStorageDirectory"
 "Enumerate a directory in a storage container through a callback function.

This function provides every directory entry through an app-provided
callback, called once for each directory entry, until all results have been
provided or the callback returns either SDL_ENUM_SUCCESS or
SDL_ENUM_FAILURE.

This will return false if there was a system problem in general, or if a
callback returns SDL_ENUM_FAILURE. A successful return means a callback
returned SDL_ENUM_SUCCESS to halt enumeration, or all directory entries
were enumerated.

If `path` is NULL, this is treated as a request to enumerate the root of
the storage container's tree. An empty string also works for this.

\\param storage a storage container.
\\param path the path of the directory to enumerate, or NULL for the root.
\\param callback a function that is called for each entry in the directory.
\\param userdata a pointer that is passed to `callback`.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_StorageReady
")
(:FUNCTION "SDL_RemoveStoragePath"
 "Remove a file or an empty directory in a writable storage container.

\\param storage a storage container.
\\param path the path of the directory to enumerate.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_StorageReady
")
(:FUNCTION "SDL_RenameStoragePath"
 "Rename a file or directory in a writable storage container.

\\param storage a storage container.
\\param oldpath the old path.
\\param newpath the new path.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_StorageReady
")
(:FUNCTION "SDL_CopyStorageFile" "Copy a file in a writable storage container.

\\param storage a storage container.
\\param oldpath the old path.
\\param newpath the new path.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_StorageReady
")
(:FUNCTION "SDL_GetStoragePathInfo"
 "Get information about a filesystem path in a storage container.

\\param storage a storage container.
\\param path the path to query.
\\param info a pointer filled in with information about the path, or NULL to
            check for the existence of a file.
\\returns true on success or false if the file doesn't exist, or another
         failure; call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_StorageReady
")
(:FUNCTION "SDL_GetStorageSpaceRemaining"
 "Queries the remaining space in a storage container.

\\param storage a storage container to query.
\\returns the amount of remaining space, in bytes.

\\since This function is available since SDL 3.2.0.

\\sa SDL_StorageReady
\\sa SDL_WriteStorageFile
")
(:FUNCTION "SDL_GlobStorageDirectory"
 "Enumerate a directory tree, filtered by pattern, and return a list.

Files are filtered out if they don't match the string in `pattern`, which
may contain wildcard characters `*` (match everything) and `?` (match one
character). If pattern is NULL, no filtering is done and all results are
returned. Subdirectories are permitted, and are specified with a path
separator of '/'. Wildcard characters `*` and `?` never match a path
separator.

`flags` may be set to SDL_GLOB_CASEINSENSITIVE to make the pattern matching
case-insensitive.

The returned array is always NULL-terminated, for your iterating
convenience, but if `count` is non-NULL, on return it will contain the
number of items in the array, not counting the NULL terminator.

If `path` is NULL, this is treated as a request to enumerate the root of
the storage container's tree. An empty string also works for this.

\\param storage a storage container.
\\param path the path of the directory to enumerate, or NULL for the root.
\\param pattern the pattern that files in the directory must match. Can be
               NULL.
\\param flags `SDL_GLOB_*` bitflags that affect this search.
\\param count on return, will be set to the number of items in the returned
             array. Can be NULL.
\\returns an array of strings on success or NULL on failure; call
         SDL_GetError() for more information. The caller should pass the
         returned pointer to SDL_free when done with it. This is a single
         allocation that should be freed with SDL_free() when it is no
         longer needed.

\\threadsafety It is safe to call this function from any thread, assuming
              the `storage` object is thread-safe.

\\since This function is available since SDL 3.2.0.
")
(:BITFIELD "SDL_SurfaceFlags" "The flags on an SDL_Surface.

These are generally considered read-only.

\\since This datatype is available since SDL 3.2.0.
")
(:FUNCTION "SDL_MUSTLOCK"
 "Evaluates to true if the surface needs to be locked before access.

\\since This macro is available since SDL 3.2.0.
")
(:ENUM "SDL_ScaleMode" "The scaling mode.

\\since This enum is available since SDL 3.2.0.
")
(:ENUM "SDL_FlipMode" "The flip mode.

\\since This enum is available since SDL 3.2.0.
")
(:STRUCT "SDL_Surface" "A collection of pixels used in software blitting.

Pixels are arranged in memory in rows, with the top row first. Each row
occupies an amount of memory given by the pitch (sometimes known as the row
stride in non-SDL APIs).

Within each row, pixels are arranged from left to right until the width is
reached. Each pixel occupies a number of bits appropriate for its format,
with most formats representing each pixel as one or more whole bytes (in
some indexed formats, instead multiple pixels are packed into each byte),
and a byte order given by the format. After encoding all pixels, any
remaining bytes to reach the pitch are used as padding to reach a desired
alignment, and have undefined contents.

When a surface holds YUV format data, the planes are assumed to be
contiguous without padding between them, e.g. a 32x32 surface in NV12
format with a pitch of 32 would consist of 32x32 bytes of Y plane followed
by 32x16 bytes of UV plane.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_CreateSurface
\\sa SDL_DestroySurface
")
(:FUNCTION "SDL_CreateSurface"
 "Allocate a new surface with a specific pixel format.

The pixels of the new surface are initialized to zero.

\\param width the width of the surface.
\\param height the height of the surface.
\\param format the SDL_PixelFormat for the new surface's pixel format.
\\returns the new SDL_Surface structure that is created or NULL on failure;
         call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateSurfaceFrom
\\sa SDL_DestroySurface
")
(:FUNCTION "SDL_CreateSurfaceFrom"
 "Allocate a new surface with a specific pixel format and existing pixel
data.

No copy is made of the pixel data. Pixel data is not managed automatically;
you must free the surface before you free the pixel data.

Pitch is the offset in bytes from one row of pixels to the next, e.g.
`width*4` for `SDL_PIXELFORMAT_RGBA8888`.

You may pass NULL for pixels and 0 for pitch to create a surface that you
will fill in with valid values later.

\\param width the width of the surface.
\\param height the height of the surface.
\\param format the SDL_PixelFormat for the new surface's pixel format.
\\param pixels a pointer to existing pixel data.
\\param pitch the number of bytes between each row, including padding.
\\returns the new SDL_Surface structure that is created or NULL on failure;
         call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateSurface
\\sa SDL_DestroySurface
")
(:FUNCTION "SDL_DestroySurface" "Free a surface.

It is safe to pass NULL to this function.

\\param surface the SDL_Surface to free.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateSurface
\\sa SDL_CreateSurfaceFrom
")
(:FUNCTION "SDL_GetSurfaceProperties"
 "Get the properties associated with a surface.

The following properties are understood by SDL:

- `SDL_PROP_SURFACE_SDR_WHITE_POINT_FLOAT`: for HDR10 and floating point
  surfaces, this defines the value of 100% diffuse white, with higher
  values being displayed in the High Dynamic Range headroom. This defaults
  to 203 for HDR10 surfaces and 1.0 for floating point surfaces.
- `SDL_PROP_SURFACE_HDR_HEADROOM_FLOAT`: for HDR10 and floating point
  surfaces, this defines the maximum dynamic range used by the content, in
  terms of the SDR white point. This defaults to 0.0, which disables tone
  mapping.
- `SDL_PROP_SURFACE_TONEMAP_OPERATOR_STRING`: the tone mapping operator
  used when compressing from a surface with high dynamic range to another
  with lower dynamic range. Currently this supports \"chrome\", which uses
  the same tone mapping that Chrome uses for HDR content, the form \"*=N\",
  where N is a floating point scale factor applied in linear space, and
  \"none\", which disables tone mapping. This defaults to \"chrome\".

\\param surface the SDL_Surface structure to query.
\\returns a valid property ID on success or 0 on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SetSurfaceColorspace" "Set the colorspace used by a surface.

Setting the colorspace doesn't change the pixels, only how they are
interpreted in color operations.

\\param surface the SDL_Surface structure to update.
\\param colorspace an SDL_Colorspace value describing the surface
                  colorspace.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetSurfaceColorspace
")
(:FUNCTION "SDL_GetSurfaceColorspace" "Get the colorspace used by a surface.

The colorspace defaults to SDL_COLORSPACE_SRGB_LINEAR for floating point
formats, SDL_COLORSPACE_HDR10 for 10-bit formats, SDL_COLORSPACE_SRGB for
other RGB surfaces and SDL_COLORSPACE_BT709_FULL for YUV textures.

\\param surface the SDL_Surface structure to query.
\\returns the colorspace used by the surface, or SDL_COLORSPACE_UNKNOWN if
         the surface is NULL.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetSurfaceColorspace
")
(:FUNCTION "SDL_CreateSurfacePalette"
 "Create a palette and associate it with a surface.

This function creates a palette compatible with the provided surface. The
palette is then returned for you to modify, and the surface will
automatically use the new palette in future operations. You do not need to
destroy the returned palette, it will be freed when the reference count
reaches 0, usually when the surface is destroyed.

Bitmap surfaces (with format SDL_PIXELFORMAT_INDEX1LSB or
SDL_PIXELFORMAT_INDEX1MSB) will have the palette initialized with 0 as
white and 1 as black. Other surfaces will get a palette initialized with
white in every entry.

If this function is called for a surface that already has a palette, a new
palette will be created to replace it.

\\param surface the SDL_Surface structure to update.
\\returns a new SDL_Palette structure on success or NULL on failure (e.g. if
         the surface didn't have an index format); call SDL_GetError() for
         more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetPaletteColors
")
(:FUNCTION "SDL_SetSurfacePalette" "Set the palette used by a surface.

A single palette can be shared with many surfaces.

\\param surface the SDL_Surface structure to update.
\\param palette the SDL_Palette structure to use.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreatePalette
\\sa SDL_GetSurfacePalette
")
(:FUNCTION "SDL_GetSurfacePalette" "Get the palette used by a surface.

\\param surface the SDL_Surface structure to query.
\\returns a pointer to the palette used by the surface, or NULL if there is
         no palette used.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetSurfacePalette
")
(:FUNCTION "SDL_AddSurfaceAlternateImage"
 "Add an alternate version of a surface.

This function adds an alternate version of this surface, usually used for
content with high DPI representations like cursors or icons. The size,
format, and content do not need to match the original surface, and these
alternate versions will not be updated when the original surface changes.

This function adds a reference to the alternate version, so you should call
SDL_DestroySurface() on the image after this call.

\\param surface the SDL_Surface structure to update.
\\param image a pointer to an alternate SDL_Surface to associate with this
             surface.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RemoveSurfaceAlternateImages
\\sa SDL_GetSurfaceImages
\\sa SDL_SurfaceHasAlternateImages
")
(:FUNCTION "SDL_SurfaceHasAlternateImages"
 "Return whether a surface has alternate versions available.

\\param surface the SDL_Surface structure to query.
\\returns true if alternate versions are available or false otherwise.

\\since This function is available since SDL 3.2.0.

\\sa SDL_AddSurfaceAlternateImage
\\sa SDL_RemoveSurfaceAlternateImages
\\sa SDL_GetSurfaceImages
")
(:FUNCTION "SDL_GetSurfaceImages"
 "Get an array including all versions of a surface.

This returns all versions of a surface, with the surface being queried as
the first element in the returned array.

Freeing the array of surfaces does not affect the surfaces in the array.
They are still referenced by the surface being queried and will be cleaned
up normally.

\\param surface the SDL_Surface structure to query.
\\param count a pointer filled in with the number of surface pointers
             returned, may be NULL.
\\returns a NULL terminated array of SDL_Surface pointers or NULL on
         failure; call SDL_GetError() for more information. This should be
         freed with SDL_free() when it is no longer needed.

\\since This function is available since SDL 3.2.0.

\\sa SDL_AddSurfaceAlternateImage
\\sa SDL_RemoveSurfaceAlternateImages
\\sa SDL_SurfaceHasAlternateImages
")
(:FUNCTION "SDL_RemoveSurfaceAlternateImages"
 "Remove all alternate versions of a surface.

This function removes a reference from all the alternative versions,
destroying them if this is the last reference to them.

\\param surface the SDL_Surface structure to update.

\\since This function is available since SDL 3.2.0.

\\sa SDL_AddSurfaceAlternateImage
\\sa SDL_GetSurfaceImages
\\sa SDL_SurfaceHasAlternateImages
")
(:FUNCTION "SDL_LockSurface"
 "Set up a surface for directly accessing the pixels.

Between calls to SDL_LockSurface() / SDL_UnlockSurface(), you can write to
and read from `surface->pixels`, using the pixel format stored in
`surface->format`. Once you are done accessing the surface, you should use
SDL_UnlockSurface() to release it.

Not all surfaces require locking. If `SDL_MUSTLOCK(surface)` evaluates to
0, then you can read and write to the surface at any time, and the pixel
format of the surface will not change.

\\param surface the SDL_Surface structure to be locked.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_MUSTLOCK
\\sa SDL_UnlockSurface
")
(:FUNCTION "SDL_UnlockSurface"
 "Release a surface after directly accessing the pixels.

\\param surface the SDL_Surface structure to be unlocked.

\\since This function is available since SDL 3.2.0.

\\sa SDL_LockSurface
")
(:FUNCTION "SDL_LoadBMP_IO" "Load a BMP image from a seekable SDL data stream.

The new surface should be freed with SDL_DestroySurface(). Not doing so
will result in a memory leak.

\\param src the data stream for the surface.
\\param closeio if true, calls SDL_CloseIO() on `src` before returning, even
               in the case of an error.
\\returns a pointer to a new SDL_Surface structure or NULL on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_DestroySurface
\\sa SDL_LoadBMP
\\sa SDL_SaveBMP_IO
")
(:FUNCTION "SDL_LoadBMP" "Load a BMP image from a file.

The new surface should be freed with SDL_DestroySurface(). Not doing so
will result in a memory leak.

\\param file the BMP file to load.
\\returns a pointer to a new SDL_Surface structure or NULL on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_DestroySurface
\\sa SDL_LoadBMP_IO
\\sa SDL_SaveBMP
")
(:FUNCTION "SDL_SaveBMP_IO"
 "Save a surface to a seekable SDL data stream in BMP format.

Surfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the
BMP directly. Other RGB formats with 8-bit or higher get converted to a
24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit
surface before they are saved. YUV and paletted 1-bit and 4-bit formats are
not supported.

\\param surface the SDL_Surface structure containing the image to be saved.
\\param dst a data stream to save to.
\\param closeio if true, calls SDL_CloseIO() on `dst` before returning, even
               in the case of an error.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_LoadBMP_IO
\\sa SDL_SaveBMP
")
(:FUNCTION "SDL_SaveBMP" "Save a surface to a file.

Surfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the
BMP directly. Other RGB formats with 8-bit or higher get converted to a
24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit
surface before they are saved. YUV and paletted 1-bit and 4-bit formats are
not supported.

\\param surface the SDL_Surface structure containing the image to be saved.
\\param file a file to save to.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_LoadBMP
\\sa SDL_SaveBMP_IO
")
(:FUNCTION "SDL_SetSurfaceRLE" "Set the RLE acceleration hint for a surface.

If RLE is enabled, color key and alpha blending blits are much faster, but
the surface must be locked before directly accessing the pixels.

\\param surface the SDL_Surface structure to optimize.
\\param enabled true to enable RLE acceleration, false to disable it.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_BlitSurface
\\sa SDL_LockSurface
\\sa SDL_UnlockSurface
")
(:FUNCTION "SDL_SurfaceHasRLE" "Returns whether the surface is RLE enabled.

It is safe to pass a NULL `surface` here; it will return false.

\\param surface the SDL_Surface structure to query.
\\returns true if the surface is RLE enabled, false otherwise.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetSurfaceRLE
")
(:FUNCTION "SDL_SetSurfaceColorKey"
 "Set the color key (transparent pixel) in a surface.

The color key defines a pixel value that will be treated as transparent in
a blit. For example, one can use this to specify that cyan pixels should be
considered transparent, and therefore not rendered.

It is a pixel of the format used by the surface, as generated by
SDL_MapRGB().

\\param surface the SDL_Surface structure to update.
\\param enabled true to enable color key, false to disable color key.
\\param key the transparent pixel.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetSurfaceColorKey
\\sa SDL_SetSurfaceRLE
\\sa SDL_SurfaceHasColorKey
")
(:FUNCTION "SDL_SurfaceHasColorKey"
 "Returns whether the surface has a color key.

It is safe to pass a NULL `surface` here; it will return false.

\\param surface the SDL_Surface structure to query.
\\returns true if the surface has a color key, false otherwise.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetSurfaceColorKey
\\sa SDL_GetSurfaceColorKey
")
(:FUNCTION "SDL_GetSurfaceColorKey"
 "Get the color key (transparent pixel) for a surface.

The color key is a pixel of the format used by the surface, as generated by
SDL_MapRGB().

If the surface doesn't have color key enabled this function returns false.

\\param surface the SDL_Surface structure to query.
\\param key a pointer filled in with the transparent pixel.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetSurfaceColorKey
\\sa SDL_SurfaceHasColorKey
")
(:FUNCTION "SDL_SetSurfaceColorMod"
 "Set an additional color value multiplied into blit operations.

When this surface is blitted, during the blit operation each source color
channel is modulated by the appropriate color value according to the
following formula:

`srcC = srcC * (color / 255)`

\\param surface the SDL_Surface structure to update.
\\param r the red color value multiplied into blit operations.
\\param g the green color value multiplied into blit operations.
\\param b the blue color value multiplied into blit operations.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetSurfaceColorMod
\\sa SDL_SetSurfaceAlphaMod
")
(:FUNCTION "SDL_GetSurfaceColorMod"
 "Get the additional color value multiplied into blit operations.

\\param surface the SDL_Surface structure to query.
\\param r a pointer filled in with the current red color value.
\\param g a pointer filled in with the current green color value.
\\param b a pointer filled in with the current blue color value.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetSurfaceAlphaMod
\\sa SDL_SetSurfaceColorMod
")
(:FUNCTION "SDL_SetSurfaceAlphaMod"
 "Set an additional alpha value used in blit operations.

When this surface is blitted, during the blit operation the source alpha
value is modulated by this alpha value according to the following formula:

`srcA = srcA * (alpha / 255)`

\\param surface the SDL_Surface structure to update.
\\param alpha the alpha value multiplied into blit operations.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetSurfaceAlphaMod
\\sa SDL_SetSurfaceColorMod
")
(:FUNCTION "SDL_GetSurfaceAlphaMod"
 "Get the additional alpha value used in blit operations.

\\param surface the SDL_Surface structure to query.
\\param alpha a pointer filled in with the current alpha value.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetSurfaceColorMod
\\sa SDL_SetSurfaceAlphaMod
")
(:FUNCTION "SDL_SetSurfaceBlendMode"
 "Set the blend mode used for blit operations.

To copy a surface to another surface (or texture) without blending with the
existing data, the blendmode of the SOURCE surface should be set to
`SDL_BLENDMODE_NONE`.

\\param surface the SDL_Surface structure to update.
\\param blendMode the SDL_BlendMode to use for blit blending.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetSurfaceBlendMode
")
(:FUNCTION "SDL_GetSurfaceBlendMode"
 "Get the blend mode used for blit operations.

\\param surface the SDL_Surface structure to query.
\\param blendMode a pointer filled in with the current SDL_BlendMode.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetSurfaceBlendMode
")
(:FUNCTION "SDL_SetSurfaceClipRect" "Set the clipping rectangle for a surface.

When `surface` is the destination of a blit, only the area within the clip
rectangle is drawn into.

Note that blits are automatically clipped to the edges of the source and
destination surfaces.

\\param surface the SDL_Surface structure to be clipped.
\\param rect the SDL_Rect structure representing the clipping rectangle, or
            NULL to disable clipping.
\\returns true if the rectangle intersects the surface, otherwise false and
         blits will be completely clipped.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetSurfaceClipRect
")
(:FUNCTION "SDL_GetSurfaceClipRect" "Get the clipping rectangle for a surface.

When `surface` is the destination of a blit, only the area within the clip
rectangle is drawn into.

\\param surface the SDL_Surface structure representing the surface to be
               clipped.
\\param rect an SDL_Rect structure filled in with the clipping rectangle for
            the surface.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetSurfaceClipRect
")
(:FUNCTION "SDL_FlipSurface" "Flip a surface vertically or horizontally.

\\param surface the surface to flip.
\\param flip the direction to flip.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_DuplicateSurface"
 "Creates a new surface identical to the existing surface.

If the original surface has alternate images, the new surface will have a
reference to them as well.

The returned surface should be freed with SDL_DestroySurface().

\\param surface the surface to duplicate.
\\returns a copy of the surface or NULL on failure; call SDL_GetError() for
         more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_DestroySurface
")
(:FUNCTION "SDL_ScaleSurface"
 "Creates a new surface identical to the existing surface, scaled to the
desired size.

The returned surface should be freed with SDL_DestroySurface().

\\param surface the surface to duplicate and scale.
\\param width the width of the new surface.
\\param height the height of the new surface.
\\param scaleMode the SDL_ScaleMode to be used.
\\returns a copy of the surface or NULL on failure; call SDL_GetError() for
         more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_DestroySurface
")
(:FUNCTION "SDL_ConvertSurface"
 "Copy an existing surface to a new surface of the specified format.

This function is used to optimize images for faster *repeat* blitting. This
is accomplished by converting the original and storing the result as a new
surface. The new, optimized surface can then be used as the source for
future blits, making them faster.

If you are converting to an indexed surface and want to map colors to a
palette, you can use SDL_ConvertSurfaceAndColorspace() instead.

If the original surface has alternate images, the new surface will have a
reference to them as well.

\\param surface the existing SDL_Surface structure to convert.
\\param format the new pixel format.
\\returns the new SDL_Surface structure that is created or NULL on failure;
         call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ConvertSurfaceAndColorspace
\\sa SDL_DestroySurface
")
(:FUNCTION "SDL_ConvertSurfaceAndColorspace"
 "Copy an existing surface to a new surface of the specified format and
colorspace.

This function converts an existing surface to a new format and colorspace
and returns the new surface. This will perform any pixel format and
colorspace conversion needed.

If the original surface has alternate images, the new surface will have a
reference to them as well.

\\param surface the existing SDL_Surface structure to convert.
\\param format the new pixel format.
\\param palette an optional palette to use for indexed formats, may be NULL.
\\param colorspace the new colorspace.
\\param props an SDL_PropertiesID with additional color properties, or 0.
\\returns the new SDL_Surface structure that is created or NULL on failure;
         call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ConvertSurface
\\sa SDL_DestroySurface
")
(:FUNCTION "SDL_ConvertPixels"
 "Copy a block of pixels of one format to another format.

\\param width the width of the block to copy, in pixels.
\\param height the height of the block to copy, in pixels.
\\param src_format an SDL_PixelFormat value of the `src` pixels format.
\\param src a pointer to the source pixels.
\\param src_pitch the pitch of the source pixels, in bytes.
\\param dst_format an SDL_PixelFormat value of the `dst` pixels format.
\\param dst a pointer to be filled in with new pixel data.
\\param dst_pitch the pitch of the destination pixels, in bytes.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ConvertPixelsAndColorspace
")
(:FUNCTION "SDL_ConvertPixelsAndColorspace"
 "Copy a block of pixels of one format and colorspace to another format and
colorspace.

\\param width the width of the block to copy, in pixels.
\\param height the height of the block to copy, in pixels.
\\param src_format an SDL_PixelFormat value of the `src` pixels format.
\\param src_colorspace an SDL_Colorspace value describing the colorspace of
                      the `src` pixels.
\\param src_properties an SDL_PropertiesID with additional source color
                      properties, or 0.
\\param src a pointer to the source pixels.
\\param src_pitch the pitch of the source pixels, in bytes.
\\param dst_format an SDL_PixelFormat value of the `dst` pixels format.
\\param dst_colorspace an SDL_Colorspace value describing the colorspace of
                      the `dst` pixels.
\\param dst_properties an SDL_PropertiesID with additional destination color
                      properties, or 0.
\\param dst a pointer to be filled in with new pixel data.
\\param dst_pitch the pitch of the destination pixels, in bytes.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ConvertPixels
")
(:FUNCTION "SDL_PremultiplyAlpha" "Premultiply the alpha on a block of pixels.

This is safe to use with src == dst, but not for other overlapping areas.

\\param width the width of the block to convert, in pixels.
\\param height the height of the block to convert, in pixels.
\\param src_format an SDL_PixelFormat value of the `src` pixels format.
\\param src a pointer to the source pixels.
\\param src_pitch the pitch of the source pixels, in bytes.
\\param dst_format an SDL_PixelFormat value of the `dst` pixels format.
\\param dst a pointer to be filled in with premultiplied pixel data.
\\param dst_pitch the pitch of the destination pixels, in bytes.
\\param linear true to convert from sRGB to linear space for the alpha
              multiplication, false to do multiplication in sRGB space.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_PremultiplySurfaceAlpha" "Premultiply the alpha in a surface.

This is safe to use with src == dst, but not for other overlapping areas.

\\param surface the surface to modify.
\\param linear true to convert from sRGB to linear space for the alpha
              multiplication, false to do multiplication in sRGB space.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ClearSurface"
 "Clear a surface with a specific color, with floating point precision.

This function handles all surface formats, and ignores any clip rectangle.

If the surface is YUV, the color is assumed to be in the sRGB colorspace,
otherwise the color is assumed to be in the colorspace of the suface.

\\param surface the SDL_Surface to clear.
\\param r the red component of the pixel, normally in the range 0-1.
\\param g the green component of the pixel, normally in the range 0-1.
\\param b the blue component of the pixel, normally in the range 0-1.
\\param a the alpha component of the pixel, normally in the range 0-1.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_FillSurfaceRect"
 "Perform a fast fill of a rectangle with a specific color.

`color` should be a pixel of the format used by the surface, and can be
generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an
alpha component then the destination is simply filled with that alpha
information, no blending takes place.

If there is a clip rectangle set on the destination (set via
SDL_SetSurfaceClipRect()), then this function will fill based on the
intersection of the clip rectangle and `rect`.

\\param dst the SDL_Surface structure that is the drawing target.
\\param rect the SDL_Rect structure representing the rectangle to fill, or
            NULL to fill the entire surface.
\\param color the color to fill with.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_FillSurfaceRects
")
(:FUNCTION "SDL_FillSurfaceRects"
 "Perform a fast fill of a set of rectangles with a specific color.

`color` should be a pixel of the format used by the surface, and can be
generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an
alpha component then the destination is simply filled with that alpha
information, no blending takes place.

If there is a clip rectangle set on the destination (set via
SDL_SetSurfaceClipRect()), then this function will fill based on the
intersection of the clip rectangle and `rect`.

\\param dst the SDL_Surface structure that is the drawing target.
\\param rects an array of SDL_Rects representing the rectangles to fill.
\\param count the number of rectangles in the array.
\\param color the color to fill with.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_FillSurfaceRect
")
(:FUNCTION "SDL_BlitSurface"
 "Performs a fast blit from the source surface to the destination surface
with clipping.

If either `srcrect` or `dstrect` are NULL, the entire surface (`src` or
`dst`) is copied while ensuring clipping to `dst->clip_rect`.

The final blit rectangles are saved in `srcrect` and `dstrect` after all
clipping is performed.

The blit function should not be called on a locked surface.

The blit semantics for surfaces with and without blending and colorkey are
defined as follows:

```
   RGBA->RGB:
     Source surface blend mode set to SDL_BLENDMODE_BLEND:
      alpha-blend (using the source alpha-channel and per-surface alpha)
      SDL_SRCCOLORKEY ignored.
    Source surface blend mode set to SDL_BLENDMODE_NONE:
      copy RGB.
      if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
      RGB values of the source color key, ignoring alpha in the
      comparison.

  RGB->RGBA:
    Source surface blend mode set to SDL_BLENDMODE_BLEND:
      alpha-blend (using the source per-surface alpha)
    Source surface blend mode set to SDL_BLENDMODE_NONE:
      copy RGB, set destination alpha to source per-surface alpha value.
    both:
      if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
      source color key.

  RGBA->RGBA:
    Source surface blend mode set to SDL_BLENDMODE_BLEND:
      alpha-blend (using the source alpha-channel and per-surface alpha)
      SDL_SRCCOLORKEY ignored.
    Source surface blend mode set to SDL_BLENDMODE_NONE:
      copy all of RGBA to the destination.
      if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
      RGB values of the source color key, ignoring alpha in the
      comparison.

  RGB->RGB:
    Source surface blend mode set to SDL_BLENDMODE_BLEND:
      alpha-blend (using the source per-surface alpha)
    Source surface blend mode set to SDL_BLENDMODE_NONE:
      copy RGB.
    both:
      if SDL_SRCCOLORKEY set, only copy the pixels that do not match the
      source color key.
```

\\param src the SDL_Surface structure to be copied from.
\\param srcrect the SDL_Rect structure representing the rectangle to be
               copied, or NULL to copy the entire surface.
\\param dst the SDL_Surface structure that is the blit target.
\\param dstrect the SDL_Rect structure representing the x and y position in
               the destination surface, or NULL for (0,0). The width and
               height are ignored, and are copied from `srcrect`. If you
               want a specific width and height, you should use
               SDL_BlitSurfaceScaled().
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety The same destination surface should not be used from two
              threads at once. It is safe to use the same source surface
              from multiple threads.

\\since This function is available since SDL 3.2.0.

\\sa SDL_BlitSurfaceScaled
")
(:FUNCTION "SDL_BlitSurfaceUnchecked" "Perform low-level surface blitting only.

This is a semi-private blit function and it performs low-level surface
blitting, assuming the input rectangles have already been clipped.

\\param src the SDL_Surface structure to be copied from.
\\param srcrect the SDL_Rect structure representing the rectangle to be
               copied, may not be NULL.
\\param dst the SDL_Surface structure that is the blit target.
\\param dstrect the SDL_Rect structure representing the target rectangle in
               the destination surface, may not be NULL.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety The same destination surface should not be used from two
              threads at once. It is safe to use the same source surface
              from multiple threads.

\\since This function is available since SDL 3.2.0.

\\sa SDL_BlitSurface
")
(:FUNCTION "SDL_BlitSurfaceScaled"
 "Perform a scaled blit to a destination surface, which may be of a different
format.

\\param src the SDL_Surface structure to be copied from.
\\param srcrect the SDL_Rect structure representing the rectangle to be
               copied, or NULL to copy the entire surface.
\\param dst the SDL_Surface structure that is the blit target.
\\param dstrect the SDL_Rect structure representing the target rectangle in
               the destination surface, or NULL to fill the entire
               destination surface.
\\param scaleMode the SDL_ScaleMode to be used.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety The same destination surface should not be used from two
              threads at once. It is safe to use the same source surface
              from multiple threads.

\\since This function is available since SDL 3.2.0.

\\sa SDL_BlitSurface
")
(:FUNCTION "SDL_BlitSurfaceUncheckedScaled"
 "Perform low-level surface scaled blitting only.

This is a semi-private function and it performs low-level surface blitting,
assuming the input rectangles have already been clipped.

\\param src the SDL_Surface structure to be copied from.
\\param srcrect the SDL_Rect structure representing the rectangle to be
               copied, may not be NULL.
\\param dst the SDL_Surface structure that is the blit target.
\\param dstrect the SDL_Rect structure representing the target rectangle in
               the destination surface, may not be NULL.
\\param scaleMode the SDL_ScaleMode to be used.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety The same destination surface should not be used from two
              threads at once. It is safe to use the same source surface
              from multiple threads.

\\since This function is available since SDL 3.2.0.

\\sa SDL_BlitSurfaceScaled
")
(:FUNCTION "SDL_StretchSurface"
 "Perform a stretched pixel copy from one surface to another.

\\param src the SDL_Surface structure to be copied from.
\\param srcrect the SDL_Rect structure representing the rectangle to be
               copied, may not be NULL.
\\param dst the SDL_Surface structure that is the blit target.
\\param dstrect the SDL_Rect structure representing the target rectangle in
               the destination surface, may not be NULL.
\\param scaleMode the SDL_ScaleMode to be used.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety The same destination surface should not be used from two
              threads at once. It is safe to use the same source surface
              from multiple threads.

\\since This function is available since SDL 3.4.0.

\\sa SDL_BlitSurfaceScaled
")
(:FUNCTION "SDL_BlitSurfaceTiled"
 "Perform a tiled blit to a destination surface, which may be of a different
format.

The pixels in `srcrect` will be repeated as many times as needed to
completely fill `dstrect`.

\\param src the SDL_Surface structure to be copied from.
\\param srcrect the SDL_Rect structure representing the rectangle to be
               copied, or NULL to copy the entire surface.
\\param dst the SDL_Surface structure that is the blit target.
\\param dstrect the SDL_Rect structure representing the target rectangle in
               the destination surface, or NULL to fill the entire surface.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety The same destination surface should not be used from two
              threads at once. It is safe to use the same source surface
              from multiple threads.

\\since This function is available since SDL 3.2.0.

\\sa SDL_BlitSurface
")
(:FUNCTION "SDL_BlitSurfaceTiledWithScale"
 "Perform a scaled and tiled blit to a destination surface, which may be of a
different format.

The pixels in `srcrect` will be scaled and repeated as many times as needed
to completely fill `dstrect`.

\\param src the SDL_Surface structure to be copied from.
\\param srcrect the SDL_Rect structure representing the rectangle to be
               copied, or NULL to copy the entire surface.
\\param scale the scale used to transform srcrect into the destination
             rectangle, e.g. a 32x32 texture with a scale of 2 would fill
             64x64 tiles.
\\param scaleMode scale algorithm to be used.
\\param dst the SDL_Surface structure that is the blit target.
\\param dstrect the SDL_Rect structure representing the target rectangle in
               the destination surface, or NULL to fill the entire surface.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety The same destination surface should not be used from two
              threads at once. It is safe to use the same source surface
              from multiple threads.

\\since This function is available since SDL 3.2.0.

\\sa SDL_BlitSurface
")
(:FUNCTION "SDL_BlitSurface9Grid"
 "Perform a scaled blit using the 9-grid algorithm to a destination surface,
which may be of a different format.

The pixels in the source surface are split into a 3x3 grid, using the
different corner sizes for each corner, and the sides and center making up
the remaining pixels. The corners are then scaled using `scale` and fit
into the corners of the destination rectangle. The sides and center are
then stretched into place to cover the remaining destination rectangle.

\\param src the SDL_Surface structure to be copied from.
\\param srcrect the SDL_Rect structure representing the rectangle to be used
               for the 9-grid, or NULL to use the entire surface.
\\param left_width the width, in pixels, of the left corners in `srcrect`.
\\param right_width the width, in pixels, of the right corners in `srcrect`.
\\param top_height the height, in pixels, of the top corners in `srcrect`.
\\param bottom_height the height, in pixels, of the bottom corners in
                     `srcrect`.
\\param scale the scale used to transform the corner of `srcrect` into the
             corner of `dstrect`, or 0.0f for an unscaled blit.
\\param scaleMode scale algorithm to be used.
\\param dst the SDL_Surface structure that is the blit target.
\\param dstrect the SDL_Rect structure representing the target rectangle in
               the destination surface, or NULL to fill the entire surface.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety The same destination surface should not be used from two
              threads at once. It is safe to use the same source surface
              from multiple threads.

\\since This function is available since SDL 3.2.0.

\\sa SDL_BlitSurface
")
(:FUNCTION "SDL_MapSurfaceRGB"
 "Map an RGB triple to an opaque pixel value for a surface.

This function maps the RGB color value to the specified pixel format and
returns the pixel value best approximating the given RGB color value for
the given pixel format.

If the surface has a palette, the index of the closest matching color in
the palette will be returned.

If the surface pixel format has an alpha component it will be returned as
all 1 bits (fully opaque).

If the pixel format bpp (color depth) is less than 32-bpp then the unused
upper bits of the return value can safely be ignored (e.g., with a 16-bpp
format the return value can be assigned to a Uint16, and similarly a Uint8
for an 8-bpp format).

\\param surface the surface to use for the pixel format and palette.
\\param r the red component of the pixel in the range 0-255.
\\param g the green component of the pixel in the range 0-255.
\\param b the blue component of the pixel in the range 0-255.
\\returns a pixel value.

\\since This function is available since SDL 3.2.0.

\\sa SDL_MapSurfaceRGBA
")
(:FUNCTION "SDL_MapSurfaceRGBA"
 "Map an RGBA quadruple to a pixel value for a surface.

This function maps the RGBA color value to the specified pixel format and
returns the pixel value best approximating the given RGBA color value for
the given pixel format.

If the surface pixel format has no alpha component the alpha value will be
ignored (as it will be in formats with a palette).

If the surface has a palette, the index of the closest matching color in
the palette will be returned.

If the pixel format bpp (color depth) is less than 32-bpp then the unused
upper bits of the return value can safely be ignored (e.g., with a 16-bpp
format the return value can be assigned to a Uint16, and similarly a Uint8
for an 8-bpp format).

\\param surface the surface to use for the pixel format and palette.
\\param r the red component of the pixel in the range 0-255.
\\param g the green component of the pixel in the range 0-255.
\\param b the blue component of the pixel in the range 0-255.
\\param a the alpha component of the pixel in the range 0-255.
\\returns a pixel value.

\\since This function is available since SDL 3.2.0.

\\sa SDL_MapSurfaceRGB
")
(:FUNCTION "SDL_ReadSurfacePixel" "Retrieves a single pixel from a surface.

This function prioritizes correctness over speed: it is suitable for unit
tests, but is not intended for use in a game engine.

Like SDL_GetRGBA, this uses the entire 0..255 range when converting color
components from pixel formats with less than 8 bits per RGB component.

\\param surface the surface to read.
\\param x the horizontal coordinate, 0 <= x < width.
\\param y the vertical coordinate, 0 <= y < height.
\\param r a pointer filled in with the red channel, 0-255, or NULL to ignore
         this channel.
\\param g a pointer filled in with the green channel, 0-255, or NULL to
         ignore this channel.
\\param b a pointer filled in with the blue channel, 0-255, or NULL to
         ignore this channel.
\\param a a pointer filled in with the alpha channel, 0-255, or NULL to
         ignore this channel.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ReadSurfacePixelFloat" "Retrieves a single pixel from a surface.

This function prioritizes correctness over speed: it is suitable for unit
tests, but is not intended for use in a game engine.

\\param surface the surface to read.
\\param x the horizontal coordinate, 0 <= x < width.
\\param y the vertical coordinate, 0 <= y < height.
\\param r a pointer filled in with the red channel, normally in the range
         0-1, or NULL to ignore this channel.
\\param g a pointer filled in with the green channel, normally in the range
         0-1, or NULL to ignore this channel.
\\param b a pointer filled in with the blue channel, normally in the range
         0-1, or NULL to ignore this channel.
\\param a a pointer filled in with the alpha channel, normally in the range
         0-1, or NULL to ignore this channel.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_WriteSurfacePixel" "Writes a single pixel to a surface.

This function prioritizes correctness over speed: it is suitable for unit
tests, but is not intended for use in a game engine.

Like SDL_MapRGBA, this uses the entire 0..255 range when converting color
components from pixel formats with less than 8 bits per RGB component.

\\param surface the surface to write.
\\param x the horizontal coordinate, 0 <= x < width.
\\param y the vertical coordinate, 0 <= y < height.
\\param r the red channel value, 0-255.
\\param g the green channel value, 0-255.
\\param b the blue channel value, 0-255.
\\param a the alpha channel value, 0-255.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_WriteSurfacePixelFloat" "Writes a single pixel to a surface.

This function prioritizes correctness over speed: it is suitable for unit
tests, but is not intended for use in a game engine.

\\param surface the surface to write.
\\param x the horizontal coordinate, 0 <= x < width.
\\param y the vertical coordinate, 0 <= y < height.
\\param r the red channel value, normally in the range 0-1.
\\param g the green channel value, normally in the range 0-1.
\\param b the blue channel value, normally in the range 0-1.
\\param a the alpha channel value, normally in the range 0-1.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SetWindowsMessageHook"
 "Set a callback for every Windows message, run before TranslateMessage().

The callback may modify the message, and should return true if the message
should continue to be processed, or false to prevent further processing.

\\param callback the SDL_WindowsMessageHook function to call.
\\param userdata a pointer to pass to every iteration of `callback`.

\\since This function is available since SDL 3.2.0.

\\sa SDL_WindowsMessageHook
\\sa SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP
")
(:FUNCTION "SDL_GetDirect3D9AdapterIndex"
 "Get the D3D9 adapter index that matches the specified display.

The returned adapter index can be passed to `IDirect3D9::CreateDevice` and
controls on which monitor a full screen application will appear.

\\param displayID the instance of the display to query.
\\returns the D3D9 adapter index on success or -1 on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetDXGIOutputInfo"
 "Get the DXGI Adapter and Output indices for the specified display.

The DXGI Adapter and Output indices can be passed to `EnumAdapters` and
`EnumOutputs` respectively to get the objects required to create a DX10 or
DX11 device and swap chain.

\\param displayID the instance of the display to query.
\\param adapterIndex a pointer to be filled in with the adapter index.
\\param outputIndex a pointer to be filled in with the output index.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SetX11EventHook" "Set a callback for every X11 event.

The callback may modify the event, and should return true if the event
should continue to be processed, or false to prevent further processing.

\\param callback the SDL_X11EventHook function to call.
\\param userdata a pointer to pass to every iteration of `callback`.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SetLinuxThreadPriority" "Sets the UNIX nice value for a thread.

This uses setpriority() if possible, and RealtimeKit if available.

\\param threadID the Unix thread ID to change priority of.
\\param priority the new, Unix-specific, priority value.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SetLinuxThreadPriorityAndPolicy"
 "Sets the priority (not nice level) and scheduling policy for a thread.

This uses setpriority() if possible, and RealtimeKit if available.

\\param threadID the Unix thread ID to change priority of.
\\param sdlPriority the new SDL_ThreadPriority value.
\\param schedPolicy the new scheduling policy (SCHED_FIFO, SCHED_RR,
                   SCHED_OTHER, etc...).
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SetiOSAnimationCallback"
 "Use this function to set the animation callback on Apple iOS.

The function prototype for `callback` is:

```c
void callback(void *callbackParam);
```

Where its parameter, `callbackParam`, is what was passed as `callbackParam`
to SDL_SetiOSAnimationCallback().

This function is only available on Apple iOS.

For more information see:

https://wiki.libsdl.org/SDL3/README/ios

Note that if you use the \"main callbacks\" instead of a standard C `main`
function, you don't have to use this API, as SDL will manage this for you.

Details on main callbacks are here:

https://wiki.libsdl.org/SDL3/README/main-functions

\\param window the window for which the animation callback should be set.
\\param interval the number of frames after which **callback** will be
                called.
\\param callback the function to call for every frame.
\\param callbackParam a pointer that is passed to `callback`.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetiOSEventPump
")
(:FUNCTION "SDL_SetiOSEventPump"
 "Use this function to enable or disable the SDL event pump on Apple iOS.

This function is only available on Apple iOS.

\\param enabled true to enable the event pump, false to disable it.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetiOSAnimationCallback
")
(:FUNCTION "SDL_GetAndroidJNIEnv"
 "Get the Android Java Native Interface Environment of the current thread.

This is the JNIEnv one needs to access the Java virtual machine from native
code, and is needed for many Android APIs to be usable from C.

The prototype of the function in SDL's code actually declare a void* return
type, even if the implementation returns a pointer to a JNIEnv. The
rationale being that the SDL headers can avoid including jni.h.

\\returns a pointer to Java native interface object (JNIEnv) to which the
         current thread is attached, or NULL on failure; call
         SDL_GetError() for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetAndroidActivity
")
(:FUNCTION "SDL_GetAndroidActivity"
 "Retrieve the Java instance of the Android activity class.

The prototype of the function in SDL's code actually declares a void*
return type, even if the implementation returns a jobject. The rationale
being that the SDL headers can avoid including jni.h.

The jobject returned by the function is a local reference and must be
released by the caller. See the PushLocalFrame() and PopLocalFrame() or
DeleteLocalRef() functions of the Java native interface:

https://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/functions.html

\\returns the jobject representing the instance of the Activity class of the
         Android application, or NULL on failure; call SDL_GetError() for
         more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetAndroidJNIEnv
")
(:FUNCTION "SDL_GetAndroidSDKVersion"
 "Query Android API level of the current device.

- API level 35: Android 15 (VANILLA_ICE_CREAM)
- API level 34: Android 14 (UPSIDE_DOWN_CAKE)
- API level 33: Android 13 (TIRAMISU)
- API level 32: Android 12L (S_V2)
- API level 31: Android 12 (S)
- API level 30: Android 11 (R)
- API level 29: Android 10 (Q)
- API level 28: Android 9 (P)
- API level 27: Android 8.1 (O_MR1)
- API level 26: Android 8.0 (O)
- API level 25: Android 7.1 (N_MR1)
- API level 24: Android 7.0 (N)
- API level 23: Android 6.0 (M)
- API level 22: Android 5.1 (LOLLIPOP_MR1)
- API level 21: Android 5.0 (LOLLIPOP, L)
- API level 20: Android 4.4W (KITKAT_WATCH)
- API level 19: Android 4.4 (KITKAT)
- API level 18: Android 4.3 (JELLY_BEAN_MR2)
- API level 17: Android 4.2 (JELLY_BEAN_MR1)
- API level 16: Android 4.1 (JELLY_BEAN)
- API level 15: Android 4.0.3 (ICE_CREAM_SANDWICH_MR1)
- API level 14: Android 4.0 (ICE_CREAM_SANDWICH)
- API level 13: Android 3.2 (HONEYCOMB_MR2)
- API level 12: Android 3.1 (HONEYCOMB_MR1)
- API level 11: Android 3.0 (HONEYCOMB)
- API level 10: Android 2.3.3 (GINGERBREAD_MR1)

\\returns the Android API level.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_IsChromebook"
 "Query if the application is running on a Chromebook.

\\returns true if this is a Chromebook, false otherwise.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_IsDeXMode"
 "Query if the application is running on a Samsung DeX docking station.

\\returns true if this is a DeX docking station, false otherwise.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SendAndroidBackButton"
 "Trigger the Android system back button behavior.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetAndroidInternalStoragePath"
 "Get the path used for internal storage for this Android application.

This path is unique to your application and cannot be written to by other
applications.

Your internal storage path is typically:
`/data/data/your.app.package/files`.

This is a C wrapper over `android.content.Context.getFilesDir()`:

https://developer.android.com/reference/android/content/Context#getFilesDir()

\\returns the path used for internal storage or NULL on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetAndroidExternalStoragePath
\\sa SDL_GetAndroidCachePath
")
(:FUNCTION "SDL_GetAndroidExternalStorageState"
 "Get the current state of external storage for this Android application.

The current state of external storage, a bitmask of these values:
`SDL_ANDROID_EXTERNAL_STORAGE_READ`, `SDL_ANDROID_EXTERNAL_STORAGE_WRITE`.

If external storage is currently unavailable, this will return 0.

\\returns the current state of external storage, or 0 if external storage is
         currently unavailable.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetAndroidExternalStoragePath
")
(:FUNCTION "SDL_GetAndroidExternalStoragePath"
 "Get the path used for external storage for this Android application.

This path is unique to your application, but is public and can be written
to by other applications.

Your external storage path is typically:
`/storage/sdcard0/Android/data/your.app.package/files`.

This is a C wrapper over `android.content.Context.getExternalFilesDir()`:

https://developer.android.com/reference/android/content/Context#getExternalFilesDir()

\\returns the path used for external storage for this application on success
         or NULL on failure; call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetAndroidExternalStorageState
\\sa SDL_GetAndroidInternalStoragePath
\\sa SDL_GetAndroidCachePath
")
(:FUNCTION "SDL_GetAndroidCachePath"
 "Get the path used for caching data for this Android application.

This path is unique to your application, but is public and can be written
to by other applications.

Your cache path is typically: `/data/data/your.app.package/cache/`.

This is a C wrapper over `android.content.Context.getCacheDir()`:

https://developer.android.com/reference/android/content/Context#getCacheDir()

\\returns the path used for caches for this application on success or NULL
         on failure; call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetAndroidInternalStoragePath
\\sa SDL_GetAndroidExternalStoragePath
")
(:FUNCTION "SDL_RequestAndroidPermission"
 "Request permissions at runtime, asynchronously.

You do not need to call this for built-in functionality of SDL; recording
from a microphone or reading images from a camera, using standard SDL APIs,
will manage permission requests for you.

This function never blocks. Instead, the app-supplied callback will be
called when a decision has been made. This callback may happen on a
different thread, and possibly much later, as it might wait on a user to
respond to a system dialog. If permission has already been granted for a
specific entitlement, the callback will still fire, probably on the current
thread and before this function returns.

If the request submission fails, this function returns -1 and the callback
will NOT be called, but this should only happen in catastrophic conditions,
like memory running out. Normally there will be a yes or no to the request
through the callback.

For the `permission` parameter, choose a value from here:

https://developer.android.com/reference/android/Manifest.permission

\\param permission the permission to request.
\\param cb the callback to trigger when the request has a response.
\\param userdata an app-controlled pointer that is passed to the callback.
\\returns true if the request was submitted, false if there was an error
         submitting. The result of the request is only ever reported
         through the callback, not this return value.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ShowAndroidToast" "Shows an Android toast notification.

Toasts are a sort of lightweight notification that are unique to Android.

https://developer.android.com/guide/topics/ui/notifiers/toasts

Shows toast in UI thread.

For the `gravity` parameter, choose a value from here, or -1 if you don't
have a preference:

https://developer.android.com/reference/android/view/Gravity

\\param message text message to be shown.
\\param duration 0=short, 1=long.
\\param gravity where the notification should appear on the screen.
\\param xoffset set this parameter only when gravity >=0.
\\param yoffset set this parameter only when gravity >=0.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SendAndroidMessage" "Send a user command to SDLActivity.

Override \"boolean onUnhandledMessage(Message msg)\" to handle the message.

\\param command user command that must be greater or equal to 0x8000.
\\param param user parameter.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_IsTablet" "Query if the current device is a tablet.

If SDL can't determine this, it will return false.

\\returns true if the device is a tablet, false otherwise.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_IsTV" "Query if the current device is a TV.

If SDL can't determine this, it will return false.

\\returns true if the device is a TV, false otherwise.

\\since This function is available since SDL 3.2.0.
")
(:ENUM "SDL_Sandbox" "Application sandbox environment.

\\since This enum is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetSandbox" "Get the application sandbox environment, if any.

\\returns the application sandbox environment or SDL_SANDBOX_NONE if the
         application is not running in a sandbox environment.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_OnApplicationWillTerminate"
 "Let iOS apps with external event handling report
onApplicationWillTerminate.

This functions allows iOS apps that have their own event handling to hook
into SDL to generate SDL events. This maps directly to an iOS-specific
event, but since it doesn't do anything iOS-specific internally, it is
available on all platforms, in case it might be useful for some specific
paradigm. Most apps do not need to use this directly; SDL's internal event
code will handle all this for windows created by SDL_CreateWindow!

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_OnApplicationDidReceiveMemoryWarning"
 "Let iOS apps with external event handling report
onApplicationDidReceiveMemoryWarning.

This functions allows iOS apps that have their own event handling to hook
into SDL to generate SDL events. This maps directly to an iOS-specific
event, but since it doesn't do anything iOS-specific internally, it is
available on all platforms, in case it might be useful for some specific
paradigm. Most apps do not need to use this directly; SDL's internal event
code will handle all this for windows created by SDL_CreateWindow!

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_OnApplicationWillEnterBackground"
 "Let iOS apps with external event handling report
onApplicationWillResignActive.

This functions allows iOS apps that have their own event handling to hook
into SDL to generate SDL events. This maps directly to an iOS-specific
event, but since it doesn't do anything iOS-specific internally, it is
available on all platforms, in case it might be useful for some specific
paradigm. Most apps do not need to use this directly; SDL's internal event
code will handle all this for windows created by SDL_CreateWindow!

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_OnApplicationDidEnterBackground"
 "Let iOS apps with external event handling report
onApplicationDidEnterBackground.

This functions allows iOS apps that have their own event handling to hook
into SDL to generate SDL events. This maps directly to an iOS-specific
event, but since it doesn't do anything iOS-specific internally, it is
available on all platforms, in case it might be useful for some specific
paradigm. Most apps do not need to use this directly; SDL's internal event
code will handle all this for windows created by SDL_CreateWindow!

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_OnApplicationWillEnterForeground"
 "Let iOS apps with external event handling report
onApplicationWillEnterForeground.

This functions allows iOS apps that have their own event handling to hook
into SDL to generate SDL events. This maps directly to an iOS-specific
event, but since it doesn't do anything iOS-specific internally, it is
available on all platforms, in case it might be useful for some specific
paradigm. Most apps do not need to use this directly; SDL's internal event
code will handle all this for windows created by SDL_CreateWindow!

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_OnApplicationDidEnterForeground"
 "Let iOS apps with external event handling report
onApplicationDidBecomeActive.

This functions allows iOS apps that have their own event handling to hook
into SDL to generate SDL events. This maps directly to an iOS-specific
event, but since it doesn't do anything iOS-specific internally, it is
available on all platforms, in case it might be useful for some specific
paradigm. Most apps do not need to use this directly; SDL's internal event
code will handle all this for windows created by SDL_CreateWindow!

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_OnApplicationDidChangeStatusBarOrientation"
 "Let iOS apps with external event handling report
onApplicationDidChangeStatusBarOrientation.

This functions allows iOS apps that have their own event handling to hook
into SDL to generate SDL events. This maps directly to an iOS-specific
event, but since it doesn't do anything iOS-specific internally, it is
available on all platforms, in case it might be useful for some specific
paradigm. Most apps do not need to use this directly; SDL's internal event
code will handle all this for windows created by SDL_CreateWindow!

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetGDKTaskQueue"
 "Gets a reference to the global async task queue handle for GDK,
initializing if needed.

Once you are done with the task queue, you should call
XTaskQueueCloseHandle to reduce the reference count to avoid a resource
leak.

\\param outTaskQueue a pointer to be filled in with task queue handle.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetGDKDefaultUser"
 "Gets a reference to the default user handle for GDK.

This is effectively a synchronous version of XUserAddAsync, which always
prefers the default user and allows a sign-in UI.

\\param outUserHandle a pointer to be filled in with the default user
                     handle.
\\returns true if success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDLTest_CommonCreateState"
 "Parse command line parameters and create common state.

\\param argv Array of command line parameters
\\param flags Flags indicating which subsystem to initialize (i.e. SDL_INIT_VIDEO | SDL_INIT_AUDIO)

\\returns a newly allocated common state object.
")
(:FUNCTION "SDLTest_CommonDestroyState" "Free the common state object.

You should call SDL_Quit() before calling this function.

\\param state The common state object to destroy
")
(:FUNCTION "SDLTest_CommonArg" "Process one common argument.

\\param state The common state describing the test window to create.
\\param index The index of the argument to process in argv[].

\\returns the number of arguments processed (i.e. 1 for --fullscreen, 2 for --video [videodriver], or -1 on error.
")
(:FUNCTION "SDLTest_CommonLogUsage" "Logs command line usage info.

This logs the appropriate command line options for the subsystems in use
 plus other common options, and then any application-specific options.
 This uses the SDL_Log() function and splits up output to be friendly to
 80-character-wide terminals.

\\param state The common state describing the test window for the app.
\\param argv0 argv[0], as passed to main/SDL_main.
\\param options an array of strings for application specific options. The last element of the array should be NULL.
")
(:FUNCTION "SDLTest_CommonInit" "Open test window.

\\param state The common state describing the test window to create.

\\returns true if initialization succeeded, false otherwise
")
(:FUNCTION "SDLTest_CommonDefaultArgs"
 "Easy argument handling when test app doesn't need any custom args.

\\param state The common state describing the test window to create.
\\param argc argc, as supplied to SDL_main
\\param argv argv, as supplied to SDL_main

\\returns false if app should quit, true otherwise.
")
(:FUNCTION "SDLTest_PrintEvent" "Print the details of an event.

This is automatically called by SDLTest_CommonEvent() as needed.

\\param event The event to print.
")
(:FUNCTION "SDLTest_CommonEvent"
 "Common event handler for test windows if you use a standard SDL_main.

\\param state The common state used to create test window.
\\param event The event to handle.
\\param done Flag indicating we are done.
")
(:FUNCTION "SDLTest_CommonEventMainCallbacks"
 "Common event handler for test windows if you use SDL_AppEvent.

This does _not_ free anything in `event`.

\\param state The common state used to create test window.
\\param event The event to handle.
\\returns Value suitable for returning from SDL_AppEvent().
")
(:FUNCTION "SDLTest_CommonQuit" "Close test window.

\\param state The common state used to create test window.

")
(:FUNCTION "SDLTest_CommonDrawWindowInfo"
 "Draws various window information (position, size, etc.) to the renderer.

\\param renderer The renderer to draw to.
\\param window The window whose information should be displayed.
\\param usedHeight Returns the height used, so the caller can draw more below.

")
(:FUNCTION "SDLTest_CompareSurfaces"
 "Compares a surface and with reference image data for equality

\\param surface Surface used in comparison
\\param referenceSurface Test Surface used in comparison
\\param allowable_error Allowable difference (=sum of squared difference for each RGB component) in blending accuracy.

\\returns 0 if comparison succeeded, >0 (=number of pixels for which the comparison failed) if comparison failed, -1 if any of the surfaces were NULL, -2 if the surface sizes differ.
")
(:FUNCTION "SDLTest_CompareMemory" "Compares 2 memory blocks for equality

\\param actual Memory used in comparison, displayed on the left
\\param size_actual Size of actual in bytes
\\param reference Reference memory, displayed on the right
\\param size_reference Size of reference in bytes

\\returns 0 if the left and right memory block are equal, non-zero if they are non-equal.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDLTest_FuzzerInit" "Initializes the fuzzer for a test

\\param execKey Execution \"Key\" that initializes the random number generator uniquely for the test.

")
(:FUNCTION "SDLTest_RandomUint8" "Returns a random Uint8

\\returns a generated integer
")
(:FUNCTION "SDLTest_RandomSint8" "Returns a random Sint8

\\returns a generated signed integer
")
(:FUNCTION "SDLTest_RandomUint16" "Returns a random Uint16

\\returns a generated integer
")
(:FUNCTION "SDLTest_RandomSint16" "Returns a random Sint16

\\returns a generated signed integer
")
(:FUNCTION "SDLTest_RandomSint32" "Returns a random integer

\\returns a generated integer
")
(:FUNCTION "SDLTest_RandomUint32" "Returns a random positive integer

\\returns a generated integer
")
(:FUNCTION "SDLTest_RandomUint64" "Returns random Uint64.

\\returns a generated integer
")
(:FUNCTION "SDLTest_RandomSint64" "Returns random Sint64.

\\returns a generated signed integer
")
(:FUNCTION "SDLTest_RandomUnitFloat"
 "\\returns a random float in range [0.0 - 1.0]
")
(:FUNCTION "SDLTest_RandomUnitDouble"
 "\\returns a random double in range [0.0 - 1.0]
")
(:FUNCTION "SDLTest_RandomFloat" "\\returns a random float.

")
(:FUNCTION "SDLTest_RandomDouble" "\\returns a random double.

")
(:FUNCTION "SDLTest_RandomUint8BoundaryValue"
 "Returns a random boundary value for Uint8 within the given boundaries.
Boundaries are inclusive, see the usage examples below. If validDomain
is true, the function will only return valid boundaries, otherwise non-valid
boundaries are also possible.
If boundary1 > boundary2, the values are swapped

Usage examples:
RandomUint8BoundaryValue(10, 20, true) returns 10, 11, 19 or 20
RandomUint8BoundaryValue(1, 20, false) returns 0 or 21
RandomUint8BoundaryValue(0, 99, false) returns 100
RandomUint8BoundaryValue(0, 255, false) returns 0 (error set)

\\param boundary1 Lower boundary limit
\\param boundary2 Upper boundary limit
\\param validDomain Should the generated boundary be valid (=within the bounds) or not?

\\returns a random boundary value for the given range and domain or 0 with error set
")
(:FUNCTION "SDLTest_RandomUint16BoundaryValue"
 "Returns a random boundary value for Uint16 within the given boundaries.
Boundaries are inclusive, see the usage examples below. If validDomain
is true, the function will only return valid boundaries, otherwise non-valid
boundaries are also possible.
If boundary1 > boundary2, the values are swapped

Usage examples:
RandomUint16BoundaryValue(10, 20, true) returns 10, 11, 19 or 20
RandomUint16BoundaryValue(1, 20, false) returns 0 or 21
RandomUint16BoundaryValue(0, 99, false) returns 100
RandomUint16BoundaryValue(0, 0xFFFF, false) returns 0 (error set)

\\param boundary1 Lower boundary limit
\\param boundary2 Upper boundary limit
\\param validDomain Should the generated boundary be valid (=within the bounds) or not?

\\returns a random boundary value for the given range and domain or 0 with error set
")
(:FUNCTION "SDLTest_RandomUint32BoundaryValue"
 "Returns a random boundary value for Uint32 within the given boundaries.
Boundaries are inclusive, see the usage examples below. If validDomain
is true, the function will only return valid boundaries, otherwise non-valid
boundaries are also possible.
If boundary1 > boundary2, the values are swapped

Usage examples:
RandomUint32BoundaryValue(10, 20, true) returns 10, 11, 19 or 20
RandomUint32BoundaryValue(1, 20, false) returns 0 or 21
RandomUint32BoundaryValue(0, 99, false) returns 100
RandomUint32BoundaryValue(0, 0xFFFFFFFF, false) returns 0 (with error set)

\\param boundary1 Lower boundary limit
\\param boundary2 Upper boundary limit
\\param validDomain Should the generated boundary be valid (=within the bounds) or not?

\\returns a random boundary value for the given range and domain or 0 with error set
")
(:FUNCTION "SDLTest_RandomUint64BoundaryValue"
 "Returns a random boundary value for Uint64 within the given boundaries.
Boundaries are inclusive, see the usage examples below. If validDomain
is true, the function will only return valid boundaries, otherwise non-valid
boundaries are also possible.
If boundary1 > boundary2, the values are swapped

Usage examples:
RandomUint64BoundaryValue(10, 20, true) returns 10, 11, 19 or 20
RandomUint64BoundaryValue(1, 20, false) returns 0 or 21
RandomUint64BoundaryValue(0, 99, false) returns 100
RandomUint64BoundaryValue(0, 0xFFFFFFFFFFFFFFFF, false) returns 0 (with error set)

\\param boundary1 Lower boundary limit
\\param boundary2 Upper boundary limit
\\param validDomain Should the generated boundary be valid (=within the bounds) or not?

\\returns a random boundary value for the given range and domain or 0 with error set
")
(:FUNCTION "SDLTest_RandomSint8BoundaryValue"
 "Returns a random boundary value for Sint8 within the given boundaries.
Boundaries are inclusive, see the usage examples below. If validDomain
is true, the function will only return valid boundaries, otherwise non-valid
boundaries are also possible.
If boundary1 > boundary2, the values are swapped

Usage examples:
RandomSint8BoundaryValue(-10, 20, true) returns -11, -10, 19 or 20
RandomSint8BoundaryValue(-100, -10, false) returns -101 or -9
RandomSint8BoundaryValue(SINT8_MIN, 99, false) returns 100
RandomSint8BoundaryValue(SINT8_MIN, SINT8_MAX, false) returns SINT8_MIN (== error value) with error set

\\param boundary1 Lower boundary limit
\\param boundary2 Upper boundary limit
\\param validDomain Should the generated boundary be valid (=within the bounds) or not?

\\returns a random boundary value for the given range and domain or SINT8_MIN with error set
")
(:FUNCTION "SDLTest_RandomSint16BoundaryValue"
 "Returns a random boundary value for Sint16 within the given boundaries.
Boundaries are inclusive, see the usage examples below. If validDomain
is true, the function will only return valid boundaries, otherwise non-valid
boundaries are also possible.
If boundary1 > boundary2, the values are swapped

Usage examples:
RandomSint16BoundaryValue(-10, 20, true) returns -11, -10, 19 or 20
RandomSint16BoundaryValue(-100, -10, false) returns -101 or -9
RandomSint16BoundaryValue(SINT16_MIN, 99, false) returns 100
RandomSint16BoundaryValue(SINT16_MIN, SINT16_MAX, false) returns SINT16_MIN (== error value) with error set

\\param boundary1 Lower boundary limit
\\param boundary2 Upper boundary limit
\\param validDomain Should the generated boundary be valid (=within the bounds) or not?

\\returns a random boundary value for the given range and domain or SINT16_MIN with error set
")
(:FUNCTION "SDLTest_RandomSint32BoundaryValue"
 "Returns a random boundary value for Sint32 within the given boundaries.
Boundaries are inclusive, see the usage examples below. If validDomain
is true, the function will only return valid boundaries, otherwise non-valid
boundaries are also possible.
If boundary1 > boundary2, the values are swapped

Usage examples:
RandomSint32BoundaryValue(-10, 20, true) returns -11, -10, 19 or 20
RandomSint32BoundaryValue(-100, -10, false) returns -101 or -9
RandomSint32BoundaryValue(SINT32_MIN, 99, false) returns 100
RandomSint32BoundaryValue(SINT32_MIN, SINT32_MAX, false) returns SINT32_MIN (== error value)

\\param boundary1 Lower boundary limit
\\param boundary2 Upper boundary limit
\\param validDomain Should the generated boundary be valid (=within the bounds) or not?

\\returns a random boundary value for the given range and domain or SINT32_MIN with error set
")
(:FUNCTION "SDLTest_RandomSint64BoundaryValue"
 "Returns a random boundary value for Sint64 within the given boundaries.
Boundaries are inclusive, see the usage examples below. If validDomain
is true, the function will only return valid boundaries, otherwise non-valid
boundaries are also possible.
If boundary1 > boundary2, the values are swapped

Usage examples:
RandomSint64BoundaryValue(-10, 20, true) returns -11, -10, 19 or 20
RandomSint64BoundaryValue(-100, -10, false) returns -101 or -9
RandomSint64BoundaryValue(SINT64_MIN, 99, false) returns 100
RandomSint64BoundaryValue(SINT64_MIN, SINT64_MAX, false) returns SINT64_MIN (== error value) and error set

\\param boundary1 Lower boundary limit
\\param boundary2 Upper boundary limit
\\param validDomain Should the generated boundary be valid (=within the bounds) or not?

\\returns a random boundary value for the given range and domain or SINT64_MIN with error set
")
(:FUNCTION "SDLTest_RandomIntegerInRange"
 "Returns integer in range [min, max] (inclusive).
Min and max values can be negative values.
If Max in smaller than min, then the values are swapped.
Min and max are the same value, that value will be returned.

\\param min Minimum inclusive value of returned random number
\\param max Maximum inclusive value of returned random number

\\returns a generated random integer in range
")
(:FUNCTION "SDLTest_RandomAsciiString"
 "Generates random null-terminated string. The minimum length for
the string is 1 character, maximum length for the string is 255
characters and it can contain ASCII characters from 32 to 126.

Note: Returned string needs to be deallocated.

\\returns a newly allocated random string; or NULL if length was invalid or string could not be allocated.
")
(:FUNCTION "SDLTest_RandomAsciiStringWithMaximumLength"
 "Generates random null-terminated string. The maximum length for
the string is defined by the maxLength parameter.
String can contain ASCII characters from 32 to 126.

Note: Returned string needs to be deallocated.

\\param maxLength The maximum length of the generated string.

\\returns a newly allocated random string; or NULL if maxLength was invalid or string could not be allocated.
")
(:FUNCTION "SDLTest_RandomAsciiStringOfSize"
 "Generates random null-terminated string. The length for
the string is defined by the size parameter.
String can contain ASCII characters from 32 to 126.

Note: Returned string needs to be deallocated.

\\param size The length of the generated string

\\returns a newly allocated random string; or NULL if size was invalid or string could not be allocated.
")
(:FUNCTION "SDLTest_GetFuzzerInvocationCount"
 "Get the invocation count for the fuzzer since last ...FuzzerInit.

\\returns the invocation count.
")
(:FUNCTION "SDLTest_Log"
 "Prints given message with a timestamp in the TEST category and INFO priority.

\\param fmt Message to be logged
")
(:FUNCTION "SDLTest_LogEscapedString" "Prints given prefix and buffer.
Non-printible characters in the raw data are substituted by printible alternatives.

\\param prefix Prefix message.
\\param buffer Raw data to be escaped.
\\param size Number of bytes in buffer.
")
(:FUNCTION "SDLTest_LogError"
 "Prints given message with a timestamp in the TEST category and the ERROR priority.

\\param fmt Message to be logged
")
(:FUNCTION "SDLTest_Md5Init" "initialize the context

\\param  mdContext        pointer to context variable

Note: The function initializes the message-digest context
      mdContext. Call before each new use of the context -
      all fields are set to zero.
")
(:FUNCTION "SDLTest_Md5Update" "update digest from variable length data

\\param  mdContext       pointer to context variable
\\param  inBuf           pointer to data array/string
\\param  inLen           length of data array/string

Note: The function updates the message-digest context to account
      for the presence of each of the characters inBuf[0..inLen-1]
      in the message whose digest is being computed.
")
(:FUNCTION "SDLTest_Md5Final" "complete digest computation

\\param mdContext     pointer to context variable

Note: The function terminates the message-digest computation and
      ends with the desired message digest in mdContext.digest[0..15].
      Always call before using the digest[] variable.
")
(:FUNCTION "SDLTest_TrackAllocations" "Start tracking SDL memory allocations

\\note This should be called before any other SDL functions for complete tracking coverage
")
(:FUNCTION "SDLTest_RandFillAllocations" "Fill allocations with random data

\\note This implicitly calls SDLTest_TrackAllocations()
")
(:FUNCTION "SDLTest_LogAllocations" "Print a log of any outstanding allocations

\\note This can be called after SDL_Quit()
")
(:STRUCT "SDL_Thread" "The SDL thread object.

These are opaque data.

\\since This datatype is available since SDL 3.2.0.

\\sa SDL_CreateThread
\\sa SDL_WaitThread
")
(:BITFIELD "SDL_ThreadID" "A unique numeric ID that identifies a thread.

These are different from SDL_Thread objects, which are generally what an
application will operate on, but having a way to uniquely identify a thread
can be useful at times.

\\since This datatype is available since SDL 3.2.0.

\\sa SDL_GetThreadID
\\sa SDL_GetCurrentThreadID
")
(:TYPEDEF "SDL_TLSID" "Thread local storage ID.

0 is the invalid ID. An app can create these and then set data for these
IDs that is unique to each thread.

\\since This datatype is available since SDL 3.2.0.

\\sa SDL_GetTLS
\\sa SDL_SetTLS
")
(:ENUM "SDL_ThreadPriority" "The SDL thread priority.

SDL will make system changes as necessary in order to apply the thread
priority. Code which attempts to control thread state related to priority
should be aware that calling SDL_SetCurrentThreadPriority may alter such
state. SDL_HINT_THREAD_PRIORITY_POLICY can be used to control aspects of
this behavior.

\\since This enum is available since SDL 3.2.0.
")
(:ENUM "SDL_ThreadState" "The SDL thread state.

The current state of a thread can be checked by calling SDL_GetThreadState.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_GetThreadState
")
(:FUNCTION "SDL_CreateThread" "Create a new thread with a default stack size.

This is a convenience function, equivalent to calling
SDL_CreateThreadWithProperties with the following properties set:

- `SDL_PROP_THREAD_CREATE_ENTRY_FUNCTION_POINTER`: `fn`
- `SDL_PROP_THREAD_CREATE_NAME_STRING`: `name`
- `SDL_PROP_THREAD_CREATE_USERDATA_POINTER`: `data`

Note that this \"function\" is actually a macro that calls an internal
function with two extra parameters not listed here; they are hidden through
preprocessor macros and are needed to support various C runtimes at the
point of the function call. Language bindings that aren't using the C
headers will need to deal with this.

Usually, apps should just call this function the same way on every platform
and let the macros hide the details.

\\param fn the SDL_ThreadFunction function to call in the new thread.
\\param name the name of the thread.
\\param data a pointer that is passed to `fn`.
\\returns an opaque pointer to the new thread object on success, NULL if the
         new thread could not be created; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateThreadWithProperties
\\sa SDL_WaitThread
")
(:FUNCTION "SDL_CreateThreadWithProperties"
 "Create a new thread with with the specified properties.

These are the supported properties:

- `SDL_PROP_THREAD_CREATE_ENTRY_FUNCTION_POINTER`: an SDL_ThreadFunction
  value that will be called at the start of the new thread's life.
  Required.
- `SDL_PROP_THREAD_CREATE_NAME_STRING`: the name of the new thread, which
  might be available to debuggers. Optional, defaults to NULL.
- `SDL_PROP_THREAD_CREATE_USERDATA_POINTER`: an arbitrary app-defined
  pointer, which is passed to the entry function on the new thread, as its
  only parameter. Optional, defaults to NULL.
- `SDL_PROP_THREAD_CREATE_STACKSIZE_NUMBER`: the size, in bytes, of the new
  thread's stack. Optional, defaults to 0 (system-defined default).

SDL makes an attempt to report `SDL_PROP_THREAD_CREATE_NAME_STRING` to the
system, so that debuggers can display it. Not all platforms support this.

Thread naming is a little complicated: Most systems have very small limits
for the string length (Haiku has 32 bytes, Linux currently has 16, Visual
C++ 6.0 has _nine_!), and possibly other arbitrary rules. You'll have to
see what happens with your system's debugger. The name should be UTF-8 (but
using the naming limits of C identifiers is a better bet). There are no
requirements for thread naming conventions, so long as the string is
null-terminated UTF-8, but these guidelines are helpful in choosing a name:

https://stackoverflow.com/questions/149932/naming-conventions-for-threads

If a system imposes requirements, SDL will try to munge the string for it
(truncate, etc), but the original string contents will be available from
SDL_GetThreadName().

The size (in bytes) of the new stack can be specified with
`SDL_PROP_THREAD_CREATE_STACKSIZE_NUMBER`. Zero means \"use the system
default\" which might be wildly different between platforms. x86 Linux
generally defaults to eight megabytes, an embedded device might be a few
kilobytes instead. You generally need to specify a stack that is a multiple
of the system's page size (in many cases, this is 4 kilobytes, but check
your system documentation).

Note that this \"function\" is actually a macro that calls an internal
function with two extra parameters not listed here; they are hidden through
preprocessor macros and are needed to support various C runtimes at the
point of the function call. Language bindings that aren't using the C
headers will need to deal with this.

The actual symbol in SDL is `SDL_CreateThreadWithPropertiesRuntime`, so
there is no symbol clash, but trying to load an SDL shared library and look
for \"SDL_CreateThreadWithProperties\" will fail.

Usually, apps should just call this function the same way on every platform
and let the macros hide the details.

\\param props the properties to use.
\\returns an opaque pointer to the new thread object on success, NULL if the
         new thread could not be created; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateThread
\\sa SDL_WaitThread
")
(:FUNCTION "SDL_CreateThreadRuntime"
 "The actual entry point for SDL_CreateThread.

\\param fn the SDL_ThreadFunction function to call in the new thread
\\param name the name of the thread
\\param data a pointer that is passed to `fn`
\\param pfnBeginThread the C runtime's _beginthreadex (or whatnot). Can be NULL.
\\param pfnEndThread the C runtime's _endthreadex (or whatnot). Can be NULL.
\\returns an opaque pointer to the new thread object on success, NULL if the
         new thread could not be created; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_CreateThreadWithPropertiesRuntime"
 "The actual entry point for SDL_CreateThreadWithProperties.

\\param props the properties to use
\\param pfnBeginThread the C runtime's _beginthreadex (or whatnot). Can be NULL.
\\param pfnEndThread the C runtime's _endthreadex (or whatnot). Can be NULL.
\\returns an opaque pointer to the new thread object on success, NULL if the
         new thread could not be created; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetThreadName"
 "Get the thread name as it was specified in SDL_CreateThread().

\\param thread the thread to query.
\\returns a pointer to a UTF-8 string that names the specified thread, or
         NULL if it doesn't have a name.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetCurrentThreadID"
 "Get the thread identifier for the current thread.

This thread identifier is as reported by the underlying operating system.
If SDL is running on a platform that does not support threads the return
value will always be zero.

This function also returns a valid thread ID when called from the main
thread.

\\returns the ID of the current thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetThreadID
")
(:FUNCTION "SDL_GetThreadID"
 "Get the thread identifier for the specified thread.

This thread identifier is as reported by the underlying operating system.
If SDL is running on a platform that does not support threads the return
value will always be zero.

\\param thread the thread to query.
\\returns the ID of the specified thread, or the ID of the current thread if
         `thread` is NULL.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetCurrentThreadID
")
(:FUNCTION "SDL_SetCurrentThreadPriority"
 "Set the priority for the current thread.

Note that some platforms will not let you alter the priority (or at least,
promote the thread to a higher priority) at all, and some require you to be
an administrator account. Be prepared for this to fail.

\\param priority the SDL_ThreadPriority to set.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_WaitThread" "Wait for a thread to finish.

Threads that haven't been detached will remain until this function cleans
them up. Not doing so is a resource leak.

Once a thread has been cleaned up through this function, the SDL_Thread
that references it becomes invalid and should not be referenced again. As
such, only one thread may call SDL_WaitThread() on another.

The return code from the thread function is placed in the area pointed to
by `status`, if `status` is not NULL.

You may not wait on a thread that has been used in a call to
SDL_DetachThread(). Use either that function or this one, but not both, or
behavior is undefined.

It is safe to pass a NULL thread to this function; it is a no-op.

Note that the thread pointer is freed by this function and is not valid
afterward.

\\param thread the SDL_Thread pointer that was returned from the
              SDL_CreateThread() call that started this thread.
\\param status a pointer filled in with the value returned from the thread
              function by its 'return', or -1 if the thread has been
              detached or isn't valid, may be NULL.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateThread
\\sa SDL_DetachThread
")
(:FUNCTION "SDL_GetThreadState" "Get the current state of a thread.

\\param thread the thread to query.
\\returns the current state of a thread, or SDL_THREAD_UNKNOWN if the thread
         isn't valid.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ThreadState
")
(:FUNCTION "SDL_DetachThread"
 "Let a thread clean up on exit without intervention.

A thread may be \"detached\" to signify that it should not remain until
another thread has called SDL_WaitThread() on it. Detaching a thread is
useful for long-running threads that nothing needs to synchronize with or
further manage. When a detached thread is done, it simply goes away.

There is no way to recover the return code of a detached thread. If you
need this, don't detach the thread and instead use SDL_WaitThread().

Once a thread is detached, you should usually assume the SDL_Thread isn't
safe to reference again, as it will become invalid immediately upon the
detached thread's exit, instead of remaining until someone has called
SDL_WaitThread() to finally clean it up. As such, don't detach the same
thread more than once.

If a thread has already exited when passed to SDL_DetachThread(), it will
stop waiting for a call to SDL_WaitThread() and clean up immediately. It is
not safe to detach a thread that might be used with SDL_WaitThread().

You may not call SDL_WaitThread() on a thread that has been detached. Use
either that function or this one, but not both, or behavior is undefined.

It is safe to pass NULL to this function; it is a no-op.

\\param thread the SDL_Thread pointer that was returned from the
              SDL_CreateThread() call that started this thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateThread
\\sa SDL_WaitThread
")
(:FUNCTION "SDL_GetTLS"
 "Get the current thread's value associated with a thread local storage ID.

\\param id a pointer to the thread local storage ID, may not be NULL.
\\returns the value associated with the ID for the current thread or NULL if
         no value has been set; call SDL_GetError() for more information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetTLS
")
(:FUNCTION "SDL_SetTLS"
 "Set the current thread's value associated with a thread local storage ID.

If the thread local storage ID is not initialized (the value is 0), a new
ID will be created in a thread-safe way, so all calls using a pointer to
the same ID will refer to the same local storage.

Note that replacing a value from a previous call to this function on the
same thread does _not_ call the previous value's destructor!

`destructor` can be NULL; it is assumed that `value` does not need to be
cleaned up if so.

\\param id a pointer to the thread local storage ID, may not be NULL.
\\param value the value to associate with the ID for the current thread.
\\param destructor a function called when the thread exits, to free the
                  value, may be NULL.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetTLS
")
(:FUNCTION "SDL_CleanupTLS" "Cleanup all TLS data for this thread.

If you are creating your threads outside of SDL and then calling SDL
functions, you should call this function before your thread exits, to
properly clean up SDL memory.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:STRUCT "SDL_DateTime"
 "A structure holding a calendar date and time broken down into its
components.

\\since This struct is available since SDL 3.2.0.
")
(:ENUM "SDL_DateFormat" "The preferred date format of the current system locale.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_GetDateTimeLocalePreferences
")
(:ENUM "SDL_TimeFormat" "The preferred time format of the current system locale.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_GetDateTimeLocalePreferences
")
(:FUNCTION "SDL_GetDateTimeLocalePreferences"
 "Gets the current preferred date and time format for the system locale.

This might be a \"slow\" call that has to query the operating system. It's
best to ask for this once and save the results. However, the preferred
formats can change, usually because the user has changed a system
preference outside of your program.

\\param dateFormat a pointer to the SDL_DateFormat to hold the returned date
                  format, may be NULL.
\\param timeFormat a pointer to the SDL_TimeFormat to hold the returned time
                  format, may be NULL.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetCurrentTime"
 "Gets the current value of the system realtime clock in nanoseconds since
Jan 1, 1970 in Universal Coordinated Time (UTC).

\\param ticks the SDL_Time to hold the returned tick count.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_TimeToDateTime"
 "Converts an SDL_Time in nanoseconds since the epoch to a calendar time in
the SDL_DateTime format.

\\param ticks the SDL_Time to be converted.
\\param dt the resulting SDL_DateTime.
\\param localTime the resulting SDL_DateTime will be expressed in local time
                 if true, otherwise it will be in Universal Coordinated
                 Time (UTC).
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_DateTimeToTime"
 "Converts a calendar time to an SDL_Time in nanoseconds since the epoch.

This function ignores the day_of_week member of the SDL_DateTime struct, so
it may remain unset.

\\param dt the source SDL_DateTime.
\\param ticks the resulting SDL_Time.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_TimeToWindows"
 "Converts an SDL time into a Windows FILETIME (100-nanosecond intervals
since January 1, 1601).

This function fills in the two 32-bit values of the FILETIME structure.

\\param ticks the time to convert.
\\param dwLowDateTime a pointer filled in with the low portion of the
                     Windows FILETIME value.
\\param dwHighDateTime a pointer filled in with the high portion of the
                      Windows FILETIME value.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_TimeFromWindows"
 "Converts a Windows FILETIME (100-nanosecond intervals since January 1,
1601) to an SDL time.

This function takes the two 32-bit values of the FILETIME structure as
parameters.

\\param dwLowDateTime the low portion of the Windows FILETIME value.
\\param dwHighDateTime the high portion of the Windows FILETIME value.
\\returns the converted SDL time.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetDaysInMonth"
 "Get the number of days in a month for a given year.

\\param year the year.
\\param month the month [1-12].
\\returns the number of days in the requested month or -1 on failure; call
         SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetDayOfYear" "Get the day of year for a calendar date.

\\param year the year component of the date.
\\param month the month component of the date.
\\param day the day component of the date.
\\returns the day of year [0-365] if the date is valid or -1 on failure;
         call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetDayOfWeek" "Get the day of week for a calendar date.

\\param year the year component of the date.
\\param month the month component of the date.
\\param day the day component of the date.
\\returns a value between 0 and 6 (0 being Sunday) if the date is valid or
         -1 on failure; call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SECONDS_TO_NS" "Convert seconds to nanoseconds.

This only converts whole numbers, not fractional seconds.

\\param S the number of seconds to convert.
\\returns S, expressed in nanoseconds.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_NS_TO_SECONDS" "Convert nanoseconds to seconds.

This performs a division, so the results can be dramatically different if
`NS` is an integer or floating point value.

\\param NS the number of nanoseconds to convert.
\\returns NS, expressed in seconds.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_MS_TO_NS" "Convert milliseconds to nanoseconds.

This only converts whole numbers, not fractional milliseconds.

\\param MS the number of milliseconds to convert.
\\returns MS, expressed in nanoseconds.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_NS_TO_MS" "Convert nanoseconds to milliseconds.

This performs a division, so the results can be dramatically different if
`NS` is an integer or floating point value.

\\param NS the number of nanoseconds to convert.
\\returns NS, expressed in milliseconds.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_US_TO_NS" "Convert microseconds to nanoseconds.

This only converts whole numbers, not fractional microseconds.

\\param US the number of microseconds to convert.
\\returns US, expressed in nanoseconds.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_NS_TO_US" "Convert nanoseconds to microseconds.

This performs a division, so the results can be dramatically different if
`NS` is an integer or floating point value.

\\param NS the number of nanoseconds to convert.
\\returns NS, expressed in microseconds.

\\threadsafety It is safe to call this macro from any thread.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetTicks"
 "Get the number of milliseconds since SDL library initialization.

\\returns an unsigned 64-bit value representing the number of milliseconds
         since the SDL library initialized.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetTicksNS"
 "Get the number of nanoseconds since SDL library initialization.

\\returns an unsigned 64-bit value representing the number of nanoseconds
         since the SDL library initialized.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetPerformanceCounter"
 "Get the current value of the high resolution counter.

This function is typically used for profiling.

The counter values are only meaningful relative to each other. Differences
between values can be converted to times by using
SDL_GetPerformanceFrequency().

\\returns the current counter value.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetPerformanceFrequency
")
(:FUNCTION "SDL_GetPerformanceFrequency"
 "Get the count per second of the high resolution counter.

\\returns a platform-specific count per second.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetPerformanceCounter
")
(:FUNCTION "SDL_Delay"
 "Wait a specified number of milliseconds before returning.

This function waits a specified number of milliseconds before returning. It
waits at least the specified time, but possibly longer due to OS
scheduling.

\\param ms the number of milliseconds to delay.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_DelayNS
\\sa SDL_DelayPrecise
")
(:FUNCTION "SDL_DelayNS"
 "Wait a specified number of nanoseconds before returning.

This function waits a specified number of nanoseconds before returning. It
waits at least the specified time, but possibly longer due to OS
scheduling.

\\param ns the number of nanoseconds to delay.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_Delay
\\sa SDL_DelayPrecise
")
(:FUNCTION "SDL_DelayPrecise"
 "Wait a specified number of nanoseconds before returning.

This function waits a specified number of nanoseconds before returning. It
will attempt to wait as close to the requested time as possible, busy
waiting if necessary, but could return later due to OS scheduling.

\\param ns the number of nanoseconds to delay.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_Delay
\\sa SDL_DelayNS
")
(:BITFIELD "SDL_TimerID" "Definition of the timer ID type.

\\since This datatype is available since SDL 3.2.0.
")
(:FUNCTION "SDL_AddTimer" "Call a callback function at a future time.

The callback function is passed the current timer interval and the user
supplied parameter from the SDL_AddTimer() call and should return the next
timer interval. If the value returned from the callback is 0, the timer is
canceled and will be removed.

The callback is run on a separate thread, and for short timeouts can
potentially be called before this function returns.

Timers take into account the amount of time it took to execute the
callback. For example, if the callback took 250 ms to execute and returned
1000 (ms), the timer would only wait another 750 ms before its next
iteration.

Timing may be inexact due to OS scheduling. Be sure to note the current
time with SDL_GetTicksNS() or SDL_GetPerformanceCounter() in case your
callback needs to adjust for variances.

\\param interval the timer delay, in milliseconds, passed to `callback`.
\\param callback the SDL_TimerCallback function to call when the specified
                `interval` elapses.
\\param userdata a pointer that is passed to `callback`.
\\returns a timer ID or 0 on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_AddTimerNS
\\sa SDL_RemoveTimer
")
(:FUNCTION "SDL_AddTimerNS" "Call a callback function at a future time.

The callback function is passed the current timer interval and the user
supplied parameter from the SDL_AddTimerNS() call and should return the
next timer interval. If the value returned from the callback is 0, the
timer is canceled and will be removed.

The callback is run on a separate thread, and for short timeouts can
potentially be called before this function returns.

Timers take into account the amount of time it took to execute the
callback. For example, if the callback took 250 ns to execute and returned
1000 (ns), the timer would only wait another 750 ns before its next
iteration.

Timing may be inexact due to OS scheduling. Be sure to note the current
time with SDL_GetTicksNS() or SDL_GetPerformanceCounter() in case your
callback needs to adjust for variances.

\\param interval the timer delay, in nanoseconds, passed to `callback`.
\\param callback the SDL_TimerCallback function to call when the specified
                `interval` elapses.
\\param userdata a pointer that is passed to `callback`.
\\returns a timer ID or 0 on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_AddTimer
\\sa SDL_RemoveTimer
")
(:FUNCTION "SDL_RemoveTimer" "Remove a timer created with SDL_AddTimer().

\\param id the ID of the timer to remove.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety It is safe to call this function from any thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_AddTimer
")
(:BITFIELD "SDL_TouchID" "A unique ID for a touch device.

This ID is valid for the time the device is connected to the system, and is
never reused for the lifetime of the application.

The value 0 is an invalid ID.

\\since This datatype is available since SDL 3.2.0.
")
(:BITFIELD "SDL_FingerID" "A unique ID for a single finger on a touch device.

This ID is valid for the time the finger (stylus, etc) is touching and will
be unique for all fingers currently in contact, so this ID tracks the
lifetime of a single continuous touch. This value may represent an index, a
pointer, or some other unique ID, depending on the platform.

The value 0 is an invalid ID.

\\since This datatype is available since SDL 3.2.0.
")
(:ENUM "SDL_TouchDeviceType" "An enum that describes the type of a touch device.

\\since This enum is available since SDL 3.2.0.
")
(:STRUCT "SDL_Finger" "Data about a single finger in a multitouch event.

Each touch event is a collection of fingers that are simultaneously in
contact with the touch device (so a \"touch\" can be a \"multitouch,\" in
reality), and this struct reports details of the specific fingers.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_GetTouchFingers
")
(:FUNCTION "SDL_GetTouchDevices" "Get a list of registered touch devices.

On some platforms SDL first sees the touch device if it was actually used.
Therefore the returned list might be empty, although devices are available.
After using all devices at least once the number will be correct.

\\param count a pointer filled in with the number of devices returned, may
             be NULL.
\\returns a 0 terminated array of touch device IDs or NULL on failure; call
         SDL_GetError() for more information. This should be freed with
         SDL_free() when it is no longer needed.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetTouchDeviceName"
 "Get the touch device name as reported from the driver.

\\param touchID the touch device instance ID.
\\returns touch device name, or NULL on failure; call SDL_GetError() for
         more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetTouchDeviceType" "Get the type of the given touch device.

\\param touchID the ID of a touch device.
\\returns touch device type.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetTouchFingers"
 "Get a list of active fingers for a given touch device.

\\param touchID the ID of a touch device.
\\param count a pointer filled in with the number of fingers returned, can
             be NULL.
\\returns a NULL terminated array of SDL_Finger pointers or NULL on failure;
         call SDL_GetError() for more information. This is a single
         allocation that should be freed with SDL_free() when it is no
         longer needed.

\\since This function is available since SDL 3.2.0.
")
(:STRUCT "SDL_Tray"
 "An opaque handle representing a toplevel system tray object.

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_TrayMenu"
 "An opaque handle representing a menu/submenu on a system tray object.

\\since This struct is available since SDL 3.2.0.
")
(:STRUCT "SDL_TrayEntry"
 "An opaque handle representing an entry on a system tray object.

\\since This struct is available since SDL 3.2.0.
")
(:BITFIELD "SDL_TrayEntryFlags"
 "Flags that control the creation of system tray entries.

Some of these flags are required; exactly one of them must be specified at
the time a tray entry is created. Other flags are optional; zero or more of
those can be OR'ed together with the required flag.

\\since This datatype is available since SDL 3.2.0.

\\sa SDL_InsertTrayEntryAt
")
(:FUNCTION "SDL_CreateTray"
 "Create an icon to be placed in the operating system's tray, or equivalent.

Many platforms advise not using a system tray unless persistence is a
necessary feature. Avoid needlessly creating a tray icon, as the user may
feel like it clutters their interface.

Using tray icons require the video subsystem.

\\param icon a surface to be used as icon. May be NULL.
\\param tooltip a tooltip to be displayed when the mouse hovers the icon in
               UTF-8 encoding. Not supported on all platforms. May be NULL.
\\returns The newly created system tray icon.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateTrayMenu
\\sa SDL_GetTrayMenu
\\sa SDL_DestroyTray
")
(:FUNCTION "SDL_SetTrayIcon" "Updates the system tray icon's icon.

\\param tray the tray icon to be updated.
\\param icon the new icon. May be NULL.

\\threadsafety This function should be called on the thread that created the
              tray.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateTray
")
(:FUNCTION "SDL_SetTrayTooltip" "Updates the system tray icon's tooltip.

\\param tray the tray icon to be updated.
\\param tooltip the new tooltip in UTF-8 encoding. May be NULL.

\\threadsafety This function should be called on the thread that created the
              tray.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateTray
")
(:FUNCTION "SDL_CreateTrayMenu" "Create a menu for a system tray.

This should be called at most once per tray icon.

This function does the same thing as SDL_CreateTraySubmenu(), except that
it takes a SDL_Tray instead of a SDL_TrayEntry.

A menu does not need to be destroyed; it will be destroyed with the tray.

\\param tray the tray to bind the menu to.
\\returns the newly created menu.

\\threadsafety This function should be called on the thread that created the
              tray.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateTray
\\sa SDL_GetTrayMenu
\\sa SDL_GetTrayMenuParentTray
")
(:FUNCTION "SDL_CreateTraySubmenu" "Create a submenu for a system tray entry.

This should be called at most once per tray entry.

This function does the same thing as SDL_CreateTrayMenu, except that it
takes a SDL_TrayEntry instead of a SDL_Tray.

A menu does not need to be destroyed; it will be destroyed with the tray.

\\param entry the tray entry to bind the menu to.
\\returns the newly created menu.

\\threadsafety This function should be called on the thread that created the
              tray.

\\since This function is available since SDL 3.2.0.

\\sa SDL_InsertTrayEntryAt
\\sa SDL_GetTraySubmenu
\\sa SDL_GetTrayMenuParentEntry
")
(:FUNCTION "SDL_GetTrayMenu" "Gets a previously created tray menu.

You should have called SDL_CreateTrayMenu() on the tray object. This
function allows you to fetch it again later.

This function does the same thing as SDL_GetTraySubmenu(), except that it
takes a SDL_Tray instead of a SDL_TrayEntry.

A menu does not need to be destroyed; it will be destroyed with the tray.

\\param tray the tray entry to bind the menu to.
\\returns the newly created menu.

\\threadsafety This function should be called on the thread that created the
              tray.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateTray
\\sa SDL_CreateTrayMenu
")
(:FUNCTION "SDL_GetTraySubmenu" "Gets a previously created tray entry submenu.

You should have called SDL_CreateTraySubmenu() on the entry object. This
function allows you to fetch it again later.

This function does the same thing as SDL_GetTrayMenu(), except that it
takes a SDL_TrayEntry instead of a SDL_Tray.

A menu does not need to be destroyed; it will be destroyed with the tray.

\\param entry the tray entry to bind the menu to.
\\returns the newly created menu.

\\threadsafety This function should be called on the thread that created the
              tray.

\\since This function is available since SDL 3.2.0.

\\sa SDL_InsertTrayEntryAt
\\sa SDL_CreateTraySubmenu
")
(:FUNCTION "SDL_GetTrayEntries"
 "Returns a list of entries in the menu, in order.

\\param menu The menu to get entries from.
\\param count An optional pointer to obtain the number of entries in the
             menu.
\\returns a NULL-terminated list of entries within the given menu. The
         pointer becomes invalid when any function that inserts or deletes
         entries in the menu is called.

\\threadsafety This function should be called on the thread that created the
              tray.

\\since This function is available since SDL 3.2.0.

\\sa SDL_RemoveTrayEntry
\\sa SDL_InsertTrayEntryAt
")
(:FUNCTION "SDL_RemoveTrayEntry" "Removes a tray entry.

\\param entry The entry to be deleted.

\\threadsafety This function should be called on the thread that created the
              tray.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetTrayEntries
\\sa SDL_InsertTrayEntryAt
")
(:FUNCTION "SDL_InsertTrayEntryAt" "Insert a tray entry at a given position.

If label is NULL, the entry will be a separator. Many functions won't work
for an entry that is a separator.

An entry does not need to be destroyed; it will be destroyed with the tray.

\\param menu the menu to append the entry to.
\\param pos the desired position for the new entry. Entries at or following
           this place will be moved. If pos is -1, the entry is appended.
\\param label the text to be displayed on the entry, in UTF-8 encoding, or
             NULL for a separator.
\\param flags a combination of flags, some of which are mandatory.
\\returns the newly created entry, or NULL if pos is out of bounds.

\\threadsafety This function should be called on the thread that created the
              tray.

\\since This function is available since SDL 3.2.0.

\\sa SDL_TrayEntryFlags
\\sa SDL_GetTrayEntries
\\sa SDL_RemoveTrayEntry
\\sa SDL_GetTrayEntryParent
")
(:FUNCTION "SDL_SetTrayEntryLabel" "Sets the label of an entry.

An entry cannot change between a separator and an ordinary entry; that is,
it is not possible to set a non-NULL label on an entry that has a NULL
label (separators), or to set a NULL label to an entry that has a non-NULL
label. The function will silently fail if that happens.

\\param entry the entry to be updated.
\\param label the new label for the entry in UTF-8 encoding.

\\threadsafety This function should be called on the thread that created the
              tray.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetTrayEntries
\\sa SDL_InsertTrayEntryAt
\\sa SDL_GetTrayEntryLabel
")
(:FUNCTION "SDL_GetTrayEntryLabel" "Gets the label of an entry.

If the returned value is NULL, the entry is a separator.

\\param entry the entry to be read.
\\returns the label of the entry in UTF-8 encoding.

\\threadsafety This function should be called on the thread that created the
              tray.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetTrayEntries
\\sa SDL_InsertTrayEntryAt
\\sa SDL_SetTrayEntryLabel
")
(:FUNCTION "SDL_SetTrayEntryChecked" "Sets whether or not an entry is checked.

The entry must have been created with the SDL_TRAYENTRY_CHECKBOX flag.

\\param entry the entry to be updated.
\\param checked true if the entry should be checked; false otherwise.

\\threadsafety This function should be called on the thread that created the
              tray.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetTrayEntries
\\sa SDL_InsertTrayEntryAt
\\sa SDL_GetTrayEntryChecked
")
(:FUNCTION "SDL_GetTrayEntryChecked" "Gets whether or not an entry is checked.

The entry must have been created with the SDL_TRAYENTRY_CHECKBOX flag.

\\param entry the entry to be read.
\\returns true if the entry is checked; false otherwise.

\\threadsafety This function should be called on the thread that created the
              tray.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetTrayEntries
\\sa SDL_InsertTrayEntryAt
\\sa SDL_SetTrayEntryChecked
")
(:FUNCTION "SDL_SetTrayEntryEnabled" "Sets whether or not an entry is enabled.

\\param entry the entry to be updated.
\\param enabled true if the entry should be enabled; false otherwise.

\\threadsafety This function should be called on the thread that created the
              tray.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetTrayEntries
\\sa SDL_InsertTrayEntryAt
\\sa SDL_GetTrayEntryEnabled
")
(:FUNCTION "SDL_GetTrayEntryEnabled" "Gets whether or not an entry is enabled.

\\param entry the entry to be read.
\\returns true if the entry is enabled; false otherwise.

\\threadsafety This function should be called on the thread that created the
              tray.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetTrayEntries
\\sa SDL_InsertTrayEntryAt
\\sa SDL_SetTrayEntryEnabled
")
(:FUNCTION "SDL_SetTrayEntryCallback"
 "Sets a callback to be invoked when the entry is selected.

\\param entry the entry to be updated.
\\param callback a callback to be invoked when the entry is selected.
\\param userdata an optional pointer to pass extra data to the callback when
                it will be invoked.

\\threadsafety This function should be called on the thread that created the
              tray.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetTrayEntries
\\sa SDL_InsertTrayEntryAt
")
(:FUNCTION "SDL_ClickTrayEntry" "Simulate a click on a tray entry.

\\param entry The entry to activate.

\\threadsafety This function should be called on the thread that created the
              tray.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_DestroyTray" "Destroys a tray object.

This also destroys all associated menus and entries.

\\param tray the tray icon to be destroyed.

\\threadsafety This function should be called on the thread that created the
              tray.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateTray
")
(:FUNCTION "SDL_GetTrayEntryParent"
 "Gets the menu containing a certain tray entry.

\\param entry the entry for which to get the parent menu.
\\returns the parent menu.

\\threadsafety This function should be called on the thread that created the
              tray.

\\since This function is available since SDL 3.2.0.

\\sa SDL_InsertTrayEntryAt
")
(:FUNCTION "SDL_GetTrayMenuParentEntry"
 "Gets the entry for which the menu is a submenu, if the current menu is a
submenu.

Either this function or SDL_GetTrayMenuParentTray() will return non-NULL
for any given menu.

\\param menu the menu for which to get the parent entry.
\\returns the parent entry, or NULL if this menu is not a submenu.

\\threadsafety This function should be called on the thread that created the
              tray.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateTraySubmenu
\\sa SDL_GetTrayMenuParentTray
")
(:FUNCTION "SDL_GetTrayMenuParentTray"
 "Gets the tray for which this menu is the first-level menu, if the current
menu isn't a submenu.

Either this function or SDL_GetTrayMenuParentEntry() will return non-NULL
for any given menu.

\\param menu the menu for which to get the parent enttrayry.
\\returns the parent tray, or NULL if this menu is a submenu.

\\threadsafety This function should be called on the thread that created the
              tray.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateTrayMenu
\\sa SDL_GetTrayMenuParentEntry
")
(:FUNCTION "SDL_UpdateTrays" "Update the trays.

This is called automatically by the event loop and is only needed if you're
using trays but aren't handling SDL events.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_VERSIONNUM"
 "This macro turns the version numbers into a numeric value.

(1,2,3) becomes 1002003.

\\param major the major version number.
\\param minor the minorversion number.
\\param patch the patch version number.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_VERSIONNUM_MAJOR"
 "This macro extracts the major version from a version number

1002003 becomes 1.

\\param version the version number.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_VERSIONNUM_MINOR"
 "This macro extracts the minor version from a version number

1002003 becomes 2.

\\param version the version number.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_VERSIONNUM_MICRO"
 "This macro extracts the micro version from a version number

1002003 becomes 3.

\\param version the version number.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_VERSION_ATLEAST"
 "This macro will evaluate to true if compiled with SDL at least X.Y.Z.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetVersion"
 "Get the version of SDL that is linked against your program.

If you are linking to SDL dynamically, then it is possible that the current
version will be different than the version you compiled against. This
function returns the current version, while SDL_VERSION is the version you
compiled with.

This function may be called safely at any time, even before SDL_Init().

\\returns the version of the linked library.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetRevision
")
(:FUNCTION "SDL_GetRevision"
 "Get the code revision of SDL that is linked against your program.

This value is the revision of the code you are linked with and may be
different from the code you are compiling with, which is found in the
constant SDL_REVISION.

The revision is arbitrary string (a hash value) uniquely identifying the
exact revision of the SDL library in use, and is only useful in comparing
against other revisions. It is NOT an incrementing number.

If SDL wasn't built from a git repository with the appropriate tools, this
will return an empty string.

You shouldn't use this function for anything but logging it for debugging
purposes. The string is not intended to be reliable in any way.

\\returns an arbitrary string, uniquely identifying the exact revision of
         the SDL library in use.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetVersion
")
(:BITFIELD "SDL_DisplayID"
 "This is a unique ID for a display for the time it is connected to the
system, and is never reused for the lifetime of the application.

If the display is disconnected and reconnected, it will get a new ID.

The value 0 is an invalid ID.

\\since This datatype is available since SDL 3.2.0.
")
(:BITFIELD "SDL_WindowID" "This is a unique ID for a window.

The value 0 is an invalid ID.

\\since This datatype is available since SDL 3.2.0.
")
(:ENUM "SDL_SystemTheme" "System theme.

\\since This enum is available since SDL 3.2.0.
")
(:STRUCT "SDL_DisplayModeData" "Internal display mode data.

This lives as a field in SDL_DisplayMode, as opaque data.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_DisplayMode
")
(:STRUCT "SDL_DisplayMode" "The structure that defines a display mode.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_GetFullscreenDisplayModes
\\sa SDL_GetDesktopDisplayMode
\\sa SDL_GetCurrentDisplayMode
\\sa SDL_SetWindowFullscreenMode
\\sa SDL_GetWindowFullscreenMode
")
(:ENUM "SDL_DisplayOrientation"
 "Display orientation values; the way a display is rotated.

\\since This enum is available since SDL 3.2.0.
")
(:STRUCT "SDL_Window" "The struct used as an opaque handle to a window.

\\since This struct is available since SDL 3.2.0.

\\sa SDL_CreateWindow
")
(:BITFIELD "SDL_WindowFlags" "The flags on a window.

These cover a lot of true/false, or on/off, window state. Some of it is
immutable after being set through SDL_CreateWindow(), some of it can be
changed on existing windows by the app, and some of it might be altered by
the user or system outside of the app's control.

\\since This datatype is available since SDL 3.2.0.

\\sa SDL_GetWindowFlags
")
(:FUNCTION "SDL_WINDOWPOS_UNDEFINED_DISPLAY"
 "Used to indicate that you don't care what the window position/display is.

This always uses the primary display.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_WINDOWPOS_ISUNDEFINED"
 "A macro to test if the window position is marked as \"undefined.\"

\\param X the window position value.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_WINDOWPOS_CENTERED_DISPLAY"
 "Used to indicate that the window position should be centered.

This always uses the primary display.

\\since This macro is available since SDL 3.2.0.
")
(:FUNCTION "SDL_WINDOWPOS_ISCENTERED"
 "A macro to test if the window position is marked as \"centered.\"

\\param X the window position value.

\\since This macro is available since SDL 3.2.0.
")
(:ENUM "SDL_FlashOperation" "Window flash operation.

\\since This enum is available since SDL 3.2.0.
")
(:STRUCT "SDL_GLContextState" "An opaque handle to an OpenGL context.

\\since This datatype is available since SDL 3.2.0.

\\sa SDL_GL_CreateContext
")
(:TYPEDEF "SDL_EGLDisplay" "Opaque type for an EGL display.

\\since This datatype is available since SDL 3.2.0.
")
(:TYPEDEF "SDL_EGLConfig" "Opaque type for an EGL config.

\\since This datatype is available since SDL 3.2.0.
")
(:TYPEDEF "SDL_EGLSurface" "Opaque type for an EGL surface.

\\since This datatype is available since SDL 3.2.0.
")
(:TYPEDEF "SDL_EGLAttrib" "An EGL attribute, used when creating an EGL context.

\\since This datatype is available since SDL 3.2.0.
")
(:TYPEDEF "SDL_EGLint"
 "An EGL integer attribute, used when creating an EGL surface.

\\since This datatype is available since SDL 3.2.0.
")
(:ENUM "SDL_GLAttr" "An enumeration of OpenGL configuration attributes.

While you can set most OpenGL attributes normally, the attributes listed
above must be known before SDL creates the window that will be used with
the OpenGL context. These attributes are set and read with
SDL_GL_SetAttribute() and SDL_GL_GetAttribute().

In some cases, these attributes are minimum requests; the GL does not
promise to give you exactly what you asked for. It's possible to ask for a
16-bit depth buffer and get a 24-bit one instead, for example, or to ask
for no stencil buffer and still have one available. Context creation should
fail if the GL can't provide your requested attributes at a minimum, but
you should check to see exactly what you got.

\\since This enum is available since SDL 3.2.0.
")
(:BITFIELD "SDL_GLProfile"
 "Possible values to be set for the SDL_GL_CONTEXT_PROFILE_MASK attribute.

\\since This datatype is available since SDL 3.2.0.
")
(:BITFIELD "SDL_GLContextFlag"
 "Possible flags to be set for the SDL_GL_CONTEXT_FLAGS attribute.

\\since This datatype is available since SDL 3.2.0.
")
(:BITFIELD "SDL_GLContextReleaseFlag"
 "Possible values to be set for the SDL_GL_CONTEXT_RELEASE_BEHAVIOR
attribute.

\\since This datatype is available since SDL 3.2.0.
")
(:BITFIELD "SDL_GLContextResetNotification"
 "Possible values to be set SDL_GL_CONTEXT_RESET_NOTIFICATION attribute.

\\since This datatype is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetNumVideoDrivers"
 "Get the number of video drivers compiled into SDL.

\\returns the number of built in video drivers.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetVideoDriver
")
(:FUNCTION "SDL_GetVideoDriver" "Get the name of a built in video driver.

The video drivers are presented in the order in which they are normally
checked during initialization.

The names of drivers are all simple, low-ASCII identifiers, like \"cocoa\",
\"x11\" or \"windows\". These never have Unicode characters, and are not meant
to be proper names.

\\param index the index of a video driver.
\\returns the name of the video driver with the given **index**.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetNumVideoDrivers
")
(:FUNCTION "SDL_GetCurrentVideoDriver"
 "Get the name of the currently initialized video driver.

The names of drivers are all simple, low-ASCII identifiers, like \"cocoa\",
\"x11\" or \"windows\". These never have Unicode characters, and are not meant
to be proper names.

\\returns the name of the current video driver or NULL if no driver has been
         initialized.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetNumVideoDrivers
\\sa SDL_GetVideoDriver
")
(:FUNCTION "SDL_GetSystemTheme" "Get the current system theme.

\\returns the current system theme, light, dark, or unknown.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetDisplays" "Get a list of currently connected displays.

\\param count a pointer filled in with the number of displays returned, may
             be NULL.
\\returns a 0 terminated array of display instance IDs or NULL on failure;
         call SDL_GetError() for more information. This should be freed
         with SDL_free() when it is no longer needed.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetPrimaryDisplay" "Return the primary display.

\\returns the instance ID of the primary display on success or 0 on failure;
         call SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetDisplays
")
(:FUNCTION "SDL_GetDisplayProperties"
 "Get the properties associated with a display.

The following read-only properties are provided by SDL:

- `SDL_PROP_DISPLAY_HDR_ENABLED_BOOLEAN`: true if the display has HDR
  headroom above the SDR white point. This is for informational and
  diagnostic purposes only, as not all platforms provide this information
  at the display level.

On KMS/DRM:

- `SDL_PROP_DISPLAY_KMSDRM_PANEL_ORIENTATION_NUMBER`: the \"panel
  orientation\" property for the display in degrees of clockwise rotation.
  Note that this is provided only as a hint, and the application is
  responsible for any coordinate transformations needed to conform to the
  requested display orientation.

\\param displayID the instance ID of the display to query.
\\returns a valid property ID on success or 0 on failure; call
         SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetDisplayName" "Get the name of a display in UTF-8 encoding.

\\param displayID the instance ID of the display to query.
\\returns the name of a display or NULL on failure; call SDL_GetError() for
         more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetDisplays
")
(:FUNCTION "SDL_GetDisplayBounds"
 "Get the desktop area represented by a display.

The primary display is often located at (0,0), but may be placed at a
different location depending on monitor layout.

\\param displayID the instance ID of the display to query.
\\param rect the SDL_Rect structure filled in with the display bounds.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetDisplayUsableBounds
\\sa SDL_GetDisplays
")
(:FUNCTION "SDL_GetDisplayUsableBounds"
 "Get the usable desktop area represented by a display, in screen
coordinates.

This is the same area as SDL_GetDisplayBounds() reports, but with portions
reserved by the system removed. For example, on Apple's macOS, this
subtracts the area occupied by the menu bar and dock.

Setting a window to be fullscreen generally bypasses these unusable areas,
so these are good guidelines for the maximum space available to a
non-fullscreen window.

\\param displayID the instance ID of the display to query.
\\param rect the SDL_Rect structure filled in with the display bounds.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetDisplayBounds
\\sa SDL_GetDisplays
")
(:FUNCTION "SDL_GetNaturalDisplayOrientation"
 "Get the orientation of a display when it is unrotated.

\\param displayID the instance ID of the display to query.
\\returns the SDL_DisplayOrientation enum value of the display, or
         `SDL_ORIENTATION_UNKNOWN` if it isn't available.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetDisplays
")
(:FUNCTION "SDL_GetCurrentDisplayOrientation" "Get the orientation of a display.

\\param displayID the instance ID of the display to query.
\\returns the SDL_DisplayOrientation enum value of the display, or
         `SDL_ORIENTATION_UNKNOWN` if it isn't available.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetDisplays
")
(:FUNCTION "SDL_GetDisplayContentScale" "Get the content scale of a display.

The content scale is the expected scale for content based on the DPI
settings of the display. For example, a 4K display might have a 2.0 (200%)
display scale, which means that the user expects UI elements to be twice as
big on this display, to aid in readability.

After window creation, SDL_GetWindowDisplayScale() should be used to query
the content scale factor for individual windows instead of querying the
display for a window and calling this function, as the per-window content
scale factor may differ from the base value of the display it is on,
particularly on high-DPI and/or multi-monitor desktop configurations.

\\param displayID the instance ID of the display to query.
\\returns the content scale of the display, or 0.0f on failure; call
         SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowDisplayScale
\\sa SDL_GetDisplays
")
(:FUNCTION "SDL_GetFullscreenDisplayModes"
 "Get a list of fullscreen display modes available on a display.

The display modes are sorted in this priority:

- w -> largest to smallest
- h -> largest to smallest
- bits per pixel -> more colors to fewer colors
- packed pixel layout -> largest to smallest
- refresh rate -> highest to lowest
- pixel density -> lowest to highest

\\param displayID the instance ID of the display to query.
\\param count a pointer filled in with the number of display modes returned,
             may be NULL.
\\returns a NULL terminated array of display mode pointers or NULL on
         failure; call SDL_GetError() for more information. This is a
         single allocation that should be freed with SDL_free() when it is
         no longer needed.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetDisplays
")
(:FUNCTION "SDL_GetClosestFullscreenDisplayMode"
 "Get the closest match to the requested display mode.

The available display modes are scanned and `closest` is filled in with the
closest mode matching the requested mode and returned. The mode format and
refresh rate default to the desktop mode if they are set to 0. The modes
are scanned with size being first priority, format being second priority,
and finally checking the refresh rate. If all the available modes are too
small, then false is returned.

\\param displayID the instance ID of the display to query.
\\param w the width in pixels of the desired display mode.
\\param h the height in pixels of the desired display mode.
\\param refresh_rate the refresh rate of the desired display mode, or 0.0f
                    for the desktop refresh rate.
\\param include_high_density_modes boolean to include high density modes in
                                  the search.
\\param closest a pointer filled in with the closest display mode equal to
               or larger than the desired mode.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetDisplays
\\sa SDL_GetFullscreenDisplayModes
")
(:FUNCTION "SDL_GetDesktopDisplayMode"
 "Get information about the desktop's display mode.

There's a difference between this function and SDL_GetCurrentDisplayMode()
when SDL runs fullscreen and has changed the resolution. In that case this
function will return the previous native display mode, and not the current
display mode.

\\param displayID the instance ID of the display to query.
\\returns a pointer to the desktop display mode or NULL on failure; call
         SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetCurrentDisplayMode
\\sa SDL_GetDisplays
")
(:FUNCTION "SDL_GetCurrentDisplayMode"
 "Get information about the current display mode.

There's a difference between this function and SDL_GetDesktopDisplayMode()
when SDL runs fullscreen and has changed the resolution. In that case this
function will return the current display mode, and not the previous native
display mode.

\\param displayID the instance ID of the display to query.
\\returns a pointer to the desktop display mode or NULL on failure; call
         SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetDesktopDisplayMode
\\sa SDL_GetDisplays
")
(:FUNCTION "SDL_GetDisplayForPoint" "Get the display containing a point.

\\param point the point to query.
\\returns the instance ID of the display containing the point or 0 on
         failure; call SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetDisplayBounds
\\sa SDL_GetDisplays
")
(:FUNCTION "SDL_GetDisplayForRect" "Get the display primarily containing a rect.

\\param rect the rect to query.
\\returns the instance ID of the display entirely containing the rect or
         closest to the center of the rect on success or 0 on failure; call
         SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetDisplayBounds
\\sa SDL_GetDisplays
")
(:FUNCTION "SDL_GetDisplayForWindow" "Get the display associated with a window.

\\param window the window to query.
\\returns the instance ID of the display containing the center of the window
         on success or 0 on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetDisplayBounds
\\sa SDL_GetDisplays
")
(:FUNCTION "SDL_GetWindowPixelDensity" "Get the pixel density of a window.

This is a ratio of pixel size to window size. For example, if the window is
1920x1080 and it has a high density back buffer of 3840x2160 pixels, it
would have a pixel density of 2.0.

\\param window the window to query.
\\returns the pixel density or 0.0f on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowDisplayScale
")
(:FUNCTION "SDL_GetWindowDisplayScale"
 "Get the content display scale relative to a window's pixel size.

This is a combination of the window pixel density and the display content
scale, and is the expected scale for displaying content in this window. For
example, if a 3840x2160 window had a display scale of 2.0, the user expects
the content to take twice as many pixels and be the same physical size as
if it were being displayed in a 1920x1080 window with a display scale of
1.0.

Conceptually this value corresponds to the scale display setting, and is
updated when that setting is changed, or the window moves to a display with
a different scale setting.

\\param window the window to query.
\\returns the display scale, or 0.0f on failure; call SDL_GetError() for
         more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SetWindowFullscreenMode"
 "Set the display mode to use when a window is visible and fullscreen.

This only affects the display mode used when the window is fullscreen. To
change the window size when the window is not fullscreen, use
SDL_SetWindowSize().

If the window is currently in the fullscreen state, this request is
asynchronous on some windowing systems and the new mode dimensions may not
be applied immediately upon the return of this function. If an immediate
change is required, call SDL_SyncWindow() to block until the changes have
taken effect.

When the new mode takes effect, an SDL_EVENT_WINDOW_RESIZED and/or an
SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED event will be emitted with the new mode
dimensions.

\\param window the window to affect.
\\param mode a pointer to the display mode to use, which can be NULL for
            borderless fullscreen desktop mode, or one of the fullscreen
            modes returned by SDL_GetFullscreenDisplayModes() to set an
            exclusive fullscreen mode.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowFullscreenMode
\\sa SDL_SetWindowFullscreen
\\sa SDL_SyncWindow
")
(:FUNCTION "SDL_GetWindowFullscreenMode"
 "Query the display mode to use when a window is visible at fullscreen.

\\param window the window to query.
\\returns a pointer to the exclusive fullscreen mode to use or NULL for
         borderless fullscreen desktop mode.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetWindowFullscreenMode
\\sa SDL_SetWindowFullscreen
")
(:FUNCTION "SDL_GetWindowICCProfile"
 "Get the raw ICC profile data for the screen the window is currently on.

\\param window the window to query.
\\param size the size of the ICC profile.
\\returns the raw ICC profile data on success or NULL on failure; call
         SDL_GetError() for more information. This should be freed with
         SDL_free() when it is no longer needed.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetWindowPixelFormat"
 "Get the pixel format associated with the window.

\\param window the window to query.
\\returns the pixel format of the window on success or
         SDL_PIXELFORMAT_UNKNOWN on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetWindows" "Get a list of valid windows.

\\param count a pointer filled in with the number of windows returned, may
             be NULL.
\\returns a NULL terminated array of SDL_Window pointers or NULL on failure;
         call SDL_GetError() for more information. This is a single
         allocation that should be freed with SDL_free() when it is no
         longer needed.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_CreateWindow"
 "Create a window with the specified dimensions and flags.

`flags` may be any of the following OR'd together:

- `SDL_WINDOW_FULLSCREEN`: fullscreen window at desktop resolution
- `SDL_WINDOW_OPENGL`: window usable with an OpenGL context
- `SDL_WINDOW_OCCLUDED`: window partially or completely obscured by another
  window
- `SDL_WINDOW_HIDDEN`: window is not visible
- `SDL_WINDOW_BORDERLESS`: no window decoration
- `SDL_WINDOW_RESIZABLE`: window can be resized
- `SDL_WINDOW_MINIMIZED`: window is minimized
- `SDL_WINDOW_MAXIMIZED`: window is maximized
- `SDL_WINDOW_MOUSE_GRABBED`: window has grabbed mouse focus
- `SDL_WINDOW_INPUT_FOCUS`: window has input focus
- `SDL_WINDOW_MOUSE_FOCUS`: window has mouse focus
- `SDL_WINDOW_EXTERNAL`: window not created by SDL
- `SDL_WINDOW_MODAL`: window is modal
- `SDL_WINDOW_HIGH_PIXEL_DENSITY`: window uses high pixel density back
  buffer if possible
- `SDL_WINDOW_MOUSE_CAPTURE`: window has mouse captured (unrelated to
  MOUSE_GRABBED)
- `SDL_WINDOW_ALWAYS_ON_TOP`: window should always be above others
- `SDL_WINDOW_UTILITY`: window should be treated as a utility window, not
  showing in the task bar and window list
- `SDL_WINDOW_TOOLTIP`: window should be treated as a tooltip and does not
  get mouse or keyboard focus, requires a parent window
- `SDL_WINDOW_POPUP_MENU`: window should be treated as a popup menu,
  requires a parent window
- `SDL_WINDOW_KEYBOARD_GRABBED`: window has grabbed keyboard input
- `SDL_WINDOW_VULKAN`: window usable with a Vulkan instance
- `SDL_WINDOW_METAL`: window usable with a Metal instance
- `SDL_WINDOW_TRANSPARENT`: window with transparent buffer
- `SDL_WINDOW_NOT_FOCUSABLE`: window should not be focusable

The SDL_Window is implicitly shown if SDL_WINDOW_HIDDEN is not set.

On Apple's macOS, you **must** set the NSHighResolutionCapable Info.plist
property to YES, otherwise you will not receive a High-DPI OpenGL canvas.

The window pixel size may differ from its window coordinate size if the
window is on a high pixel density display. Use SDL_GetWindowSize() to query
the client area's size in window coordinates, and
SDL_GetWindowSizeInPixels() or SDL_GetRenderOutputSize() to query the
drawable size in pixels. Note that the drawable size can vary after the
window is created and should be queried again if you get an
SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED event.

If the window is created with any of the SDL_WINDOW_OPENGL or
SDL_WINDOW_VULKAN flags, then the corresponding LoadLibrary function
(SDL_GL_LoadLibrary or SDL_Vulkan_LoadLibrary) is called and the
corresponding UnloadLibrary function is called by SDL_DestroyWindow().

If SDL_WINDOW_VULKAN is specified and there isn't a working Vulkan driver,
SDL_CreateWindow() will fail, because SDL_Vulkan_LoadLibrary() will fail.

If SDL_WINDOW_METAL is specified on an OS that does not support Metal,
SDL_CreateWindow() will fail.

If you intend to use this window with an SDL_Renderer, you should use
SDL_CreateWindowAndRenderer() instead of this function, to avoid window
flicker.

On non-Apple devices, SDL requires you to either not link to the Vulkan
loader or link to a dynamic library version. This limitation may be removed
in a future version of SDL.

\\param title the title of the window, in UTF-8 encoding.
\\param w the width of the window.
\\param h the height of the window.
\\param flags 0, or one or more SDL_WindowFlags OR'd together.
\\returns the window that was created or NULL on failure; call
         SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateWindowAndRenderer
\\sa SDL_CreatePopupWindow
\\sa SDL_CreateWindowWithProperties
\\sa SDL_DestroyWindow
")
(:FUNCTION "SDL_CreatePopupWindow"
 "Create a child popup window of the specified parent window.

The flags parameter **must** contain at least one of the following:

- `SDL_WINDOW_TOOLTIP`: The popup window is a tooltip and will not pass any
  input events.
- `SDL_WINDOW_POPUP_MENU`: The popup window is a popup menu. The topmost
  popup menu will implicitly gain the keyboard focus.

The following flags are not relevant to popup window creation and will be
ignored:

- `SDL_WINDOW_MINIMIZED`
- `SDL_WINDOW_MAXIMIZED`
- `SDL_WINDOW_FULLSCREEN`
- `SDL_WINDOW_BORDERLESS`

The following flags are incompatible with popup window creation and will
cause it to fail:

- `SDL_WINDOW_UTILITY`
- `SDL_WINDOW_MODAL`

The parent parameter **must** be non-null and a valid window. The parent of
a popup window can be either a regular, toplevel window, or another popup
window.

Popup windows cannot be minimized, maximized, made fullscreen, raised,
flash, be made a modal window, be the parent of a toplevel window, or grab
the mouse and/or keyboard. Attempts to do so will fail.

Popup windows implicitly do not have a border/decorations and do not appear
on the taskbar/dock or in lists of windows such as alt-tab menus.

If a parent window is hidden or destroyed, any child popup windows will be
recursively hidden or destroyed as well. Child popup windows not explicitly
hidden will be restored when the parent is shown.

\\param parent the parent of the window, must not be NULL.
\\param offset_x the x position of the popup window relative to the origin
                of the parent.
\\param offset_y the y position of the popup window relative to the origin
                of the parent window.
\\param w the width of the window.
\\param h the height of the window.
\\param flags SDL_WINDOW_TOOLTIP or SDL_WINDOW_POPUP_MENU, and zero or more
             additional SDL_WindowFlags OR'd together.
\\returns the window that was created or NULL on failure; call
         SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateWindow
\\sa SDL_CreateWindowWithProperties
\\sa SDL_DestroyWindow
\\sa SDL_GetWindowParent
")
(:FUNCTION "SDL_CreateWindowWithProperties"
 "Create a window with the specified properties.

These are the supported properties:

- `SDL_PROP_WINDOW_CREATE_ALWAYS_ON_TOP_BOOLEAN`: true if the window should
  be always on top
- `SDL_PROP_WINDOW_CREATE_BORDERLESS_BOOLEAN`: true if the window has no
  window decoration
- `SDL_PROP_WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN`: true if the
  window will be used with an externally managed graphics context.
- `SDL_PROP_WINDOW_CREATE_FOCUSABLE_BOOLEAN`: true if the window should
  accept keyboard input (defaults true)
- `SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN`: true if the window should
  start in fullscreen mode at desktop resolution
- `SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER`: the height of the window
- `SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN`: true if the window should start
  hidden
- `SDL_PROP_WINDOW_CREATE_HIGH_PIXEL_DENSITY_BOOLEAN`: true if the window
  uses a high pixel density buffer if possible
- `SDL_PROP_WINDOW_CREATE_MAXIMIZED_BOOLEAN`: true if the window should
  start maximized
- `SDL_PROP_WINDOW_CREATE_MENU_BOOLEAN`: true if the window is a popup menu
- `SDL_PROP_WINDOW_CREATE_METAL_BOOLEAN`: true if the window will be used
  with Metal rendering
- `SDL_PROP_WINDOW_CREATE_MINIMIZED_BOOLEAN`: true if the window should
  start minimized
- `SDL_PROP_WINDOW_CREATE_MODAL_BOOLEAN`: true if the window is modal to
  its parent
- `SDL_PROP_WINDOW_CREATE_MOUSE_GRABBED_BOOLEAN`: true if the window starts
  with grabbed mouse focus
- `SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN`: true if the window will be used
  with OpenGL rendering
- `SDL_PROP_WINDOW_CREATE_PARENT_POINTER`: an SDL_Window that will be the
  parent of this window, required for windows with the \"tooltip\", \"menu\",
  and \"modal\" properties
- `SDL_PROP_WINDOW_CREATE_RESIZABLE_BOOLEAN`: true if the window should be
  resizable
- `SDL_PROP_WINDOW_CREATE_TITLE_STRING`: the title of the window, in UTF-8
  encoding
- `SDL_PROP_WINDOW_CREATE_TRANSPARENT_BOOLEAN`: true if the window show
  transparent in the areas with alpha of 0
- `SDL_PROP_WINDOW_CREATE_TOOLTIP_BOOLEAN`: true if the window is a tooltip
- `SDL_PROP_WINDOW_CREATE_UTILITY_BOOLEAN`: true if the window is a utility
  window, not showing in the task bar and window list
- `SDL_PROP_WINDOW_CREATE_VULKAN_BOOLEAN`: true if the window will be used
  with Vulkan rendering
- `SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER`: the width of the window
- `SDL_PROP_WINDOW_CREATE_X_NUMBER`: the x position of the window, or
  `SDL_WINDOWPOS_CENTERED`, defaults to `SDL_WINDOWPOS_UNDEFINED`. This is
  relative to the parent for windows with the \"tooltip\" or \"menu\" property
  set.
- `SDL_PROP_WINDOW_CREATE_Y_NUMBER`: the y position of the window, or
  `SDL_WINDOWPOS_CENTERED`, defaults to `SDL_WINDOWPOS_UNDEFINED`. This is
  relative to the parent for windows with the \"tooltip\" or \"menu\" property
  set.

These are additional supported properties on macOS:

- `SDL_PROP_WINDOW_CREATE_COCOA_WINDOW_POINTER`: the
  `(__unsafe_unretained)` NSWindow associated with the window, if you want
  to wrap an existing window.
- `SDL_PROP_WINDOW_CREATE_COCOA_VIEW_POINTER`: the `(__unsafe_unretained)`
  NSView associated with the window, defaults to `[window contentView]`

These are additional supported properties on Wayland:

- `SDL_PROP_WINDOW_CREATE_WAYLAND_SURFACE_ROLE_CUSTOM_BOOLEAN` - true if
  the application wants to use the Wayland surface for a custom role and
  does not want it attached to an XDG toplevel window. See
  [README/wayland](README/wayland) for more information on using custom
  surfaces.
- `SDL_PROP_WINDOW_CREATE_WAYLAND_CREATE_EGL_WINDOW_BOOLEAN` - true if the
  application wants an associated `wl_egl_window` object to be created and
  attached to the window, even if the window does not have the OpenGL
  property or `SDL_WINDOW_OPENGL` flag set.
- `SDL_PROP_WINDOW_CREATE_WAYLAND_WL_SURFACE_POINTER` - the wl_surface
  associated with the window, if you want to wrap an existing window. See
  [README/wayland](README/wayland) for more information.

These are additional supported properties on Windows:

- `SDL_PROP_WINDOW_CREATE_WIN32_HWND_POINTER`: the HWND associated with the
  window, if you want to wrap an existing window.
- `SDL_PROP_WINDOW_CREATE_WIN32_PIXEL_FORMAT_HWND_POINTER`: optional,
  another window to share pixel format with, useful for OpenGL windows

These are additional supported properties with X11:

- `SDL_PROP_WINDOW_CREATE_X11_WINDOW_NUMBER`: the X11 Window associated
  with the window, if you want to wrap an existing window.

The window is implicitly shown if the \"hidden\" property is not set.

Windows with the \"tooltip\" and \"menu\" properties are popup windows and have
the behaviors and guidelines outlined in SDL_CreatePopupWindow().

If this window is being created to be used with an SDL_Renderer, you should
not add a graphics API specific property
(`SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN`, etc), as SDL will handle that
internally when it chooses a renderer. However, SDL might need to recreate
your window at that point, which may cause the window to appear briefly,
and then flicker as it is recreated. The correct approach to this is to
create the window with the `SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN` property
set to true, then create the renderer, then show the window with
SDL_ShowWindow().

\\param props the properties to use.
\\returns the window that was created or NULL on failure; call
         SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateProperties
\\sa SDL_CreateWindow
\\sa SDL_DestroyWindow
")
(:FUNCTION "SDL_GetWindowID" "Get the numeric ID of a window.

The numeric ID is what SDL_WindowEvent references, and is necessary to map
these events to specific SDL_Window objects.

\\param window the window to query.
\\returns the ID of the window on success or 0 on failure; call
         SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowFromID
")
(:FUNCTION "SDL_GetWindowFromID" "Get a window from a stored ID.

The numeric ID is what SDL_WindowEvent references, and is necessary to map
these events to specific SDL_Window objects.

\\param id the ID of the window.
\\returns the window associated with `id` or NULL if it doesn't exist; call
         SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowID
")
(:FUNCTION "SDL_GetWindowParent" "Get parent of a window.

\\param window the window to query.
\\returns the parent of the window on success or NULL if the window has no
         parent.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreatePopupWindow
")
(:FUNCTION "SDL_GetWindowProperties"
 "Get the properties associated with a window.

The following read-only properties are provided by SDL:

- `SDL_PROP_WINDOW_SHAPE_POINTER`: the surface associated with a shaped
  window
- `SDL_PROP_WINDOW_HDR_ENABLED_BOOLEAN`: true if the window has HDR
  headroom above the SDR white point. This property can change dynamically
  when SDL_EVENT_WINDOW_HDR_STATE_CHANGED is sent.
- `SDL_PROP_WINDOW_SDR_WHITE_LEVEL_FLOAT`: the value of SDR white in the
  SDL_COLORSPACE_SRGB_LINEAR colorspace. On Windows this corresponds to the
  SDR white level in scRGB colorspace, and on Apple platforms this is
  always 1.0 for EDR content. This property can change dynamically when
  SDL_EVENT_WINDOW_HDR_STATE_CHANGED is sent.
- `SDL_PROP_WINDOW_HDR_HEADROOM_FLOAT`: the additional high dynamic range
  that can be displayed, in terms of the SDR white point. When HDR is not
  enabled, this will be 1.0. This property can change dynamically when
  SDL_EVENT_WINDOW_HDR_STATE_CHANGED is sent.

On Android:

- `SDL_PROP_WINDOW_ANDROID_WINDOW_POINTER`: the ANativeWindow associated
  with the window
- `SDL_PROP_WINDOW_ANDROID_SURFACE_POINTER`: the EGLSurface associated with
  the window

On iOS:

- `SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER`: the `(__unsafe_unretained)`
  UIWindow associated with the window
- `SDL_PROP_WINDOW_UIKIT_METAL_VIEW_TAG_NUMBER`: the NSInteger tag
  associated with metal views on the window
- `SDL_PROP_WINDOW_UIKIT_OPENGL_FRAMEBUFFER_NUMBER`: the OpenGL view's
  framebuffer object. It must be bound when rendering to the screen using
  OpenGL.
- `SDL_PROP_WINDOW_UIKIT_OPENGL_RENDERBUFFER_NUMBER`: the OpenGL view's
  renderbuffer object. It must be bound when SDL_GL_SwapWindow is called.
- `SDL_PROP_WINDOW_UIKIT_OPENGL_RESOLVE_FRAMEBUFFER_NUMBER`: the OpenGL
  view's resolve framebuffer, when MSAA is used.

On KMS/DRM:

- `SDL_PROP_WINDOW_KMSDRM_DEVICE_INDEX_NUMBER`: the device index associated
  with the window (e.g. the X in /dev/dri/cardX)
- `SDL_PROP_WINDOW_KMSDRM_DRM_FD_NUMBER`: the DRM FD associated with the
  window
- `SDL_PROP_WINDOW_KMSDRM_GBM_DEVICE_POINTER`: the GBM device associated
  with the window

On macOS:

- `SDL_PROP_WINDOW_COCOA_WINDOW_POINTER`: the `(__unsafe_unretained)`
  NSWindow associated with the window
- `SDL_PROP_WINDOW_COCOA_METAL_VIEW_TAG_NUMBER`: the NSInteger tag
  assocated with metal views on the window

On OpenVR:

- `SDL_PROP_WINDOW_OPENVR_OVERLAY_ID`: the OpenVR Overlay Handle ID for the
  associated overlay window.

On Vivante:

- `SDL_PROP_WINDOW_VIVANTE_DISPLAY_POINTER`: the EGLNativeDisplayType
  associated with the window
- `SDL_PROP_WINDOW_VIVANTE_WINDOW_POINTER`: the EGLNativeWindowType
  associated with the window
- `SDL_PROP_WINDOW_VIVANTE_SURFACE_POINTER`: the EGLSurface associated with
  the window

On Windows:

- `SDL_PROP_WINDOW_WIN32_HWND_POINTER`: the HWND associated with the window
- `SDL_PROP_WINDOW_WIN32_HDC_POINTER`: the HDC associated with the window
- `SDL_PROP_WINDOW_WIN32_INSTANCE_POINTER`: the HINSTANCE associated with
  the window

On Wayland:

Note: The `xdg_*` window objects do not internally persist across window
show/hide calls. They will be null if the window is hidden and must be
queried each time it is shown.

- `SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER`: the wl_display associated with
  the window
- `SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER`: the wl_surface associated with
  the window
- `SDL_PROP_WINDOW_WAYLAND_VIEWPORT_POINTER`: the wp_viewport associated
  with the window
- `SDL_PROP_WINDOW_WAYLAND_EGL_WINDOW_POINTER`: the wl_egl_window
  associated with the window
- `SDL_PROP_WINDOW_WAYLAND_XDG_SURFACE_POINTER`: the xdg_surface associated
  with the window
- `SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_POINTER`: the xdg_toplevel role
  associated with the window
- 'SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING': the export
  handle associated with the window
- `SDL_PROP_WINDOW_WAYLAND_XDG_POPUP_POINTER`: the xdg_popup role
  associated with the window
- `SDL_PROP_WINDOW_WAYLAND_XDG_POSITIONER_POINTER`: the xdg_positioner
  associated with the window, in popup mode

On X11:

- `SDL_PROP_WINDOW_X11_DISPLAY_POINTER`: the X11 Display associated with
  the window
- `SDL_PROP_WINDOW_X11_SCREEN_NUMBER`: the screen number associated with
  the window
- `SDL_PROP_WINDOW_X11_WINDOW_NUMBER`: the X11 Window associated with the
  window

\\param window the window to query.
\\returns a valid property ID on success or 0 on failure; call
         SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GetWindowFlags" "Get the window flags.

\\param window the window to query.
\\returns a mask of the SDL_WindowFlags associated with `window`.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateWindow
\\sa SDL_HideWindow
\\sa SDL_MaximizeWindow
\\sa SDL_MinimizeWindow
\\sa SDL_SetWindowFullscreen
\\sa SDL_SetWindowMouseGrab
\\sa SDL_ShowWindow
")
(:FUNCTION "SDL_SetWindowTitle" "Set the title of a window.

This string is expected to be in UTF-8 encoding.

\\param window the window to change.
\\param title the desired window title in UTF-8 format.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowTitle
")
(:FUNCTION "SDL_GetWindowTitle" "Get the title of a window.

\\param window the window to query.
\\returns the title of the window in UTF-8 format or \"\" if there is no
         title.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetWindowTitle
")
(:FUNCTION "SDL_SetWindowIcon" "Set the icon for a window.

If this function is passed a surface with alternate representations, the
surface will be interpreted as the content to be used for 100% display
scale, and the alternate representations will be used for high DPI
situations. For example, if the original surface is 32x32, then on a 2x
macOS display or 200% display scale on Windows, a 64x64 version of the
image will be used, if available. If a matching version of the image isn't
available, the closest larger size image will be downscaled to the
appropriate size and be used instead, if available. Otherwise, the closest
smaller image will be upscaled and be used instead.

\\param window the window to change.
\\param icon an SDL_Surface structure containing the icon for the window.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SetWindowPosition" "Request that the window's position be set.

If the window is in an exclusive fullscreen or maximized state, this
request has no effect.

This can be used to reposition fullscreen-desktop windows onto a different
display, however, as exclusive fullscreen windows are locked to a specific
display, they can only be repositioned programmatically via
SDL_SetWindowFullscreenMode().

On some windowing systems this request is asynchronous and the new
coordinates may not have have been applied immediately upon the return of
this function. If an immediate change is required, call SDL_SyncWindow() to
block until the changes have taken effect.

When the window position changes, an SDL_EVENT_WINDOW_MOVED event will be
emitted with the window's new coordinates. Note that the new coordinates
may not match the exact coordinates requested, as some windowing systems
can restrict the position of the window in certain scenarios (e.g.
constraining the position so the window is always within desktop bounds).
Additionally, as this is just a request, it can be denied by the windowing
system.

\\param window the window to reposition.
\\param x the x coordinate of the window, or `SDL_WINDOWPOS_CENTERED` or
         `SDL_WINDOWPOS_UNDEFINED`.
\\param y the y coordinate of the window, or `SDL_WINDOWPOS_CENTERED` or
         `SDL_WINDOWPOS_UNDEFINED`.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowPosition
\\sa SDL_SyncWindow
")
(:FUNCTION "SDL_GetWindowPosition" "Get the position of a window.

This is the current position of the window as last reported by the
windowing system.

If you do not need the value for one of the positions a NULL may be passed
in the `x` or `y` parameter.

\\param window the window to query.
\\param x a pointer filled in with the x position of the window, may be
         NULL.
\\param y a pointer filled in with the y position of the window, may be
         NULL.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetWindowPosition
")
(:FUNCTION "SDL_SetWindowSize"
 "Request that the size of a window's client area be set.

If the window is in a fullscreen or maximized state, this request has no
effect.

To change the exclusive fullscreen mode of a window, use
SDL_SetWindowFullscreenMode().

On some windowing systems, this request is asynchronous and the new window
size may not have have been applied immediately upon the return of this
function. If an immediate change is required, call SDL_SyncWindow() to
block until the changes have taken effect.

When the window size changes, an SDL_EVENT_WINDOW_RESIZED event will be
emitted with the new window dimensions. Note that the new dimensions may
not match the exact size requested, as some windowing systems can restrict
the window size in certain scenarios (e.g. constraining the size of the
content area to remain within the usable desktop bounds). Additionally, as
this is just a request, it can be denied by the windowing system.

\\param window the window to change.
\\param w the width of the window, must be > 0.
\\param h the height of the window, must be > 0.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowSize
\\sa SDL_SetWindowFullscreenMode
\\sa SDL_SyncWindow
")
(:FUNCTION "SDL_GetWindowSize" "Get the size of a window's client area.

The window pixel size may differ from its window coordinate size if the
window is on a high pixel density display. Use SDL_GetWindowSizeInPixels()
or SDL_GetRenderOutputSize() to get the real client area size in pixels.

\\param window the window to query the width and height from.
\\param w a pointer filled in with the width of the window, may be NULL.
\\param h a pointer filled in with the height of the window, may be NULL.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetRenderOutputSize
\\sa SDL_GetWindowSizeInPixels
\\sa SDL_SetWindowSize
")
(:FUNCTION "SDL_GetWindowSafeArea" "Get the safe area for this window.

Some devices have portions of the screen which are partially obscured or
not interactive, possibly due to on-screen controls, curved edges, camera
notches, TV overscan, etc. This function provides the area of the window
which is safe to have interactable content. You should continue rendering
into the rest of the window, but it should not contain visually important
or interactible content.

\\param window the window to query.
\\param rect a pointer filled in with the client area that is safe for
            interactive content.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SetWindowAspectRatio"
 "Request that the aspect ratio of a window's client area be set.

The aspect ratio is the ratio of width divided by height, e.g. 2560x1600
would be 1.6. Larger aspect ratios are wider and smaller aspect ratios are
narrower.

If, at the time of this request, the window in a fixed-size state, such as
maximized or fullscreen, the request will be deferred until the window
exits this state and becomes resizable again.

On some windowing systems, this request is asynchronous and the new window
aspect ratio may not have have been applied immediately upon the return of
this function. If an immediate change is required, call SDL_SyncWindow() to
block until the changes have taken effect.

When the window size changes, an SDL_EVENT_WINDOW_RESIZED event will be
emitted with the new window dimensions. Note that the new dimensions may
not match the exact aspect ratio requested, as some windowing systems can
restrict the window size in certain scenarios (e.g. constraining the size
of the content area to remain within the usable desktop bounds).
Additionally, as this is just a request, it can be denied by the windowing
system.

\\param window the window to change.
\\param min_aspect the minimum aspect ratio of the window, or 0.0f for no
                  limit.
\\param max_aspect the maximum aspect ratio of the window, or 0.0f for no
                  limit.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowAspectRatio
\\sa SDL_SyncWindow
")
(:FUNCTION "SDL_GetWindowAspectRatio" "Get the size of a window's client area.

\\param window the window to query the width and height from.
\\param min_aspect a pointer filled in with the minimum aspect ratio of the
                  window, may be NULL.
\\param max_aspect a pointer filled in with the maximum aspect ratio of the
                  window, may be NULL.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetWindowAspectRatio
")
(:FUNCTION "SDL_GetWindowBordersSize"
 "Get the size of a window's borders (decorations) around the client area.

Note: If this function fails (returns false), the size values will be
initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the
window in question was borderless.

Note: This function may fail on systems where the window has not yet been
decorated by the display server (for example, immediately after calling
SDL_CreateWindow). It is recommended that you wait at least until the
window has been presented and composited, so that the window system has a
chance to decorate the window and provide the border dimensions to SDL.

This function also returns false if getting the information is not
supported.

\\param window the window to query the size values of the border
              (decorations) from.
\\param top pointer to variable for storing the size of the top border; NULL
           is permitted.
\\param left pointer to variable for storing the size of the left border;
            NULL is permitted.
\\param bottom pointer to variable for storing the size of the bottom
              border; NULL is permitted.
\\param right pointer to variable for storing the size of the right border;
             NULL is permitted.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowSize
")
(:FUNCTION "SDL_GetWindowSizeInPixels"
 "Get the size of a window's client area, in pixels.

\\param window the window from which the drawable size should be queried.
\\param w a pointer to variable for storing the width in pixels, may be
         NULL.
\\param h a pointer to variable for storing the height in pixels, may be
         NULL.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreateWindow
\\sa SDL_GetWindowSize
")
(:FUNCTION "SDL_SetWindowMinimumSize"
 "Set the minimum size of a window's client area.

\\param window the window to change.
\\param min_w the minimum width of the window, or 0 for no limit.
\\param min_h the minimum height of the window, or 0 for no limit.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowMinimumSize
\\sa SDL_SetWindowMaximumSize
")
(:FUNCTION "SDL_GetWindowMinimumSize"
 "Get the minimum size of a window's client area.

\\param window the window to query.
\\param w a pointer filled in with the minimum width of the window, may be
         NULL.
\\param h a pointer filled in with the minimum height of the window, may be
         NULL.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowMaximumSize
\\sa SDL_SetWindowMinimumSize
")
(:FUNCTION "SDL_SetWindowMaximumSize"
 "Set the maximum size of a window's client area.

\\param window the window to change.
\\param max_w the maximum width of the window, or 0 for no limit.
\\param max_h the maximum height of the window, or 0 for no limit.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowMaximumSize
\\sa SDL_SetWindowMinimumSize
")
(:FUNCTION "SDL_GetWindowMaximumSize"
 "Get the maximum size of a window's client area.

\\param window the window to query.
\\param w a pointer filled in with the maximum width of the window, may be
         NULL.
\\param h a pointer filled in with the maximum height of the window, may be
         NULL.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowMinimumSize
\\sa SDL_SetWindowMaximumSize
")
(:FUNCTION "SDL_SetWindowBordered" "Set the border state of a window.

This will add or remove the window's `SDL_WINDOW_BORDERLESS` flag and add
or remove the border from the actual window. This is a no-op if the
window's border already matches the requested state.

You can't change the border state of a fullscreen window.

\\param window the window of which to change the border state.
\\param bordered false to remove border, true to add border.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowFlags
")
(:FUNCTION "SDL_SetWindowResizable" "Set the user-resizable state of a window.

This will add or remove the window's `SDL_WINDOW_RESIZABLE` flag and
allow/disallow user resizing of the window. This is a no-op if the window's
resizable state already matches the requested state.

You can't change the resizable state of a fullscreen window.

\\param window the window of which to change the resizable state.
\\param resizable true to allow resizing, false to disallow.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowFlags
")
(:FUNCTION "SDL_SetWindowAlwaysOnTop"
 "Set the window to always be above the others.

This will add or remove the window's `SDL_WINDOW_ALWAYS_ON_TOP` flag. This
will bring the window to the front and keep the window above the rest.

\\param window the window of which to change the always on top state.
\\param on_top true to set the window always on top, false to disable.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowFlags
")
(:FUNCTION "SDL_ShowWindow" "Show a window.

\\param window the window to show.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_HideWindow
\\sa SDL_RaiseWindow
")
(:FUNCTION "SDL_HideWindow" "Hide a window.

\\param window the window to hide.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_ShowWindow
\\sa SDL_WINDOW_HIDDEN
")
(:FUNCTION "SDL_RaiseWindow"
 "Request that a window be raised above other windows and gain the input
focus.

The result of this request is subject to desktop window manager policy,
particularly if raising the requested window would result in stealing focus
from another application. If the window is successfully raised and gains
input focus, an SDL_EVENT_WINDOW_FOCUS_GAINED event will be emitted, and
the window will have the SDL_WINDOW_INPUT_FOCUS flag set.

\\param window the window to raise.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_MaximizeWindow"
 "Request that the window be made as large as possible.

Non-resizable windows can't be maximized. The window must have the
SDL_WINDOW_RESIZABLE flag set, or this will have no effect.

On some windowing systems this request is asynchronous and the new window
state may not have have been applied immediately upon the return of this
function. If an immediate change is required, call SDL_SyncWindow() to
block until the changes have taken effect.

When the window state changes, an SDL_EVENT_WINDOW_MAXIMIZED event will be
emitted. Note that, as this is just a request, the windowing system can
deny the state change.

When maximizing a window, whether the constraints set via
SDL_SetWindowMaximumSize() are honored depends on the policy of the window
manager. Win32 and macOS enforce the constraints when maximizing, while X11
and Wayland window managers may vary.

\\param window the window to maximize.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_MinimizeWindow
\\sa SDL_RestoreWindow
\\sa SDL_SyncWindow
")
(:FUNCTION "SDL_MinimizeWindow"
 "Request that the window be minimized to an iconic representation.

If the window is in a fullscreen state, this request has no direct effect.
It may alter the state the window is returned to when leaving fullscreen.

On some windowing systems this request is asynchronous and the new window
state may not have been applied immediately upon the return of this
function. If an immediate change is required, call SDL_SyncWindow() to
block until the changes have taken effect.

When the window state changes, an SDL_EVENT_WINDOW_MINIMIZED event will be
emitted. Note that, as this is just a request, the windowing system can
deny the state change.

\\param window the window to minimize.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_MaximizeWindow
\\sa SDL_RestoreWindow
\\sa SDL_SyncWindow
")
(:FUNCTION "SDL_RestoreWindow"
 "Request that the size and position of a minimized or maximized window be
restored.

If the window is in a fullscreen state, this request has no direct effect.
It may alter the state the window is returned to when leaving fullscreen.

On some windowing systems this request is asynchronous and the new window
state may not have have been applied immediately upon the return of this
function. If an immediate change is required, call SDL_SyncWindow() to
block until the changes have taken effect.

When the window state changes, an SDL_EVENT_WINDOW_RESTORED event will be
emitted. Note that, as this is just a request, the windowing system can
deny the state change.

\\param window the window to restore.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_MaximizeWindow
\\sa SDL_MinimizeWindow
\\sa SDL_SyncWindow
")
(:FUNCTION "SDL_SetWindowFullscreen"
 "Request that the window's fullscreen state be changed.

By default a window in fullscreen state uses borderless fullscreen desktop
mode, but a specific exclusive display mode can be set using
SDL_SetWindowFullscreenMode().

On some windowing systems this request is asynchronous and the new
fullscreen state may not have have been applied immediately upon the return
of this function. If an immediate change is required, call SDL_SyncWindow()
to block until the changes have taken effect.

When the window state changes, an SDL_EVENT_WINDOW_ENTER_FULLSCREEN or
SDL_EVENT_WINDOW_LEAVE_FULLSCREEN event will be emitted. Note that, as this
is just a request, it can be denied by the windowing system.

\\param window the window to change.
\\param fullscreen true for fullscreen mode, false for windowed mode.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowFullscreenMode
\\sa SDL_SetWindowFullscreenMode
\\sa SDL_SyncWindow
\\sa SDL_WINDOW_FULLSCREEN
")
(:FUNCTION "SDL_SyncWindow" "Block until any pending window state is finalized.

On asynchronous windowing systems, this acts as a synchronization barrier
for pending window state. It will attempt to wait until any pending window
state has been applied and is guaranteed to return within finite time. Note
that for how long it can potentially block depends on the underlying window
system, as window state changes may involve somewhat lengthy animations
that must complete before the window is in its final requested state.

On windowing systems where changes are immediate, this does nothing.

\\param window the window for which to wait for the pending state to be
              applied.
\\returns true on success or false if the operation timed out before the
         window was in the requested state.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetWindowSize
\\sa SDL_SetWindowPosition
\\sa SDL_SetWindowFullscreen
\\sa SDL_MinimizeWindow
\\sa SDL_MaximizeWindow
\\sa SDL_RestoreWindow
\\sa SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS
")
(:FUNCTION "SDL_WindowHasSurface"
 "Return whether the window has a surface associated with it.

\\param window the window to query.
\\returns true if there is a surface associated with the window, or false
         otherwise.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowSurface
")
(:FUNCTION "SDL_GetWindowSurface"
 "Get the SDL surface associated with the window.

A new surface will be created with the optimal format for the window, if
necessary. This surface will be freed when the window is destroyed. Do not
free this surface.

This surface will be invalidated if the window is resized. After resizing a
window this function must be called again to return a valid surface.

You may not combine this with 3D or the rendering API on this window.

This function is affected by `SDL_HINT_FRAMEBUFFER_ACCELERATION`.

\\param window the window to query.
\\returns the surface associated with the window, or NULL on failure; call
         SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_DestroyWindowSurface
\\sa SDL_WindowHasSurface
\\sa SDL_UpdateWindowSurface
\\sa SDL_UpdateWindowSurfaceRects
")
(:FUNCTION "SDL_SetWindowSurfaceVSync" "Toggle VSync for the window surface.

When a window surface is created, vsync defaults to
SDL_WINDOW_SURFACE_VSYNC_DISABLED.

The `vsync` parameter can be 1 to synchronize present with every vertical
refresh, 2 to synchronize present with every second vertical refresh, etc.,
SDL_WINDOW_SURFACE_VSYNC_ADAPTIVE for late swap tearing (adaptive vsync),
or SDL_WINDOW_SURFACE_VSYNC_DISABLED to disable. Not every value is
supported by every driver, so you should check the return value to see
whether the requested setting is supported.

\\param window the window.
\\param vsync the vertical refresh sync interval.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowSurfaceVSync
")
(:FUNCTION "SDL_GetWindowSurfaceVSync" "Get VSync for the window surface.

\\param window the window to query.
\\param vsync an int filled with the current vertical refresh sync interval.
             See SDL_SetWindowSurfaceVSync() for the meaning of the value.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetWindowSurfaceVSync
")
(:FUNCTION "SDL_UpdateWindowSurface" "Copy the window surface to the screen.

This is the function you use to reflect any changes to the surface on the
screen.

This function is equivalent to the SDL 1.2 API SDL_Flip().

\\param window the window to update.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowSurface
\\sa SDL_UpdateWindowSurfaceRects
")
(:FUNCTION "SDL_UpdateWindowSurfaceRects"
 "Copy areas of the window surface to the screen.

This is the function you use to reflect changes to portions of the surface
on the screen.

This function is equivalent to the SDL 1.2 API SDL_UpdateRects().

Note that this function will update _at least_ the rectangles specified,
but this is only intended as an optimization; in practice, this might
update more of the screen (or all of the screen!), depending on what method
SDL uses to send pixels to the system.

\\param window the window to update.
\\param rects an array of SDL_Rect structures representing areas of the
             surface to copy, in pixels.
\\param numrects the number of rectangles.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowSurface
\\sa SDL_UpdateWindowSurface
")
(:FUNCTION "SDL_DestroyWindowSurface"
 "Destroy the surface associated with the window.

\\param window the window to update.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowSurface
\\sa SDL_WindowHasSurface
")
(:FUNCTION "SDL_SetWindowKeyboardGrab" "Set a window's keyboard grab mode.

Keyboard grab enables capture of system keyboard shortcuts like Alt+Tab or
the Meta/Super key. Note that not all system keyboard shortcuts can be
captured by applications (one example is Ctrl+Alt+Del on Windows).

This is primarily intended for specialized applications such as VNC clients
or VM frontends. Normal games should not use keyboard grab.

When keyboard grab is enabled, SDL will continue to handle Alt+Tab when the
window is full-screen to ensure the user is not trapped in your
application. If you have a custom keyboard shortcut to exit fullscreen
mode, you may suppress this behavior with
`SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED`.

If the caller enables a grab while another window is currently grabbed, the
other window loses its grab in favor of the caller's window.

\\param window the window for which the keyboard grab mode should be set.
\\param grabbed this is true to grab keyboard, and false to release.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowKeyboardGrab
\\sa SDL_SetWindowMouseGrab
")
(:FUNCTION "SDL_SetWindowMouseGrab" "Set a window's mouse grab mode.

Mouse grab confines the mouse cursor to the window.

\\param window the window for which the mouse grab mode should be set.
\\param grabbed this is true to grab mouse, and false to release.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowMouseRect
\\sa SDL_SetWindowMouseRect
\\sa SDL_SetWindowMouseGrab
\\sa SDL_SetWindowKeyboardGrab
")
(:FUNCTION "SDL_GetWindowKeyboardGrab" "Get a window's keyboard grab mode.

\\param window the window to query.
\\returns true if keyboard is grabbed, and false otherwise.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetWindowKeyboardGrab
")
(:FUNCTION "SDL_GetWindowMouseGrab" "Get a window's mouse grab mode.

\\param window the window to query.
\\returns true if mouse is grabbed, and false otherwise.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowMouseRect
\\sa SDL_SetWindowMouseRect
\\sa SDL_SetWindowMouseGrab
\\sa SDL_SetWindowKeyboardGrab
")
(:FUNCTION "SDL_GetGrabbedWindow"
 "Get the window that currently has an input grab enabled.

\\returns the window if input is grabbed or NULL otherwise.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetWindowMouseGrab
\\sa SDL_SetWindowKeyboardGrab
")
(:FUNCTION "SDL_SetWindowMouseRect"
 "Confines the cursor to the specified area of a window.

Note that this does NOT grab the cursor, it only defines the area a cursor
is restricted to when the window has mouse focus.

\\param window the window that will be associated with the barrier.
\\param rect a rectangle area in window-relative coordinates. If NULL the
            barrier for the specified window will be destroyed.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowMouseRect
\\sa SDL_GetWindowMouseGrab
\\sa SDL_SetWindowMouseGrab
")
(:FUNCTION "SDL_GetWindowMouseRect"
 "Get the mouse confinement rectangle of a window.

\\param window the window to query.
\\returns a pointer to the mouse confinement rectangle of a window, or NULL
         if there isn't one.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetWindowMouseRect
\\sa SDL_GetWindowMouseGrab
\\sa SDL_SetWindowMouseGrab
")
(:FUNCTION "SDL_SetWindowOpacity" "Set the opacity for a window.

The parameter `opacity` will be clamped internally between 0.0f
(transparent) and 1.0f (opaque).

This function also returns false if setting the opacity isn't supported.

\\param window the window which will be made transparent or opaque.
\\param opacity the opacity value (0.0f - transparent, 1.0f - opaque).
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GetWindowOpacity
")
(:FUNCTION "SDL_GetWindowOpacity" "Get the opacity of a window.

If transparency isn't supported on this platform, opacity will be returned
as 1.0f without error.

\\param window the window to get the current opacity value from.
\\returns the opacity, (0.0f - transparent, 1.0f - opaque), or -1.0f on
         failure; call SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetWindowOpacity
")
(:FUNCTION "SDL_SetWindowParent" "Set the window as a child of a parent window.

If the window is already the child of an existing window, it will be
reparented to the new owner. Setting the parent window to NULL unparents
the window and removes child window status.

If a parent window is hidden or destroyed, the operation will be
recursively applied to child windows. Child windows hidden with the parent
that did not have their hidden status explicitly set will be restored when
the parent is shown.

Attempting to set the parent of a window that is currently in the modal
state will fail. Use SDL_SetWindowModal() to cancel the modal status before
attempting to change the parent.

Popup windows cannot change parents and attempts to do so will fail.

Setting a parent window that is currently the sibling or descendent of the
child window results in undefined behavior.

\\param window the window that should become the child of a parent.
\\param parent the new parent window for the child window.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetWindowModal
")
(:FUNCTION "SDL_SetWindowModal" "Toggle the state of the window as modal.

To enable modal status on a window, the window must currently be the child
window of a parent, or toggling modal status on will fail.

\\param window the window on which to set the modal state.
\\param modal true to toggle modal status on, false to toggle it off.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_SetWindowParent
\\sa SDL_WINDOW_MODAL
")
(:FUNCTION "SDL_SetWindowFocusable"
 "Set whether the window may have input focus.

\\param window the window to set focusable state.
\\param focusable true to allow input focus, false to not allow input focus.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_ShowWindowSystemMenu" "Display the system-level window menu.

This default window menu is provided by the system and on some platforms
provides functionality for setting or changing privileged state on the
window, such as moving it between workspaces or displays, or toggling the
always-on-top property.

On platforms or desktops where this is unsupported, this function does
nothing.

\\param window the window for which the menu will be displayed.
\\param x the x coordinate of the menu, relative to the origin (top-left) of
         the client area.
\\param y the y coordinate of the menu, relative to the origin (top-left) of
         the client area.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:ENUM "SDL_HitTestResult"
 "Possible return values from the SDL_HitTest callback.

\\threadsafety This function should only be called on the main thread.

\\since This enum is available since SDL 3.2.0.

\\sa SDL_HitTest
")
(:FUNCTION "SDL_SetWindowHitTest"
 "Provide a callback that decides if a window region has special properties.

Normally windows are dragged and resized by decorations provided by the
system window manager (a title bar, borders, etc), but for some apps, it
makes sense to drag them from somewhere else inside the window itself; for
example, one might have a borderless window that wants to be draggable from
any part, or simulate its own title bar, etc.

This function lets the app provide a callback that designates pieces of a
given window as special. This callback is run during event processing if we
need to tell the OS to treat a region of the window specially; the use of
this callback is known as \"hit testing.\"

Mouse input may not be delivered to your application if it is within a
special area; the OS will often apply that input to moving the window or
resizing the window and not deliver it to the application.

Specifying NULL for a callback disables hit-testing. Hit-testing is
disabled by default.

Platforms that don't support this functionality will return false
unconditionally, even if you're attempting to disable hit-testing.

Your callback may fire at any time, and its firing does not indicate any
specific behavior (for example, on Windows, this certainly might fire when
the OS is deciding whether to drag your window, but it fires for lots of
other reasons, too, some unrelated to anything you probably care about _and
when the mouse isn't actually at the location it is testing_). Since this
can fire at any time, you should try to keep your callback efficient,
devoid of allocations, etc.

\\param window the window to set hit-testing on.
\\param callback the function to call when doing a hit-test.
\\param callback_data an app-defined void pointer passed to **callback**.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_SetWindowShape" "Set the shape of a transparent window.

This sets the alpha channel of a transparent window and any fully
transparent areas are also transparent to mouse clicks. If you are using
something besides the SDL render API, then you are responsible for drawing
the alpha channel of the window to match the shape alpha channel to get
consistent cross-platform results.

The shape is copied inside this function, so you can free it afterwards. If
your shape surface changes, you should call SDL_SetWindowShape() again to
update the window. This is an expensive operation, so should be done
sparingly.

The window must have been created with the SDL_WINDOW_TRANSPARENT flag.

\\param window the window.
\\param shape the surface representing the shape of the window, or NULL to
             remove any current shape.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_FlashWindow"
 "Request a window to demand attention from the user.

\\param window the window to be flashed.
\\param operation the operation to perform.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_DestroyWindow" "Destroy a window.

Any child windows owned by the window will be recursively destroyed as
well.

Note that on some platforms, the visible window may not actually be removed
from the screen until the SDL event loop is pumped again, even though the
SDL_Window is no longer valid after this call.

\\param window the window to destroy.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_CreatePopupWindow
\\sa SDL_CreateWindow
\\sa SDL_CreateWindowWithProperties
")
(:FUNCTION "SDL_ScreenSaverEnabled"
 "Check whether the screensaver is currently enabled.

The screensaver is disabled by default.

The default can also be changed using `SDL_HINT_VIDEO_ALLOW_SCREENSAVER`.

\\returns true if the screensaver is enabled, false if it is disabled.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_DisableScreenSaver
\\sa SDL_EnableScreenSaver
")
(:FUNCTION "SDL_EnableScreenSaver"
 "Allow the screen to be blanked by a screen saver.

\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_DisableScreenSaver
\\sa SDL_ScreenSaverEnabled
")
(:FUNCTION "SDL_DisableScreenSaver"
 "Prevent the screen from being blanked by a screen saver.

If you disable the screensaver, it is automatically re-enabled when SDL
quits.

The screensaver is disabled by default, but this may by changed by
SDL_HINT_VIDEO_ALLOW_SCREENSAVER.

\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_EnableScreenSaver
\\sa SDL_ScreenSaverEnabled
")
(:FUNCTION "SDL_GL_LoadLibrary" "Dynamically load an OpenGL library.

This should be done after initializing the video driver, but before
creating any OpenGL windows. If no OpenGL library is loaded, the default
library will be loaded upon creation of the first OpenGL window.

If you do this, you need to retrieve all of the GL functions used in your
program from the dynamic library using SDL_GL_GetProcAddress().

\\param path the platform dependent OpenGL library name, or NULL to open the
            default OpenGL library.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GL_GetProcAddress
\\sa SDL_GL_UnloadLibrary
")
(:FUNCTION "SDL_GL_GetProcAddress" "Get an OpenGL function by name.

If the GL library is loaded at runtime with SDL_GL_LoadLibrary(), then all
GL functions must be retrieved this way. Usually this is used to retrieve
function pointers to OpenGL extensions.

There are some quirks to looking up OpenGL functions that require some
extra care from the application. If you code carefully, you can handle
these quirks without any platform-specific code, though:

- On Windows, function pointers are specific to the current GL context;
  this means you need to have created a GL context and made it current
  before calling SDL_GL_GetProcAddress(). If you recreate your context or
  create a second context, you should assume that any existing function
  pointers aren't valid to use with it. This is (currently) a
  Windows-specific limitation, and in practice lots of drivers don't suffer
  this limitation, but it is still the way the wgl API is documented to
  work and you should expect crashes if you don't respect it. Store a copy
  of the function pointers that comes and goes with context lifespan.
- On X11, function pointers returned by this function are valid for any
  context, and can even be looked up before a context is created at all.
  This means that, for at least some common OpenGL implementations, if you
  look up a function that doesn't exist, you'll get a non-NULL result that
  is _NOT_ safe to call. You must always make sure the function is actually
  available for a given GL context before calling it, by checking for the
  existence of the appropriate extension with SDL_GL_ExtensionSupported(),
  or verifying that the version of OpenGL you're using offers the function
  as core functionality.
- Some OpenGL drivers, on all platforms, *will* return NULL if a function
  isn't supported, but you can't count on this behavior. Check for
  extensions you use, and if you get a NULL anyway, act as if that
  extension wasn't available. This is probably a bug in the driver, but you
  can code defensively for this scenario anyhow.
- Just because you're on Linux/Unix, don't assume you'll be using X11.
  Next-gen display servers are waiting to replace it, and may or may not
  make the same promises about function pointers.
- OpenGL function pointers must be declared `APIENTRY` as in the example
  code. This will ensure the proper calling convention is followed on
  platforms where this matters (Win32) thereby avoiding stack corruption.

\\param proc the name of an OpenGL function.
\\returns a pointer to the named OpenGL function. The returned pointer
         should be cast to the appropriate function signature.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GL_ExtensionSupported
\\sa SDL_GL_LoadLibrary
\\sa SDL_GL_UnloadLibrary
")
(:FUNCTION "SDL_EGL_GetProcAddress" "Get an EGL library function by name.

If an EGL library is loaded, this function allows applications to get entry
points for EGL functions. This is useful to provide to an EGL API and
extension loader.

\\param proc the name of an EGL function.
\\returns a pointer to the named EGL function. The returned pointer should
         be cast to the appropriate function signature.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_EGL_GetCurrentDisplay
")
(:FUNCTION "SDL_GL_UnloadLibrary"
 "Unload the OpenGL library previously loaded by SDL_GL_LoadLibrary().

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GL_LoadLibrary
")
(:FUNCTION "SDL_GL_ExtensionSupported"
 "Check if an OpenGL extension is supported for the current context.

This function operates on the current GL context; you must have created a
context and it must be current before calling this function. Do not assume
that all contexts you create will have the same set of extensions
available, or that recreating an existing context will offer the same
extensions again.

While it's probably not a massive overhead, this function is not an O(1)
operation. Check the extensions you care about after creating the GL
context and save that information somewhere instead of calling the function
every time you need to know.

\\param extension the name of the extension to check.
\\returns true if the extension is supported, false otherwise.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GL_ResetAttributes"
 "Reset all previously set OpenGL context attributes to their default values.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GL_GetAttribute
\\sa SDL_GL_SetAttribute
")
(:FUNCTION "SDL_GL_SetAttribute"
 "Set an OpenGL window attribute before window creation.

This function sets the OpenGL attribute `attr` to `value`. The requested
attributes should be set before creating an OpenGL window. You should use
SDL_GL_GetAttribute() to check the values after creating the OpenGL
context, since the values obtained can differ from the requested ones.

\\param attr an SDL_GLAttr enum value specifying the OpenGL attribute to
            set.
\\param value the desired value for the attribute.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GL_GetAttribute
\\sa SDL_GL_ResetAttributes
")
(:FUNCTION "SDL_GL_GetAttribute"
 "Get the actual value for an attribute from the current context.

\\param attr an SDL_GLAttr enum value specifying the OpenGL attribute to
            get.
\\param value a pointer filled in with the current value of `attr`.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GL_ResetAttributes
\\sa SDL_GL_SetAttribute
")
(:FUNCTION "SDL_GL_CreateContext"
 "Create an OpenGL context for an OpenGL window, and make it current.

Windows users new to OpenGL should note that, for historical reasons, GL
functions added after OpenGL version 1.1 are not available by default.
Those functions must be loaded at run-time, either with an OpenGL
extension-handling library or with SDL_GL_GetProcAddress() and its related
functions.

SDL_GLContext is opaque to the application.

\\param window the window to associate with the context.
\\returns the OpenGL context associated with `window` or NULL on failure;
         call SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GL_DestroyContext
\\sa SDL_GL_MakeCurrent
")
(:FUNCTION "SDL_GL_MakeCurrent"
 "Set up an OpenGL context for rendering into an OpenGL window.

The context must have been created with a compatible window.

\\param window the window to associate with the context.
\\param context the OpenGL context to associate with the window.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GL_CreateContext
")
(:FUNCTION "SDL_GL_GetCurrentWindow" "Get the currently active OpenGL window.

\\returns the currently active OpenGL window on success or NULL on failure;
         call SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GL_GetCurrentContext" "Get the currently active OpenGL context.

\\returns the currently active OpenGL context or NULL on failure; call
         SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GL_MakeCurrent
")
(:FUNCTION "SDL_EGL_GetCurrentDisplay" "Get the currently active EGL display.

\\returns the currently active EGL display or NULL on failure; call
         SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_EGL_GetCurrentConfig" "Get the currently active EGL config.

\\returns the currently active EGL config or NULL on failure; call
         SDL_GetError() for more information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_EGL_GetWindowSurface"
 "Get the EGL surface associated with the window.

\\param window the window to query.
\\returns the EGLSurface pointer associated with the window, or NULL on
         failure.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_EGL_SetAttributeCallbacks"
 "Sets the callbacks for defining custom EGLAttrib arrays for EGL
initialization.

Callbacks that aren't needed can be set to NULL.

NOTE: These callback pointers will be reset after SDL_GL_ResetAttributes.

\\param platformAttribCallback callback for attributes to pass to
                              eglGetPlatformDisplay. May be NULL.
\\param surfaceAttribCallback callback for attributes to pass to
                             eglCreateSurface. May be NULL.
\\param contextAttribCallback callback for attributes to pass to
                             eglCreateContext. May be NULL.
\\param userdata a pointer that is passed to the callbacks.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GL_SetSwapInterval"
 "Set the swap interval for the current OpenGL context.

Some systems allow specifying -1 for the interval, to enable adaptive
vsync. Adaptive vsync works the same as vsync, but if you've already missed
the vertical retrace for a given frame, it swaps buffers immediately, which
might be less jarring for the user during occasional framerate drops. If an
application requests adaptive vsync and the system does not support it,
this function will fail and return false. In such a case, you should
probably retry the call with 1 for the interval.

Adaptive vsync is implemented for some glX drivers with
GLX_EXT_swap_control_tear, and for some Windows drivers with
WGL_EXT_swap_control_tear.

Read more on the Khronos wiki:
https://www.khronos.org/opengl/wiki/Swap_Interval#Adaptive_Vsync

\\param interval 0 for immediate updates, 1 for updates synchronized with
                the vertical retrace, -1 for adaptive vsync.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GL_GetSwapInterval
")
(:FUNCTION "SDL_GL_GetSwapInterval"
 "Get the swap interval for the current OpenGL context.

If the system can't determine the swap interval, or there isn't a valid
current context, this function will set *interval to 0 as a safe default.

\\param interval output interval value. 0 if there is no vertical retrace
                synchronization, 1 if the buffer swap is synchronized with
                the vertical retrace, and -1 if late swaps happen
                immediately instead of waiting for the next retrace.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GL_SetSwapInterval
")
(:FUNCTION "SDL_GL_SwapWindow" "Update a window with OpenGL rendering.

This is used with double-buffered OpenGL contexts, which are the default.

On macOS, make sure you bind 0 to the draw framebuffer before swapping the
window, otherwise nothing will happen. If you aren't using
glBindFramebuffer(), this is the default and you won't have to do anything
extra.

\\param window the window to change.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_GL_DestroyContext" "Delete an OpenGL context.

\\param context the OpenGL context to be deleted.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function should only be called on the main thread.

\\since This function is available since SDL 3.2.0.

\\sa SDL_GL_CreateContext
")
(:FUNCTION "SDL_Vulkan_LoadLibrary" "Dynamically load the Vulkan loader library.

This should be called after initializing the video driver, but before
creating any Vulkan windows. If no Vulkan loader library is loaded, the
default library will be loaded upon creation of the first Vulkan window.

SDL keeps a counter of how many times this function has been successfully
called, so it is safe to call this function multiple times, so long as it
is eventually paired with an equivalent number of calls to
SDL_Vulkan_UnloadLibrary. The `path` argument is ignored unless there is no
library currently loaded, and and the library isn't actually unloaded until
there have been an equivalent number of calls to SDL_Vulkan_UnloadLibrary.

It is fairly common for Vulkan applications to link with libvulkan instead
of explicitly loading it at run time. This will work with SDL provided the
application links to a dynamic library and both it and SDL use the same
search path.

If you specify a non-NULL `path`, an application should retrieve all of the
Vulkan functions it uses from the dynamic library using
SDL_Vulkan_GetVkGetInstanceProcAddr unless you can guarantee `path` points
to the same vulkan loader library the application linked to.

On Apple devices, if `path` is NULL, SDL will attempt to find the
`vkGetInstanceProcAddr` address within all the Mach-O images of the current
process. This is because it is fairly common for Vulkan applications to
link with libvulkan (and historically MoltenVK was provided as a static
library). If it is not found, on macOS, SDL will attempt to load
`vulkan.framework/vulkan`, `libvulkan.1.dylib`,
`MoltenVK.framework/MoltenVK`, and `libMoltenVK.dylib`, in that order. On
iOS, SDL will attempt to load `libMoltenVK.dylib`. Applications using a
dynamic framework or .dylib must ensure it is included in its application
bundle.

On non-Apple devices, application linking with a static libvulkan is not
supported. Either do not link to the Vulkan loader or link to a dynamic
library version.

\\param path the platform dependent Vulkan loader library name or NULL.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.

\\sa SDL_Vulkan_GetVkGetInstanceProcAddr
\\sa SDL_Vulkan_UnloadLibrary
")
(:FUNCTION "SDL_Vulkan_GetVkGetInstanceProcAddr"
 "Get the address of the `vkGetInstanceProcAddr` function.

This should be called after either calling SDL_Vulkan_LoadLibrary() or
creating an SDL_Window with the `SDL_WINDOW_VULKAN` flag.

The actual type of the returned function pointer is
PFN_vkGetInstanceProcAddr, but that isn't available because the Vulkan
headers are not included here. You should cast the return value of this
function to that type, e.g.

`vkGetInstanceProcAddr =
(PFN_vkGetInstanceProcAddr)SDL_Vulkan_GetVkGetInstanceProcAddr();`

\\returns the function pointer for `vkGetInstanceProcAddr` or NULL on
         failure; call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.
")
(:FUNCTION "SDL_Vulkan_UnloadLibrary"
 "Unload the Vulkan library previously loaded by SDL_Vulkan_LoadLibrary().

SDL keeps a counter of how many times this function has been called, so it
is safe to call this function multiple times, so long as it is paired with
an equivalent number of calls to SDL_Vulkan_LoadLibrary. The library isn't
actually unloaded until there have been an equivalent number of calls to
SDL_Vulkan_UnloadLibrary.

Once the library has actually been unloaded, if any Vulkan instances
remain, they will likely crash the program. Clean up any existing Vulkan
resources, and destroy appropriate windows, renderers and GPU devices
before calling this function.

\\threadsafety This function is not thread safe.

\\since This function is available since SDL 3.2.0.

\\sa SDL_Vulkan_LoadLibrary
")
(:FUNCTION "SDL_Vulkan_GetInstanceExtensions"
 "Get the Vulkan instance extensions needed for vkCreateInstance.

This should be called after either calling SDL_Vulkan_LoadLibrary() or
creating an SDL_Window with the `SDL_WINDOW_VULKAN` flag.

On return, the variable pointed to by `count` will be set to the number of
elements returned, suitable for using with
VkInstanceCreateInfo::enabledExtensionCount, and the returned array can be
used with VkInstanceCreateInfo::ppEnabledExtensionNames, for calling
Vulkan's vkCreateInstance API.

You should not free the returned array; it is owned by SDL.

\\param count a pointer filled in with the number of extensions returned.
\\returns an array of extension name strings on success, NULL on failure;
         call SDL_GetError() for more information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_Vulkan_CreateSurface
")
(:FUNCTION "SDL_Vulkan_CreateSurface"
 "Create a Vulkan rendering surface for a window.

The `window` must have been created with the `SDL_WINDOW_VULKAN` flag and
`instance` must have been created with extensions returned by
SDL_Vulkan_GetInstanceExtensions() enabled.

If `allocator` is NULL, Vulkan will use the system default allocator. This
argument is passed directly to Vulkan and isn't used by SDL itself.

\\param window the window to which to attach the Vulkan surface.
\\param instance the Vulkan instance handle.
\\param allocator a VkAllocationCallbacks struct, which lets the app set the
                 allocator that creates the surface. Can be NULL.
\\param surface a pointer to a VkSurfaceKHR handle to output the newly
               created surface.
\\returns true on success or false on failure; call SDL_GetError() for more
         information.

\\since This function is available since SDL 3.2.0.

\\sa SDL_Vulkan_GetInstanceExtensions
\\sa SDL_Vulkan_DestroySurface
")
(:FUNCTION "SDL_Vulkan_DestroySurface"
 "Destroy the Vulkan rendering surface of a window.

This should be called before SDL_DestroyWindow, if SDL_Vulkan_CreateSurface
was called after SDL_CreateWindow.

The `instance` must have been created with extensions returned by
SDL_Vulkan_GetInstanceExtensions() enabled and `surface` must have been
created successfully by an SDL_Vulkan_CreateSurface() call.

If `allocator` is NULL, Vulkan will use the system default allocator. This
argument is passed directly to Vulkan and isn't used by SDL itself.

\\param instance the Vulkan instance handle.
\\param surface vkSurfaceKHR handle to destroy.
\\param allocator a VkAllocationCallbacks struct, which lets the app set the
                 allocator that destroys the surface. Can be NULL.

\\since This function is available since SDL 3.2.0.

\\sa SDL_Vulkan_GetInstanceExtensions
\\sa SDL_Vulkan_CreateSurface
")
(:FUNCTION "SDL_Vulkan_GetPresentationSupport"
 "Query support for presentation via a given physical device and queue
family.

The `instance` must have been created with extensions returned by
SDL_Vulkan_GetInstanceExtensions() enabled.

\\param instance the Vulkan instance handle.
\\param physicalDevice a valid Vulkan physical device handle.
\\param queueFamilyIndex a valid queue family index for the given physical
                        device.
\\returns true if supported, false if unsupported or an error occurred.

\\since This function is available since SDL 3.2.0.

\\sa SDL_Vulkan_GetInstanceExtensions
")
